{"id": "_Divide:", "Comment": "divide two numbers"}
{"id": "_chkEVEN:", "Comment": "check the number even or odd"}
{"id": "_check:", "Comment": "number divisible by 5 or not 5"}
{"id": "_DisplayWord:", "Comment": "word 5 time print"}
{"id": "_Displayonetofive:", "Comment": "print 5 to 1 number on screen"}
{"id": "_PrintStar:", "Comment": "one number from user and print that number of star"}
{"id": "_PrintStars:", "Comment": "one number from user and print that number of star"}
{"id": "_PrintStarss:", "Comment": "one number from user and print that number of star"}
{"id": "_PrintHello:", "Comment": "accept no from user if number less than 10 then print hello otherwise print demo"}
{"id": "_Display:", "Comment": "two number from user and display 1st number in 2nd number of times"}
{"id": "_boolchkEVEN:", "Comment": "check number even or not and return true for even numbers"}
{"id": "_PrintEven:", "Comment": "accept one number from user and print that number of even number"}
{"id": "_DisplayFactor:", "Comment": "Accept Number From User And Print Even Factors of Number"}
{"id": "_DisplayConvert:", "Comment": "Accept One Character from user and convert case of that character."}
{"id": "_chkVowel:", "Comment": "Accept One Character from User and check that character is vowel or not"}
{"id": "_IncomeTax:", "Comment": " Income Tax To Calculate Tax Amount"}
{"id": "_SchoolFees:", "Comment": "Diplay SchoolFees when users give input"}
{"id": "_TouristBill:", "Comment": "Generate bill for a tourist company"}
{"id": "_MultFact:", "Comment": "Accept number from user and display its multiplication of factors"}
{"id": "_FactRev:", "Comment": "Accept number from user and display its factors in decreasing order"}
{"id": "_NonFact:", "Comment": "Accept number from user and display all its non factors"}
{"id": "_SumNonFact:", "Comment": "Accept number from user and return summation of all its non factors"}
{"id": "_FactDiff:", "Comment": " Accept number from user and return difference between summation of all its factors and non factors"}
{"id": "_chkGreater:", "Comment": "Accept one number from user and check that number is greater than 100 or not"}
{"id": "_chkEqual:", "Comment": "Accept two numbers and check whether numbers are equal or not"}
{"id": "_Multiply:", "Comment": "Accept three numbers and print its multiplication"}
{"id": "_Percentage:", "Comment": "Accept Total Marks & Obtained Marks from user and Calculate Percentage"}
{"id": "_Pattern:", "Comment": " Accept number from user and print that number of Dollar & Star on screen"}
{"id": "_PrintNumbertkn:", "Comment": "Accept number from user and print numbers till that number"}
{"id": "_DisplayNumberLine:", "Comment": " Accept number from user and print its numbers line"}
{"id": "_OddDisplay:", "Comment": "Accepts N from user and print all odd numbers up to N"}
{"id": "_MultipleDisplay:", "Comment": " Accept Number and print first 5 multiples of Number."}
{"id": "_NumberCompare:", "Comment": "Accept Number user if is less Than 50 print Small greater than 50 print Medium Greater than 100 print Greater"}
{"id": "_NumtoWord:", "Comment": "Accept Single Digit Number From User And Print It Into Word"}
{"id": "_Factorial:", "Comment": "Find Factorial Of Given Number"}
{"id": "_Table:", "Comment": " Program Which Accept Number From User And Display Its Table"}
{"id": "_TableReverse:", "Comment": "Accept Number From User And Display Its Table In Reverse Order"}
{"id": "_PatternStarHash:", "Comment": "Accept Number From User And Display Pattern"}
{"id": "_DollarToINR:", "Comment": "Accept Amount In US Dollar And Return Its Corresponding Value In Indian Currency"}
{"id": "_EvenFactorial:", "Comment": "Find Even Factorial Of Given Number"}
{"id": "_OddFactorial:", "Comment": "Find Odd Factorial Of Given Number"}
{"id": "_FactorialDiff", "Comment": "Returns Difference Between Even Factorial And Odd Factorial Of Given Number"}
{"id": "_CircleArea:", "Comment": "Accept Radius Of Circle From User And Calculate Its Area"}
{"id": "_RectArea:", "Comment": "Accept Width & Height Of Rectangle From User And Calculate Its Area"}
{"id": "_KMtometer:", "Comment": "Accept Distance In Kilometre And Convert Into Meter"}
{"id": "_fhtoCs:", "Comment": "Accept Temperature In Fahrenheit And Convert It Into Celsius"}
{"id": "_SquareMeter:", "Comment": "Accept Area In Square Feet And Convert It Into Square Meter"}
{"id": "_RangeDisplay:", "Comment": "Accept Range From User And Display All Numbers In Between Range"}
{"id": "_RangeDisplayEven:", "Comment": "Accept Range From User And Display All Even Numbers In That Between Range"}
{"id": "_RangeSum:", "Comment": "Accept Range From User And Return Addition Of All Numbers In Between That Range"}
{"id": "_RangeEvenSum::", "Comment": "ccept Range From User And Return Addition Of All Even Numbers In Between That Range"}
{"id": "_RangeRev:", "Comment": " Accept Accept Range From User And Display All Numbers In Between That Rrange In Reverse Order"}
{"id": "_DisplayRevDigit:", "Comment": "Accept Number From User And Display Its Digits In Reverse Order"}
{"id": "_ChkZero:", "Comment": "Accept Number From User And check Whether It Contains 0 In It Or Not"}
{"id": "_CountTwo:", "Comment": "Accept Number From User And Count Frequency Of 2 In It"}
{"id": "_CountFour:", "Comment": "Accept Number From User And Count Frequency Of 4 In It"}
{"id": "_FrequencyCount:", "Comment": "Accept Number From User And Count Frequency Of Such A Digits Which Are Less Than 6"}
{"id": "_CountEven:", "Comment": "Accept Number From User And Return The Count Of Even"}
{"id": "_CountOdd:", "Comment": "Accept Number From User And Returrn The Count Of Odd"}
{"id": "_CountRange:", "Comment": "Accept Number From User And Return The Count Of Digits In Between 3 & 7"}
{"id": "_MultDigits:", "Comment": " Accept Number From User And Return Multiplication Of All Digits"}
{"id": "_CountDiff::", "Comment": "Number From User And Return Difference Between Summation Of Even Digits and Summation Of Odd Digits"}
{"id": "_Pattern:", "Comment": "Accept Number Form User And Display Below Pattern"}
{"id": "_Patterns:", "Comment": "Accept Number From User And Display Below Pattern"}
{"id": "_Patt", "Comment": " Accept Number From User And Display Below Pattern"}
{"id": "_Patternview:", "Comment": "Accept Number From User And Display pattern"}
{"id": "_Patterning:", "Comment": "Accept Number From User And Display Below Pattern"}
{"id": "_PatternRow: ", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Pattern"}
{"id": "_PatternCol", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Pattern"}
{"id": "_PatternColumn:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Pattern"}
{"id": "_Patternok", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Pattern"}
{"id": "_Patternn", "Comment": "Accept number of rows and number of columns from user and display below"}
{"id": "_Patterner:", "Comment": "Accept number of Rows And Number of Columns from user and display below pattern"}
{"id": "_Patterno", "Comment": " Accept Number Of Rows And Number Of Columns From User And Display Below"}
{"id": "_NoPattern", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_NosPattern:", "Comment": " Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patternin", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patter", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patte:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_PatternCo:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_PatternRo:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_PatternR:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_PatternC:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patternk:", "Comment": " Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patterni:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patternb:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patternc:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patternd:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patternt:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patterne:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patternf:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patterng:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patternh:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patternj:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patternl:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Patterny:", "Comment": "Accept Number Of Rows And Number Of Columns From User And Display Below Pattern"}
{"id": "_Difference:", "Comment": "Accept N Numbers From User And Return Difference Between Summation Of Even Elements And Summation Of Odd Elements"}
{"id": "_Display", "Comment": "Accept N Numbers From User And Display All Such Elements Which Are Divisible By 5"}
{"id": "_Display1:", "Comment": "Accept N Numbers From User And Display All Such Elements Which Are Even And Divisible By 5"}
{"id": "_Display3:", "Comment": "Accept N Numbers From User And Display All Such Elements Which Are Divisible By 3 And 5"}
{"id": "_Display4:", "Comment": "Accept N Numbers From User And Display All Such Elements Which Are Multiples Of 11"}
{"id": "Count_Even_Frequency", "Comment": "Accept N Numbers From User And Return Frequency Of Even Numbers"}
{"id": "Even_Odd_No_Frequency:", "Comment": "Accept N Numbers From User And Return Difference Between Frequency Of Even Number And Odd Numbers"}
{"id": "_Check", "Comment": "Accept N Numbers From User Check Whether That Numbers Contains 11 In It Or Not"}
{"id": "_Frequency", "Comment": "Accept N numbers from user and accept one another number as NO ,return frequency of NO form it"}
{"id": "t_Frequency", "Comment": "Accept N Numbers From User And Return Frequency Of 11 Form It"}
{"id": "_Checker", "Comment": "Accept N Numbers From User And Accept One Another Number as NO ,Check Whether NO is Present Or Not"}
{"id": "Index_First_Occurrence_No", "Comment": "Accept N numbers from user and accept one another number as NO ,return index of first occurrence of that NO"}
{"id": "LastOcc", "Comment": "Accept N numbers from user and accept one another number as NO , return index of last occurrence of that NO"}
{"id": "_Range", "Comment": "Accept N numbers from user And Accept Range, Display All Elements From That Range"}
{"id": "Product", "Comment": "Accept N Numbers From User And Return Product Of All Odd Elements"}
{"id": "Largest_Number", "Comment": "Accept N Numbers From User And Return The Largest Number"}
{"id": "Smallest_Number", "Comment": "Accept N Numbers From User And Return The Smallest Number"}
{"id": "Diff_Smallest_Largest_No", "Comment": "Accept N Numbers From User And Return The Difference Between Largest And Smallest Number"}
{"id": "Three_Digit_No_Display", "Comment": "Accept N Numbers From User And Display All Such Numbers Which Contains 3 Digits In It"}
{"id": "Digit_Sum_Display", "Comment": "Accept N numbers from user and display summation of digits of each number"}
{"id": "ChkAlpha", "Comment": "Accept Character from user and check whether it is alphabet or not (A-Z a-z)"}
{"id": "ChkCapital", "Comment": "Accept Character from user and check whether it is capital or not (A-Z)"}
{"id": "_ChkDigit", "Comment": "Accept Character from user and check whether it is digit or not (0-9)"}
{"id": "_ChkSmall:", "Comment": "Accept Character from user and check whether it is small case or not (a-z)"}
{"id": "DisplaySchedule", "Comment": "Accept Division Of Student From User And Depends On The Division Display Exam Timing"}
{"id": "_DisplayASCII", "Comment": " Write A Program Which Displays ASCII Table"}
{"id": "_Displaye:", "Comment": "Accept character from user. If character is small display its corresponding capital character,and if it small then display its corresponding capital. In other cases display as it is"}
{"id": "Displayh", "Comment": "Accept character from user"}
{"id": "ChkSpecial_Char", "Comment": "Accept Character from user and check whether it is special symbol or not"}
{"id": "_Displayac:", "Comment": "Accept Character From User And Display Its ASCII Value In Decimal,Octal and Hexadecimal Format"}
{"id": "_CountCapital", "Comment": "Write a program which accept string from user and count number of capital characters"}
{"id": "_Count_Small", "Comment": "Write a program which accept string from user and count number of small characters"}
{"id": "Diff_Small_Capital_Char_EvenFactorial:", "Comment": "Accept Sting from User and return difference between frequency of small character and frequency capital character"}
{"id": "_ChkVowel", "Comment": "Check Vowel"}
{"id": "_StrLength", "Comment": "Accept string from user and check whether it contains vowels in it or not"}
{"id": "StrLowerCase", "Comment": "Accept string from user and convert it into lower case"}
{"id": "_StrUpperX", "Comment": "Accept string from user and convert it into Upper Case"}
{"id": "_StrtoggleX", "Comment": "accept string from user and toggle the case"}
{"id": "Display_Digit", "Comment": "accept string from user and Display Only Digits from that string"}
{"id": "_Count_White_Spaces", "Comment": "accept string from user And Count Number Of White Spaces"}
{"id": "StrtoggleX", "Comment": "accept string from user and toggle the case"}
{"id": "Chkchar", "Comment": "Accept String From User And Accept One Character Check whether Character is Present in String Or Not"}
{"id": "Count_Char", "Comment": "Accept String from user And Accept One Character Return Frequency Of That Character"}
{"id": "_First_Char", "Comment": "accept string from user and accept one character return index Of first occurrence of that character"}
{"id": "Last_Char", "Comment": "accept string from user and accept one character Return index of Last occurrence of that character"}
{"id": "_StrRevX", "Comment": "accept string from user reverse that string in place"}
{"id": "_StrNCpyX", "Comment": "program which accept string from user and copy the contents of that string into another string"}
{"id": "_StrCpyCapX", "Comment": "accept string from user and copy the contents of that string into another string"}
{"id": "_StrCpySmallX", "Comment": "accept string from user and copy small characters of that string into another string"}
{"id": "_StrConcatX", "Comment": "a program which 2 strings from user and concat second string after first string"}
{"id": "_StrLen", "Comment": "accept string from user and copy that characters of that string into another string in reverse order"}
{"id": "_Str_Cpy_WhiteSpaceX", "Comment": "accept string from user and copy that characters of that string into another string by removing all white spaces"}
{"id": "_Str_Cpy_Capital", "Comment": "accept string from user and copy that characters of that string into another string by converting all small characters into capital case"}
{"id": "_Str_Cpy_Small", "Comment": "accept string from user and copy that characters of that string into another string by converting all Capital character to small"}
{"id": "_Str_Cpy_Toggle", "Comment": "accept string from user and copy that characters of that string into another string by toggling the case"}
{"id": "_ChkBit", "Comment": "a program which checks whether 15th bit is On or OFF"}
{"id": "_ChkBit1", "Comment": "program which checks whether 5th & 18th bit is On or OFF"}
{"id": "_getCArray", "Comment": "program which gets the array"}
{"id": "_insertValueCArray", "Comment": "Insert the value in an array"}
{"id": "removeValueCArray", "Comment": "Remove a number from an array"}
{"id": "_pushValueCArray", "Comment": "Push a number from an array"}
{"id": "_updateValueCArray", "Comment": "update a number in an array"}
{"id": "eraseCArray:", "Comment": "erase a number in an array"}
{"id": "_reverseCArray", "Comment": "reverse all the numbers in an array"}
{"id": "_switchValuesCArray", "Comment": "switch values in an array"}
{"id": "displayCArray", "Comment": "display all numbers  in an array"}
{"id": "_blenderCArray", "Comment": "Blender all numbers  in an array"}
{"id": "_getCopyCArray", "Comment": "get copy of array"}
{"id": "_swap", "Comment": "swap number between the array"}
{"id": "bubbleSortCArray", "Comment": "bubble sort for sorting array"}
{"id": "_selectionSortCArray", "Comment": "selection sort for sorting array"}
{"id": "valueOcurranceCArray", "Comment": "Find all numbers occurances in an array"}
{"id": "_insertionSortCArray", "Comment": "insertion sort for sorting array"}
{"id": "_valuePositionsCArray", "Comment": "Find the positions of numbers in an array"}
{"id": "_findMaxCArray", "Comment": "Find the maximum number in an array"}
{"id": "_findMinCArray", "Comment": "Find the minimum number in an array"}
{"id": "_max", "Comment": "Find the maximum number in an avl tree"}
{"id": "_newNode", "Comment": "Add a new node in an avl tree"}
{"id": "_nodeHeight", "Comment": "Find the height of the node in an avl tree"}
{"id": "_heightDiff", "Comment": "Find the height difference in an avl tree"}
{"id": "_minNode", "Comment": "Returns the node with min key in the left subtree"}
{"id": "_rightRotate", "Comment": "Rotate right of an avl tree node"}
{"id": "_leftRotate", "Comment": "Rotate left of an avl tree node"}
{"id": "_printAVL", "Comment": "print the avl tree"}
{"id": "_LeftRightRotate", "Comment": "Rotate left right of an avl tree node"}
{"id": "_RightLeftRotate", "Comment": "Rotate right left of an avl tree node"}
{"id": "_insert", "Comment": "insert number in an avl tree node"}
{"id": "_delete:", "Comment": "delete a node in an avl tree"}
{"id": "_findNode", "Comment": "Find the node in an avl tree"}
{"id": "printPreOrder:", "Comment": "print pre order of an avl tree"}
{"id": "printInOrder", "Comment": "print inorder of an avl tree"}
{"id": "_printPostOrder", "Comment": "print post order of an avl tree"}
{"id": "_create_dict", "Comment": "create dict for list of arrays"}
{"id": "_get_hash", "Comment": "returns a hashcode for the given string"}
{"id": "_add_item_label", "Comment": "Add an item label in dictionary"}
{"id": "_add_item_index", "Comment": "Add an item index in dictionary"}
{"id": "_get_element_label", "Comment": "get element labelled in dictionary"}
{"id": "_get_element_index", "Comment": "get index of element in dictionary"}
{"id": "_destroy", "Comment": "destroy all element in dictionary"}
{"id": "_init_dynamic_array", "Comment": "initialize the dynamic array"}
{"id": "_get", "Comment": "get the index of dynamic array"}
{"id": "_delete", "Comment": "delete the specific index from dynamic array"}
{"id": "_contains", "Comment": "Find whether the index element is present in dynamic array or not"}
{"id": "_retrive_copy_of_value", "Comment": "retrive copy of value from the array"}
{"id": "_add", "Comment": "add the index of an element in a dynamic array"}
{"id": "_put", "Comment": "return the copy of the value"}
{"id": "_createGraph", "Comment": "Create graph"}
{"id": "_addEdge", "Comment": "Add an edge to a graph"}
{"id": "Vertex  Distance", "Comment": "Find the vertex distance of a graph"}
{"id": "minDistance", "Comment": "Find the minimum distance of a graph"}
{"id": "_bfs", "Comment": "perform breadth search first"}
{"id": "_createNode", "Comment": "Create node"}
{"id": "_createGrap", "Comment": "Create graph in bfs"}
{"id": "_BellmanFord:", "Comment": "BellmanFord algorithm"}
{"id": "_addEdges", "Comment": "Add an edge to a graph"}
{"id": "_createQueue", "Comment": "Create queue"}
{"id": "_dequeue", "Comment": "Removes an item from the queue"}
{"id": "_isEmpty", "Comment": "Find whether the queue is empty or not"}
{"id": "_enqueue", "Comment": "the element is added at the end of the queue"}
{"id": "_pollQueue", "Comment": "returns the element at the front of the container or the head of the Queue"}
{"id": "_createNodes", "Comment": "Create nodes"}
{"id": "_dfs:", "Comment": "perform depth search first"}
{"id": "_findPathBFS", "Comment": "find the path of bfs"}
{"id": "_createGraphnew", "Comment": "Create graph in dfs"}
{"id": "_findPathDFS", "Comment": "find the path for dfs"}
{"id": "_addEdgedfs", "Comment": "Add an edge to a graph in dfs"}
{"id": "_printGraph", "Comment": "print graph"}
{"id": "_dfsPathCheck", "Comment": "Check the path for dfs"}
{"id": "_createGraphbfs", "Comment": "Create graph for bfs"}
{"id": "_addEdgebfs", "Comment": "Add an edge to a graph in bfs"}
{"id": "_minDistance", "Comment": "Find the minimum distance"}
{"id": "_printver", "Comment": "Print the vertex distance"}
{"id": "_Dijkstra", "Comment": "_Dijkstra algorithm"}
{"id": "_deletion", "Comment": "Deletion procedure, which searches for the input key in the tree and removes it if present"}
{"id": "_getMax", "Comment": "procedure to find the greatest key in the left subtree"}
{"id": "_inserting", "Comment": "inserts the input key in a new node in the tree"}
{"id": "_newNodes", "Comment": "Insert node"}
{"id": "_find", "Comment": "looks for the input key in the tree and returns 1 if it's present or 0 if it's not in the tree"}
{"id": "_height", "Comment": "procedure to measure the height of the binary tree"}
{"id": "_purge", "Comment": "procedure to free all nodes in a tree"}
{"id": "_inOrder", "Comment": "Traversal procedure to list the current keys in the tree in order of value"}
{"id": "newNodei", "Comment": "create nodes"}
{"id": "_create_node", "Comment": "creates a new node"}
{"id": "_insert_bt", "Comment": "inserts a node into the tree"}
{"id": "_preorder_display", "Comment": "performs preorder traversal"}
{"id": "_search:", "Comment": " searches for the element"}
{"id": "_postorder_display", "Comment": "performs postorder traversal"}
{"id": "_inorder_display", "Comment": " performs inorder traversal"}
{"id": "_delete_bt", "Comment": "deletion of a node from the tree"}
{"id": "_endProgramAbruptly", "Comment": " Ends program due to an error"}
{"id": "_freeTreeMemory", "Comment": "Frees memory when program is terminating"}
{"id": "_getPointerToWord", "Comment": "Stores word in memory"}
{"id": "_closeFile", "Comment": "Closes the file after reading or writing"}
{"id": "allocateMemoryForNode", "Comment": "Reserves memory for new node"}
{"id": "_writeContentOfTreeToFile", "Comment": "Writes contents of tree to another file alphabetically"}
{"id": "_addWordToTree", "Comment": "Adds word to the correct position in tree"}
{"id": "_readWordsInFileToTree", "Comment": "Reads words from file to tree"}
{"id": "_test:", "Comment": "test a function"}
{"id": "_degree", "Comment": "Return the number of vertices that v is connected to"}
{"id": "_hasEulerPath", "Comment": "If start from vertex v decide if the graph has euler path"}
{"id": "_createGraphing", "Comment": "Constructs a graph with V vertices and E edges"}
{"id": "_addEdgeo", "Comment": "Adds the given edge to the graph"}
{"id": "_Warshall", "Comment": "finds the shortest path from a vertex to all other vertices using Floyd-Warshall Algorithm"}
{"id": "_printing", "Comment": "Utility function to print distances"}
{"id": "_newGraph", "Comment": "Create graph"}
{"id": "_validV", "Comment": "check if vertex is valid in a graph"}
{"id": "_insertEdge", "Comment": "insert edge in a graph"}
{"id": "_removeEdge", "Comment": "remove edge in a graph"}
{"id": "_adjacent:", "Comment": "Find if the edge is adjacent or not"}
{"id": "_showGraph", "Comment": "show the graph"}
{"id": "_hamiltonR", "Comment": "hamilton algorithm"}
{"id": "_freeGraph:", "Comment": "Frees memory"}
{"id": "_hasHamiltonianPath", "Comment": "Find hamilton has got any path or not"}
{"id": "_newQueue", "Comment": "set up empty queue"}
{"id": "_newQueues", "Comment": "set up empty queue"}
{"id": "_dropQueue", "Comment": "remove unwanted queue"}
{"id": "_QueueDequeue", "Comment": "remove int from front of queue"}
{"id": "_QueueIsEmpty", "Comment": "check whether queue is empty"}
{"id": "_QueueEnqueue", "Comment": "insert an int at end of queue"}
{"id": "_fillOrder", "Comment": "Creates a topological sorting of the graph"}
{"id": "_createNode_", "Comment": "Allocate memory for a node"}
{"id": "_dfs1", "Comment": "Recursive dfs aproach"}
{"id": "_transpose", "Comment": "transpose the adjacency list"}
{"id": "_scc", "Comment": "Strongly connected components"}
{"id": "_printGraphing", "Comment": "utility function to see state of graph at a given time"}
{"id": "_addEdge4", "Comment": "Creates a unidirectional graph"}
{"id": "_createGraph1", "Comment": "Allocate memory for the entire graph structure"}
{"id": "_createStack", "Comment": "Creates a stack"}
{"id": "_pop", "Comment": "Removes element from stack, or returns INT_MIN if stack empty"}
{"id": "_topologicalSortHelper", "Comment": "sort the topological approach"}
{"id": "_push", "Comment": "Pushes element into stack"}
{"id": "_topologicalSortHelpe", "Comment": "sort the topological approach"}
{"id": "_createNod", "Comment": "Allocate memory for a node"}
{"id": "_creatGraph", "Comment": "Allocate memory for the entire graph structure"}
{"id": "_addEdgee", "Comment": "Creates a unidirectional graph"}
{"id": "_printGraphy", "Comment": "Utility function to see state of graph at a given time"}
{"id": "_createStacks", "Comment": "Creates a stack"}
{"id": "_pushing", "Comment": "Pushes element into stack"}
{"id": "_poping", "Comment": "Removes element from stack, or returns INT_MIN if stack empty"}
{"id": "_digraph", "Comment": "Find a set of vertices and a collection of directed edges that each connects an ordered pair of vertices"}
{"id": "_init_hash_set", "Comment": "intialization of hash set"}
{"id": "_adding", "Comment": "Add the hash set values"}
{"id": "_puting", "Comment": "Put the value in hash set"}
{"id": "_containing", "Comment": "Find whether the hash set contains that value or not"}
{"id": "_contains_hash", "Comment": "Find whether the hash set contains that value or not"}
{"id": "_del", "Comment": "delete value from hash set"}
{"id": "_hash", "Comment": "create hash"}
{"id": "_retrieve_index_from_hash", "Comment": "retrieve index from hash set"}
{"id": "_resize", "Comment": "resize the hash set"}
{"id": "_create_heap", "Comment": "Creates a max_heap structure and returns a pointer to the struct"}
{"id": "_down_heapify", "Comment": "Pushes an element downwards in the heap to find its correct position"}
{"id": "_up_heapify", "Comment": "Pushes an element upwards in the heap to find its correct position"}
{"id": "_push_heap", "Comment": "Inserts an element in the heap"}
{"id": "_pop_heap", "Comment": "Removes the top element from the heap"}
{"id": "_top_heap", "Comment": "Returns the top element of the heap or returns INT_MIN if heap is empty"}
{"id": "_empty_heap", "Comment": "Checks if heap is empty"}
{"id": "_sizes", "Comment": "Returns the size of heap"}
{"id": "_createqueued", "Comment": "This function initializes the queue to empty by making both front and rear"}
{"id": "_emptied", "Comment": "empty the queue"}
{"id": "_inserted", "Comment": "insert value in the queue"}
{"id": "_removed", "Comment": "remove value from the queue"}
{"id": "_showqueue:", "Comment": "display data from queue"}
{"id": "_destroyqueue", "Comment": "destroy queue"}
{"id": "_created", "Comment": "a new list containing one node will be created"}
{"id": "_insertd", "Comment": "Insertion by position into the list function"}
{"id": "_deleteli", "Comment": "Deletion by position into the list function"}
{"id": "_searched", "Comment": "Search value into the list function"}
{"id": "_printli", "Comment": "Print list function"}
{"id": "_merge:", "Comment": "merge the two input linked lists"}
{"id": "_printlist", "Comment": "Print link list"}
{"id": "_printMiddle", "Comment": "Function to get the middle of the linked list"}
{"id": "_pushnode", "Comment": "put in the data  in the node"}
{"id": "_printLis", "Comment": "function to print a given linked list"}
{"id": "_createqueu", "Comment": "function initializes the queue to empty by making both front and rear"}
{"id": "_emptyi", "Comment": "empty the queue"}
{"id": "_rem", "Comment": "remove value from the queue"}
{"id": "_showoff:", "Comment": "display data from queue"}
{"id": "_destroyqueues", "Comment": "destroy queue"}
{"id": "_inse", "Comment": "Insertion by position into the list function"}
{"id": "_createnode2", "Comment": "function to create node"}
{"id": "_insertu:", "Comment": "function to insert at first location"}
{"id": "_deletions:", "Comment": "function to delete from first position"}
{"id": "_viewli", "Comment": "function to display values"}
{"id": "_pushb", "Comment": "push value into the stack"}
{"id": "_pushin", "Comment": "push value into the stack"}
{"id": "_popp", "Comment": "Pushes an element from stack"}
{"id": "_displayp", "Comment": "display element in stack"}
{"id": "_List_init", "Comment": "Initial list"}
{"id": "_List_push", "Comment": "Push an element into top of the list"}
{"id": "_List_length", "Comment": "Length of list"}
{"id": "_List_toArray", "Comment": "Convert list to array"}
{"id": "_List_append", "Comment": "Append 2 lists together"}
{"id": "_List_list", "Comment": "Create and return a list"}
{"id": "_createv", "Comment": "create a queue"}
{"id": "_enque", "Comment": "Puts an item into the Queue"}
{"id": "_deque", "Comment": "Takes the next item from the Queue"}
{"id": "_sizing", "Comment": "Returns the size of the Queue"}
{"id": "_grow", "Comment": "increases the stack by 10 elements"}
{"id": "_initStack", "Comment": "offset address points at the top element of the stack"}
{"id": "_pushst", "Comment": "pushs the argument onto the stack"}
{"id": "_popst", "Comment": "pops the top element of the stack from the stack"}
{"id": "_sizest", "Comment": "gets the number of elements of the stack"}
{"id": "_isEmptyst", "Comment": "returns 1 if stack is empty otherwise 0"}
{"id": "_topst", "Comment": "returns the top element from the stack without removing it"}
{"id": "_push0", "Comment": "function for pushing"}
{"id": "_pop0", "Comment": "function for pop"}
{"id": "_isBalanced", "Comment": "check balanced parenthesis or not"}
{"id": "_isBalanced3", "Comment": "check balanced parenthesis or not"}
{"id": "_destroyStackd", "Comment": "destroy Stack"}
{"id": "_push6", "Comment": "function for pushing the element"}
{"id": "_pop6:", "Comment": "function for poping the element out"}
{"id": "_peek4", "Comment": "function for peeping the element from top of the stack"}
{"id": "_updated", "Comment": "function to update the element of stack"}
{"id": "_pus:", "Comment": "function for pushing the element"}
{"id": "_pop5", "Comment": "function for poping the element out"}
{"id": "_peeking", "Comment": "function for peeping the element from top of the stack"}
{"id": "_updateh", "Comment": "function to update the element of stack"}
{"id": "_fprintf:", "Comment": "print"}
{"id": "_printf", "Comment": "print"}
{"id": "_trie_new", "Comment": "Create new trie node"}
{"id": "_trie_insert", "Comment": "Insert new word to trie"}
{"id": "trie_search", "Comment": "Search a word in the trie"}
{"id": "trie_print", "Comment": "print all the related words"}
{"id": "binary", "Comment": "binary to decimal"}
{"id": "binary1", "Comment": "Convert Binary to Hexadecimal"}
{"id": "binary2", "Comment": "Binary number to octal number conversion"}
{"id": "atoi", "Comment": "Recording the original atoi function in stdlib.h"}
{"id": "deci", "Comment": "Decimal to Hexadecimal conversion"}
{"id": "recur", "Comment": "Convert decimal to binary using recursion algorithm"}
{"id": "binn", "Comment": "decimal to binary"}
{"id": "decimal", "Comment": "Decimal to octal conversion"}
{"id": "_converted_len", "Comment": "Calculate the final length of the converted number"}
{"id": "isbad_alphabet", "Comment": "Checking if alphabet is valid"}
{"id": "_convertion", "Comment": "Convert positive decimal integer into anybase recursively"}
{"id": "_decimal_to_octal", "Comment": "convert decimal number to octal using Reccursion"}
{"id": "_decimal_to_anybase", "Comment": "decimal to anybase ensure the validity of the parameters"}
{"id": "hexa1", "Comment": "convert Hexadecimal to Octal number system with decimal intermediary"}
{"id": "hexa", "Comment": "convert Hexadecimal to Octal number system"}
{"id": "_getPrecedence", "Comment": "returns the precedence after comparing two operators passed as parameter"}
{"id": "pu", "Comment": "push the element"}
{"id": "po", "Comment": "pop the element"}
{"id": "_isOprnd", "Comment": " check if ch is an operator or operand using ASCII values"}
{"id": "emptyu", "Comment": "check if stack is empty"}
{"id": "_convert", "Comment": "convert the char"}
{"id": "_priority", "Comment": " Function to check priority of operators"}
{"id": "_toDecimal", "Comment": "Converts octal number to decimal"}
{"id": "_int_to_string", "Comment": "Convert a positive integer to string"}
{"id": "_octalToBinary", "Comment": "Octal to binay conversion by scanning user input"}
{"id": "_octalToDecimal", "Comment": "Octal to decimal conversion"}
{"id": "ba", "Comment": "convert from any base to decimal"}
{"id": "_octalTodecimal", "Comment": "covert octal to decimal"}
{"id": "_convertt", "Comment": "Function to convert infix expression to postfix expression"}
{"id": "_convertValue", "Comment": "Convert the value"}
{"id": "_abbreviate", "Comment": "abbreviate using acroynm"}
{"id": "_Hello", "Comment": "Print hello"}
{"id": "__is_isogram", "Comment": "returns true if the given string a isogram, otherwise false"}
{"id": "_to_rna", "Comment": "convert to rna transcription"}
{"id": "_validatePosition", "Comment": "Responsible for checking if the position can receive the boat"}
{"id": "_canShoot", "Comment": "Responsible to verify that it is a valid position to shoot"}
{"id": "_printMessage", "Comment": "Responsible for printing the auxiliary message"}
{"id": "quat_from_eulerPK6euler_", "Comment": "in_euler input Euler angles instance"}
{"id": "_euler_from_quat", "Comment": "in_quat input quaternion instance"}
{"id": "quaternion_multiply", "Comment": "in_quat1 first input quaternion instance"}
{"id": "_printMessageScore:", "Comment": "print the score"}
{"id": "_printsTray", "Comment": "Responsible for printing the visual board for the user"}
{"id": "_shoot:", "Comment": "Responsible for saying if he hit a boat"}
{"id": "singlemodev:", "Comment": "Implementation of game vs computer"}
{"id": "check_place", "Comment": "check the place"}
{"id": "_doublemode", "Comment": "Implementation of game vs another player"}
{"id": "placexi:", "Comment": "Update table by placing an `X`"}
{"id": "__ZL5placev", "Comment": "Update table by placing an `O`"}
{"id": "_placey", "Comment": "Update table by placing an `O`"}
{"id": "_checkwin", "Comment": "Implementation of win conditon checker for 'X' or 'O' whenever the table is updated"}
{"id": "_quat_from_euler:", "Comment": "in_euler input Euler angles instance"}
{"id": "_euler_from_quat", "Comment": "in_quat input quaternion instance"}
{"id": "_quaternion_multiply", "Comment": "in_quat1 first input quaternion instance"}
{"id": "_vector_sub", "Comment": "Subtract one vector from another"}
{"id": "vector_add", "Comment": "Add one vector to another"}
{"id": "_dot_prod:", "Comment": "Obtain the dot product of two 3D vectors"}
{"id": "_vector_prod", "Comment": " resultant vector"}
{"id": "print_vector", "Comment": "Print formatted vector on stdout"}
{"id": "_vector_norm", "Comment": "Compute the norm a vector"}
{"id": "_unit_vec", "Comment": "Obtain unit vector in the same direction as given vector"}
{"id": "_get_cross_matrix", "Comment": "cross product of vectors represented as a matrix"}
{"id": "_get_angle", "Comment": "Obtain the angle between two given vectors"}
{"id": "__spirograph", "Comment": "Generate spirograph curve into arrays `x` and `y`"}
{"id": "_mat", "Comment": "put the item into queue"}
{"id": "_cf", "Comment": "subtraction"}
{"id": "_de", "Comment": "Takes the next item from the Queue"}
{"id": "_queue_has_something:", "Comment": "returns if queue has something"}
{"id": "_dijkstra:", "Comment": "Perform dijkstra algorithm"}
{"id": "_minimum", "Comment": "Finds index of minimum element in edge list for an arbitrary vertex"}
{"id": "_user_graph", "Comment": "gets user input adj. matrix and finds MST of that graph"}
{"id": "_prim", "Comment": "Used to find MST of user-generated adj matrix G"}
{"id": "_adler32:", "Comment": "32-bit Adler algorithm implementation"}
{"id": "_crc32", "Comment": "32-bit CRC algorithm implementation"}
{"id": "_djb2", "Comment": "DJB2 algorithm implementation"}
{"id": "_sdbm", "Comment": "SDBM algorithm implementation"}
{"id": "_xor8", "Comment": "8-bit XOR algorithm implementation"}
{"id": "_twoSum", "Comment": "Find the sum of two values"}
{"id": "_findMedianSortedArrays", "Comment": "Find the median sorted array"}
{"id": "_reverseq", "Comment": "reverse"}
{"id": "_myAtoi", "Comment": "atoi function"}
{"id": "_min", "Comment": "Two pointer approach to find min container area"}
{"id": "_removeDuplicates", "Comment": "remove duplicates"}
{"id": "_removeElement", "Comment": "remove element"}
{"id": "_countAndSay", "Comment": "Calculating the length of array"}
{"id": "_maxcmp", "Comment": "compare max SubArray"}
{"id": "_plusOne", "Comment": "Add one plus"}
{"id": "_new_adaline", "Comment": "new adaline model"}
{"id": "_delete_adaline", "Comment": "delete dynamically allocated memory"}
{"id": "_adaline_activation", "Comment": "activation function input"}
{"id": "_adaline_get_weights", "Comment": "Operator to print the weights of the model"}
{"id": "_adaline_predict", "Comment": "predict the output of the model for given set of features"}
{"id": "_adaline_fit_sample", "Comment": "Update the weights of the model using supervised learning for one feature"}
{"id": "_adaline_fit", "Comment": "Update the weights of the model using supervised learning for an array of vectors"}
{"id": "_calculateCentroid", "Comment": "Calculate centoid and assign it to the cluster variable"}
{"id": "_kMeans", "Comment": "an array of observations to cluster"}
{"id": "_printEPS", "Comment": "print observations array"}
{"id": "_kohonen_data_3d", "Comment": "returns the pointer to (x, y, z) ^th location in the linear 3D array"}
{"id": "__random:", "Comment": "generate a random number in a given interval"}
{"id": "_save_2d_data", "Comment": "Save a given n-dimensional data martix to file"}
{"id": "_save_u_matrix", "Comment": " Create the distance matrix or save to disk"}
{"id": "_get_min_2d", "Comment": "Get minimum value and index of the value in a matrix"}
{"id": "_kohonen_som", "Comment": "Apply incremental algorithm with updating neighborhood and learning rates on all samples in the given datset"}
{"id": "_kohonen_update_weights", "Comment": "Update weights of the SOM using Kohonen algorithm"}
{"id": "_get_clock_diff", "Comment": "Convert clock cycle difference to time in seconds"}
{"id": "_random4", "Comment": "generate a random number in a given interval"}
{"id": "_save_nd_data:", "Comment": "Save a given n-dimensional data martix to file"}
{"id": "_kohonen_get_min_1d", "Comment": "Get minimum value and index of the value in a vector"}
{"id": "_kohonen_update_weights", "Comment": "Update weights of the SOM using Kohonen algorithm"}
{"id": "_kohonen_som_tracer", "Comment": " Apply incremental algorithm with updating neighborhood and learning rates on all samples in the given datset."}
{"id": "_test_circle", "Comment": "Creates a random set of points distributed *near* the circumference of a circle and trains an SOM that finds that circular pattern"}
{"id": "_power", "Comment": "calculate x raised to the power y"}
{"id": "_order", "Comment": "calculate order of the number"}
{"id": "_isArmstrong", "Comment": "check whether the given number is Armstrong number or not"}
{"id": "_propagate", "Comment": "dynamically allocates memory when creating new sets"}
{"id": "_printb", "Comment": "Print sets in the current range to `stdout`"}
{"id": "_free_memory", "Comment": "Clear memory allocated"}
{"id": "_to_polar:", "Comment": "convert cartesian coordinates to polar"}
{"id": "_get_rand", "Comment": "Generate a random number in the given limits"}
{"id": "_main:", "Comment": "Main function"}
{"id": "_ways", "Comment": "Number of coin"}
{"id": "fac", "Comment": "Find Factorial Of Given Number"}
{"id": "_new_number", "Comment": "create a new large number"}
{"id": "_delete_number", "Comment": "delete all memory allocated for large number"}
{"id": "_add_digit", "Comment": "add a digit to the large number"}
{"id": "_multiplyr", "Comment": "multiply large number with another integer and store the result in the same large number"}
{"id": "_fib", "Comment": "Fibonnacci function"}
{"id": "t_fib", "Comment": "Fibonacci Series using Dynamic Programming"}
{"id": "fib", "Comment": "Fibonacci number using recursive"}
{"id": "GCD", "Comment": "Euclid's algorithm"}
{"id": "_gcd", "Comment": "Recursive function to return gcd of a and b"}
{"id": "_lcm:", "Comment": "Least Common Multiple"}
{"id": "_lerp5", "Comment": "lerp"}
{"id": "_lerp_precise", "Comment": "lerp precise"}
{"id": "_swap1", "Comment": "swap between numbers"}
{"id": "_compared", "Comment": "compare between numbers"}
{"id": "_PrintSortedPermutations", "Comment": "Print the Sorted permutations"}
{"id": "_longestSub", "Comment": "Find longest Sub Sequence length"}
{"id": "_saisie", "Comment": "used to put a string"}
{"id": "_miroir", "Comment": "permute the first character with the last using an auxilary variable"}
{"id": "_miroir1", "Comment": "permute the first character with the last using an auxilary variable"}
{"id": "_isPalindro", "Comment": "Check given number whether is palindrome number or not"}
{"id": "_pid_step", "Comment": "pid_step algorithm"}
{"id": "_free_pol", "Comment": "Frees memory space"}
{"id": "_create_polynomial", "Comment": "create a polynomial"}
{"id": "_poly_add", "Comment": "function will add 2 polynomials"}
{"id": "_display_poly", "Comment": "display the polynomial"}
{"id": "_pushp", "Comment": "push on the stack"}
{"id": "_poppp", "Comment": "pop from the stack"}
{"id": "_evaluate1", "Comment": "evaluate postfix expression"}
{"id": "_isPrime", "Comment": "Check if a given number is prime number or not"}
{"id": "_int_fact", "Comment": "calculates the prime factoriziation of positive integers"}
{"id": "_print_arr", "Comment": " prints the integer heap array"}
{"id": "t_increase", "Comment": " increases the dynamic integer array"}
{"id": "t_destro", "Comment": "destroys the range-structure"}
{"id": "_MAX_SIZE:", "Comment": " Prime Sieve"}
{"id": "_count1", "Comment": "counts the number of prime numbers"}
{"id": "_swapa", "Comment": "swap between numbers"}
{"id": "_part", "Comment": "Find the part of index"}
{"id": "_rselect", "Comment": "rselect"}
{"id": "_isStrong", "Comment": "Check if given number is strong number or not"}
{"id": "_OKrow", "Comment": "Check if `x`^th row is valid"}
{"id": "_OKcol", "Comment": "Check if `y`^th column is valid"}
{"id": "_OKbox", "Comment": "Check if a 3x3 box is valid"}
{"id": "_OK", "Comment": "Check if element `v` is valid to place at (x,y) location"}
{"id": "_pri", "Comment": "Print the matrix to stdout"}
{"id": "_get_next_unknown", "Comment": "Find and get the location for next empty cell"}
{"id": "_solve", "Comment": "sudoku matrix to solve"}
{"id": "_hanoi", "Comment": "Tower of Hanoi algorithm"}
{"id": "_findz", "Comment": "Find index of or value in an array"}
{"id": "_join", "Comment": "Function to join"}
{"id": "n_display:", "Comment": "display the array"}
{"id": "_interchange", "Comment": "_interchange the array"}
{"id": "_eliminate", "Comment": "eliminate the array"}
{"id": "_lu_decomposition", "Comment": "Perform LU decomposition on matrix"}
{"id": "_D", "Comment": "Function to display square matrix"}
{"id": "_func", "Comment": "Return value of the function to find the root"}
{"id": "d_func", "Comment": "Return first order derivative of the function"}
{"id": "_problem", "Comment": "Problem statement for a system with first-order differential"}
{"id": "_exact_solution", "Comment": "Exact solution of the problem used for solution comparison."}
{"id": "_forward_euler_step", "Comment": "Compute next step approximation using the forward-Euler"}
{"id": "forward_euler", "Comment": "Compute approximation using the forward-Euler"}
{"id": "_problemm", "Comment": "Problem statement for a system with first-order differential"}
{"id": "_exact_solution", "Comment": "Exact solution of the problem used for solution comparison"}
{"id": "_midpoint_euler_step", "Comment": "Compute next step approximation using the midpoint-Euler"}
{"id": "midpoint_euler", "Comment": "Compute approximation using the midpoint-Euler"}
{"id": "_problem1", "Comment": "Problem statement for a system with first-order differential"}
{"id": "_exact_solution1", "Comment": "Exact solution of the problem. Used for solution comparison"}
{"id": "_semi_implicit_euler_step", "Comment": "Compute next step approximation using the semi-implicit-Euler method"}
{"id": "semi_implicit_euler", "Comment": "Compute approximation using the semi-implicit-Euler method in the given limits"}
{"id": "_print_matrix1", "Comment": "function to display matrix on stdout"}
{"id": "_vec_dot", "Comment": "Compute dot product of two vectors of equal lengths"}
{"id": "_vector_mag", "Comment": "Compute magnitude of vector"}
{"id": "_vector_proj:", "Comment": "Compute projection of vector"}
{"id": "t_vector_sub", "Comment": "Compute vector subtraction"}
{"id": "_qr_decompose", "Comment": "decompose matrix "}
{"id": "t_create_matrix", "Comment": "create a square matrix of given size with random elements"}
{"id": "_mat_mul", "Comment": "Perform multiplication of two matrices"}
{"id": "_eigen_values:", "Comment": "Compute eigen values using iterative shifted QR decomposition algorithm"}
{"id": "_stats_computer1", "Comment": "continuous mean and variance computance"}
{"id": "_stats_computer2", "Comment": "continuous mean and variance computance using Welford's algorithm"}
{"id": "_sum_of_primes", "Comment": "Computes sum of prime numbers less than N "}
{"id": "_f", "Comment": "compute float"}
{"id": "_is_primee", "Comment": "check if a number is prime"}
{"id": "_count_divisors", "Comment": "Get number of divisors of a given number"}
{"id": "_get_number", "Comment": "read the number from a file and store it in array"}
{"id": "_add_numbers", "Comment": "add arbitrary length decimal integers stored in an array"}
{"id": "_print_num", "Comment": "print a long number"}
{"id": "t_collatz", "Comment": "Computes the length of collatz sequence for a given starting number"}
{"id": "_number_of_paths", "Comment": "binomial coeeficient"}
{"id": "_get_month_days", "Comment": "Find the number of days in a month"}
{"id": "_is_leap_year", "Comment": "Check if input year is a leap year"}
{"id": "_add_digit", "Comment": "Function that allocates memory to add another"}
{"id": "_remove_digits", "Comment": "Function to remove digits preceeding the current digit"}
{"id": "_sum_of_divisors", "Comment": "return the sum of proper divisors of N"}
{"id": "_shell_sort", "Comment": "alphabetical sorting using shell sort algorithm"}
{"id": "_get_perfect_number", "Comment": "Find the perfect number"}
{"id": "_lazy_sort", "Comment": "Alphabetical sorting using lazy sort algorithm"}
{"id": "_is_abundant", "Comment": "Find the given number an abundant number or not"}
{"id": "_get_next_abundant", "Comment": "the next abundant number after N and not including N"}
{"id": "_is_sum_of_abundant", "Comment": "check if a given number can be represented as a sum of two abundant numbers"}
{"id": "_abundant_flags", "Comment": " global array to be used to store a flag to identify"}
{"id": "_is_abundant1", "Comment": "Find the given number an abundant number or not"}
{"id": "_get_next_abundant1", "Comment": "the next abundant number after N and not including N"}
{"id": "_is_sum_of_abundant1", "Comment": "check if a given number can be represented as a sum"}
{"id": "_add_numbers1", "Comment": "add numbers"}
{"id": "_print_numb", "Comment": "print numbers"}
{"id": "_get_digit", "Comment": "get digits"}
{"id": "_isprime3", "Comment": "Check if the given number is prime"}
{"id": "_is_palindromic1", "Comment": "check is palindromic or not"}
{"id": "_is_in", "Comment": "Check if a number is present in given array"}
{"id": "_qort", "Comment": "comparison function for use with internal `qsort` algorithm"}
{"id": "_get_divisors1", "Comment": "Get all integer divisors of a number"}
{"id": "_sigma2", "Comment": "compute sum of squares of all integer factors of a number"}
{"id": "_sigma;", "Comment": "sum of squares of factors of numbers"}
{"id": "_check_number", "Comment": "Just checks every number if it's divisable by 1 through 20"}
{"id": "_divisors:", "Comment": "Hack to store divisors between 1 & 20"}
{"id": "_gcd4", "Comment": "Greatest Common Divisor"}
{"id": "_lcm4", "Comment": "Least Common Multiple"}
{"id": "_get_product", "Comment": "Compute the product of two numbers in a file"}
{"id": "t_binarysearch1", "Comment": "Recursive to perform binary search"}
{"id": "t_binarysearch2", "Comment": "Iterative implementation to perform binary search"}
{"id": "_exponential_search", "Comment": "algorithm that search the index of the given item exponentially"}
{"id": "_binary_searchr", "Comment": "recursive function that search the given element in the array using the binary Search]"}
{"id": "_fibMonaccianSearch", "Comment": "Find the fibonacci"}
{"id": "_duplicateNumber", "Comment": "find duplicate in an array "}
{"id": "_interpolationSearch", "Comment": "interpolation sequential search"}
{"id": "_jump_searchq", "Comment": "Jump-search algorithm"}
{"id": "_linearsearch", "Comment": "linearly search the array"}
{"id": "_binarySearch5", "Comment": "This function does Binary search for `x` in `i`-th row from `j_low` to `j_high"}
{"id": "_modifiedBinarySearch", "Comment": "perform binary search on the mid values of row to get the desired pair of rows where the element can be found"}
{"id": "_binarySearch6", "Comment": "perform binary search"}
{"id": "_sentinel_linear_search", "Comment": "use a special value as the boundary key of the array"}
{"id": "_ternarySearch", "Comment": "Function to perform Ternary Search"}
{"id": "_display9", "Comment": "displays the array"}
{"id": "_bead_sort", "Comment": "bead sorting of the array"}
{"id": "_binarySearch10", "Comment": "perform binary search"}
{"id": "_display10", "Comment": "displays the array"}
{"id": "t_insertionSort", "Comment": "insertion sorting of the array"}
{"id": "_check_sorted", "Comment": "check the numbers are sorted or not"}
{"id": "_shuffle1", "Comment": "shuffle the numbers"}
{"id": "_sort3", "Comment": "perform sorting"}
{"id": "_display0", "Comment": "displays the array"}
{"id": "_swap0", "Comment": "Swap two values by using pointer"}
{"id": "_bubbleSort1", "Comment": "bubble sort algorithm implementation"}
{"id": "_bubble_sort3", "Comment": "bubble sort algorithm implementation"}
{"id": "_swap11", "Comment": "Swapped two numbers using pointer"}
{"id": "_bubbleSort0", "Comment": "bubble sort algorithm implementation"}
{"id": "_BucketSort", "Comment": "perform Bucket Sort"}
{"id": "_InsertionSort3", "Comment": "perform Insertion Sort"}
{"id": "_getBucketIndex", "Comment": "Find the index of Insertion Sort"}
{"id": "_print0", "Comment": "print an array"}
{"id": "_printBuckets", "Comment": "print bucket"}
{"id": "_cocktailSort", "Comment": "perform cocktail Sort"}
{"id": "_sort11", "Comment": "sort the array"}
{"id": "_displayq", "Comment": "display the array"}
{"id": "_display13", "Comment": "display the array"}
{"id": "swap14", "Comment": "Swap function to swap two values"}
{"id": "_cycleSort", "Comment": "Function sort the array using Cycle sort"}
{"id": "t_sort", "Comment": "sort the array"}
{"id": "t_display", "Comment": "display the array"}
{"id": "_max_heapify1", "Comment": " arranging the nodes in correct order to follow max-heap property"}
{"id": "t_heapsort", "Comment": "perform heap sort"}
{"id": "_build_maxheap1", "Comment": "build maxheap"}
{"id": "_swapa", "Comment": "Swap function to swap two values"}
{"id": "_heapifyDown", "Comment": "perform heapify down"}
{"id": "_heapifyUp", "Comment": "perform heapify Up"}
{"id": "_heapSort3", "Comment": "perform heap Sort"}
{"id": "_insertionSorte", "Comment": "perform Insertion Sort"}
{"id": "_RecursionInsertionSort", "Comment": "perform Insertion Sort using recursion"}
{"id": "_swapz", "Comment": "Swap function to swap two values"}
{"id": "_merge1", "Comment": "Perform merge of segments"}
{"id": "_merge_sort1", "Comment": "perform merge sort"}
{"id": "_mergesorte", "Comment": "perform merge sort"}
{"id": "_show0:", "Comment": "function to show each pass"}
{"id": "_vecswap", "Comment": "Swap function to swap two values"}
{"id": "_ssort1", "Comment": "perform sort"}
{"id": "_ssort1main", "Comment": "Faster Version of Multikey Quicksort"}
{"id": "_nearsearch", "Comment": "perform near search"}
{"id": "_vecswap2", "Comment": "Swap function to swap two values"}
{"id": "_med3func", "Comment": "perform sort"}
{"id": "_inssort", "Comment": "perform sort"}
{"id": "_ssort2", "Comment": "perform sort"}
{"id": "_ssort2main", "Comment": "perform Quicksort"}
{"id": "_insert1", "Comment": "Insertion Algorithm"}
{"id": "_cleanup1", "Comment": "clean the memory"}
{"id": "_buffer", "Comment": "_buffer function"}
{"id": "_cleanup2", "Comment": "clean the memory"}
{"id": "t_search1", "Comment": "search algorithm"}
{"id": "_pmsearch", "Comment": "advanced searching"}
{"id": "_search21", "Comment": "search algorithm"}
{"id": "_swappy", "Comment": "Swap function to swap two values"}
{"id": "_oddEvenSort", "Comment": "oddEvenSort sorts the array"}
{"id": "_flip", "Comment": " Reverses the array"}
{"id": "_findMax", "Comment": "Returns index of the maximum element in array"}
{"id": "_pancakeSort", "Comment": "Sorts the array using flip operations"}
{"id": "_swapd", "Comment": "Swap function to swap two values"}
{"id": "_partition", "Comment": "create partition between array"}
{"id": "_partitionSort", "Comment": "partition Sort algorithm"}
{"id": "_printArray", "Comment": "print array"}
{"id": "_pigeonholeSort", "Comment": "_pigeon hole Sort"}
{"id": "_display14", "Comment": "display the array"}
{"id": "_swapw", "Comment": "Swap function to swap two values"}
{"id": "_partition1", "Comment": "create partition between array"}
{"id": "_quickSort", "Comment": "quick Sort"}
{"id": "_largest", "Comment": "Find the largest value"}
{"id": "_RadixSort:", "Comment": "perform radix Sort"}
{"id": "_MAX1:", "Comment": "function to get the maximum value in array"}
{"id": "_countSort", "Comment": "Counting sort according to the digit represented by place"}
{"id": "_radixsort2", "Comment": "perform radix Sort"}
{"id": "_getBig", "Comment": "storing index of element greater than pivot"}
{"id": "_swapt", "Comment": "Swap function to swap two values"}
{"id": "_getSmall", "Comment": "storing index of element smaller than pivot"}
{"id": "_swaptt", "Comment": "Swap function to swap two values"}
{"id": "_random_quick", "Comment": "perform random quick sort"}
{"id": "_selectionSort", "Comment": "perform selection Sort"}
{"id": "_swapi", "Comment": "Swap function to swap two values"}
{"id": "_findIndex", "Comment": "Returns the index having minimum value using recursion"}
{"id": "_selectionSort3", "Comment": "Selection Sort algorithm implemented using recursion"}
{"id": "_swapf", "Comment": "Swap function to swap two values"}
{"id": "_shakersort", "Comment": "perform shaker sort"}
{"id": "_notation", "Comment": "show notation"}
{"id": "_shellSort", "Comment": "perform shell Sort"}
{"id": "_show_data", "Comment": "Helper function to print array values"}
{"id": "_shell_sort3", "Comment": "perform shell Sort"}
{"id": 59 ,"Comment": "add Two Numbers"}
{"id": 45 ,"Comment": "ZigZag Conversion"}
{"id": 98 ,"Comment": "Reverse Integer"}
{"id": 71,"Comment": "check multiply"}
{"id": 39 ,"Comment": "detect overflow"}
{"id": 63 ,"Comment": "check add"}
{"id": 92 ,"Comment": "String to Integer atoi"}
{"id": 120 ,"Comment": "check Palindrome Number"}
{"id": 65 ,"Comment": "Integer to Roman"}
{"id": 12 ,"Comment": "Roman to Integer"}
{"id": 5 ,"Comment": "Longest Palindromic Substring"}
{"id": 60 ,"Comment": "print heap"}
{"id": 55 ,"Comment": "remove Nth From the End"}
{"id": 43 ,"Comment": "check is valid or not"}
{"id": 19 ,"Comment": "print stack"}
{"id": 89 ,"Comment": "pop from stack"}
{"id": 118,"Comment": "push from stack"}
{"id": 64 ,"Comment": "merge two lists"}
{"id": 13 ,"Comment": "apply heapify"}
{"id": 3 ,"Comment": "shift up"}
{"id": 116 ,"Comment": "perform reheap"}
{"id": 83 ,"Comment": "merge the K number of Lists"}
{"id": 8 ,"Comment": "generate List"}
{"id": 60 ,"Comment": "print heap"}
{"id": 41 ,"Comment": "create node"}
{"id": 79 ,"Comment": "compare between values"}
{"id": 121 ,"Comment": "swap between pairs of numbers"}
{"id": 78,"Comment": "merge two lists"}
{"id": 4 ,"Comment": "merge K Lists"}
{"id": 87 ,"Comment": "remove element"}
{"id": 57 ,"Comment": "remove duplicates"}
{"id": 113 ,"Comment": "search the  numbers"}
{"id": 126 ,"Comment": "Implement strStr()"}
{"id": 130 ,"Comment": "get next element"}
{"id": 31 ,"Comment": "convert strStr"}
{"id": 52 ,"Comment": "Next Permutation"}
{"id": 56 ,"Comment": "check if is Valid Sudoku or not"}
{"id": 72 ,"Comment": "search where to insert"}
{"id": 104 ,"Comment": "check if is Valid Sudoku or not"}
{"id": 84 ,"Comment": "count and Say"}
{"id": 49 ,"Comment": "multiply Strings"}
{"id": 62 ,"Comment": "find first Missing Positive"}
{"id": 99 ,"Comment": "rotate image"}
{"id": 40 ,"Comment": "permuate"}
{"id": 24 ,"Comment": "Wildcard Matching"}
{"id": 70 ,"Comment": "Permutations"}
{"id": 76 ,"Comment": "check is matched or not"}
{"id": 17 ,"Comment": "Permutations"}
{"id": 107 ,"Comment": "check if is Valid or not"}
{"id": 101,"Comment": "find Pow(x, n)"}
{"id": 129 ,"Comment": "find max SubArray"}
{"id": 10 ,"Comment": "place Queens"}
{"id": 128 ,"Comment": "find total N number of Queens"}
{"id": 14 ,"Comment": "generate matrix"}
{"id": 90 ,"Comment": "can jump or not"}
{"id": 20 ,"Comment": "can jump or not"}
{"id": 29 ,"Comment": "can jump or not"}
{"id": 108 ,"Comment": "Spiral Matrix"}
{"id": 23 ,"Comment": "find the length of Last Word"}
{"id": 22 ,"Comment": "Plus One"}
{"id": 88 ,"Comment": "find the unique Paths With Obstacles"}
{"id": 123 ,"Comment": "find unique paths"}
{"id": 34 ,"Comment": "rotate right"}
{"id": 105 ,"Comment": "find minPath Sum"}
{"id": 103 ,"Comment": "find is Valid Number or not"}
{"id": 114 ,"Comment": "find minimum"}
{"id": 30 ,"Comment": "find Square root"}
{"id": 44 ,"Comment": "find Square root"}
{"id": 37 ,"Comment": "find Square root"}
{"id": 9 ,"Comment": "add Binary"}
{"id": 109 ,"Comment": "Climbing Stairs"}
{"id": 106 ,"Comment": "get min distance"}
{"id": 50 ,"Comment": "set number to Zeroes"}
{"id": 82,"Comment": "set number to Zeroes"}
{"id": 122 ,"Comment": "sort Colors"}
{"id": 21 ,"Comment": "sort Colors"}
{"id": 58 ,"Comment": "search the matrix"}
{"id": 54 ,"Comment": "delete Duplicates"}
{"id": 91 ,"Comment": "apply depth first search"}
{"id": 85 ,"Comment": "check does exists or not"}
{"id": 111 ,"Comment": "remove duplicates"}
{"id": 68 ,"Comment": "bulid lists"}
{"id": 18 ,"Comment": "perform search"}
{"id": 32 ,"Comment": "find number of trees"}
{"id": 86 ,"Comment": "delete Duplicates"}
{"id": 15 ,"Comment": "gray code"}
{"id": 100 ,"Comment": "perform merge"}
{"id": 75 ,"Comment": "apply partition"}
{"id": 53 ,"Comment": "Decode numbers"}
{"id": 38 ,"Comment": "reverse numbers"}
{"id": 33 ,"Comment": "print Tree in PreOrder"}
{"id": 73 ,"Comment": "find isSame Tree or not"}
{"id": 102 ,"Comment": "find minimum value"}
{"id": 112 ,"Comment": "print Tree in PreOrder"}
{"id": 6 ,"Comment": "find is Valid BST or not"}
{"id": 25 ,"Comment": "find maximum value"}
{"id": 119 ,"Comment": "build Tree"}
{"id": 81 ,"Comment": "level Order"}
{"id": 2 ,"Comment": "find is Symmetric or not"}
{"id": 97 ,"Comment": "print Tree in PreOrder"}
{"id": 61 ,"Comment": "find maximum depth"}
{"id": 95 ,"Comment": "find is Symmetric or not"}
{"id": 0 ,"Comment": "print Tree in PreOrder"}
{"id": 69 ,"Comment": "print Tree in PreOrder"}
{"id": 125 ,"Comment": "print Tree in PreOrder"}
{"id": 47 ,"Comment": "search node"}
{"id": 26 ,"Comment": "search node"}
{"id": 96 ,"Comment": "print postOrder"}
{"id": 48 ,"Comment": "build Tree"}
{"id": 127 ,"Comment": "print Tree Level Order"}
{"id": 1 ,"Comment": "sorted the array to BST"}
{"id": 28 ,"Comment": "find distinct number"}
{"id": 77 ,"Comment": "find is balanced or not"}
{"id": 94 ,"Comment": "find maximum depth"}
{"id": 124 ,"Comment": "print Tree in PreOrder"}
{"id": 16 ,"Comment": "perform flatten"}
{"id": 93 ,"Comment": "find minimum depth"}
{"id": 11 ,"Comment": "flatten helper"}
{"id": 27 ,"Comment": "find if Sum has Path"}
{"id": 42 ,"Comment": "print Tree in PreOrder"}
{"id": 67 ,"Comment": "print trie"}
{"id": 117 ,"Comment": "make connection"}
{"id": 35 ,"Comment": "find minimum total"}
{"id": 115 ,"Comment": "Pascal's Triangle"}
{"id": 36 ,"Comment": "get Row"}
{"id": 110 ,"Comment": "connect helper"}
{"id": 131 ,"Comment": "perform twoSum quick sort"}
{"id": 132 ,"Comment": "two Sum"}
{"id": 133 ,"Comment": "perform hash"}
{"id": 134 ,"Comment": "compare two numbers"}
{"id": 135 ,"Comment": "perform shell sort"}
{"id": 120 ,"Comment": "check is Palindrome or not"}
{"id": 136 ,"Comment": "convert To Title"}
{"id": 137 ,"Comment": "move Zeroes"}
{"id": 138 ,"Comment": "move Zeroes"}
{"id": 139 ,"Comment": "swap between numbers"}
{"id": 140 ,"Comment": "find h Index"}
{"id": 141 ,"Comment": "move Zeroes"}
{"id": 142 ,"Comment": "find majority element"}
{"id": 143 ,"Comment": "find h Index"}
{"id": 144 ,"Comment": "find number of Circle"}
{"id": 145 ,"Comment": "find minimum SubArray Length"}
{"id": 146 ,"Comment": "count the nodes"}
{"id": 147 ,"Comment": "find maximum product"}
{"id": 148 ,"Comment": "find single number"}
{"id": 149 ,"Comment": "find is Bad Version or not"}
{"id": 150 ,"Comment": "find first Bad Version"}
{"id": 151 ,"Comment": "Depth first search"}
{"id": 152 ,"Comment": "insert the value"}
{"id": 153 ,"Comment": "free the trie"}
{"id": 154 ,"Comment": "create the trie"}
{"id": 155 ,"Comment": "find maximum Profit"}
{"id": 156 ,"Comment": "create minimum Stack"}
{"id": 157 ,"Comment": "minimum Stack Push"}
{"id": 158 ,"Comment": "find Words"}
{"id": 159 ,"Comment": "find longest Consecutive Words"}
{"id": 160 ,"Comment": "calculate"}
{"id": 161 ,"Comment": "find minimum Stack Top"}
{"id": 162 ,"Comment": "make minimum Stack Destroy"}
{"id": 163 ,"Comment": "get minimum Stack"}
{"id": 164 ,"Comment": "make minimum Stack Pop"}
{"id": 165 ,"Comment": "find kth Smallest"}
{"id": 166 ,"Comment": "find kth Smallest"}
{"id": 167 ,"Comment": "merge"}
{"id": 168 ,"Comment": "create a sort List"}
{"id": 169 ,"Comment": "find Minimum"}
{"id": 170 ,"Comment": "get the Count"}
{"id": 171 ,"Comment": "find helper"}
{"id": 172 ,"Comment": "length Of List"}
{"id": 173 ,"Comment": "kth Smallest"}
{"id": 174 ,"Comment": "length Of List"}
{"id": 175 ,"Comment": "push into the stack"}
{"id": 176 ,"Comment": "right Side View"}
{"id": 177 ,"Comment": "can Win number"}
{"id": 178 ,"Comment": "pop from stack"}
{"id": 179 ,"Comment": "find the peak element"}
{"id": 180 ,"Comment": "find max Profit"}
{"id": 181 ,"Comment": "make word Dictionary Free"}
{"id": 182 ,"Comment": "search"}
{"id": 183 ,"Comment": "add Word"}
{"id": 184 ,"Comment": "create word Dictionary"}
{"id": 185 ,"Comment": "insert"}
{"id": 186 ,"Comment": "search"}
{"id": 187 ,"Comment": "insert"}
{"id": 188 ,"Comment": "make the trie free"}
{"id": 189 ,"Comment": "starts With"}
{"id": 190 ,"Comment": "create trie"}
{"id": 191 ,"Comment": "print List"}
{"id": 192 ,"Comment": "search"}
{"id": 193 ,"Comment": "starts With"}
{"id": 194 ,"Comment": "delete the Node"}
{"id": 195 ,"Comment": "check is isomorphic or not"}
{"id": 196 ,"Comment": "remove elements"}
{"id": 197 ,"Comment": "check contains Duplicate or not"}
{"id": 198 ,"Comment": "find minimum value "}
{"id": 199 ,"Comment": "find size"}
{"id": 200 ,"Comment": "pop from stack"}
{"id": 201 ,"Comment": "push into stack"}
{"id": 202 ,"Comment": "check is empty or not"}
{"id": 203 ,"Comment": "create stack"}
{"id": 204 ,"Comment": "pop from stack"}
{"id": 205 ,"Comment": "push into stack"}
{"id": 206 ,"Comment": "empty the stack"}
{"id": 207 ,"Comment": "check stack top"}
{"id": 208 ,"Comment": "destroy stack"}
{"id": 209 ,"Comment": "check can complete circuit or not"}
{"id": 210 ,"Comment": "print Tree Level Order"}
{"id": 211 ,"Comment": "invert Tree"}
{"id": 212 ,"Comment": "invert Tree"}
{"id": 213 ,"Comment": "pop from stack"}
{"id": 214 ,"Comment": "push from stack"}
{"id": 215 ,"Comment": "find the nth Ugly Number"}
{"id": 216 ,"Comment": "check is Happy or not"}
{"id": 217 ,"Comment": "check is Happy or not"}
{"id": 218 ,"Comment": "check is Anagram or not"}
{"id": 219 ,"Comment": "find rob"}
{"id": 220 ,"Comment": "compare Version"}
{"id": 221 ,"Comment": "find the missing number"}
{"id": 222 ,"Comment": "find the missing number"}
{"id": 223 ,"Comment": "count the primes"}
{"id": 224 ,"Comment": "perform quicksort"}
{"id": 225 ,"Comment": "find the h Index"}
{"id": 226 ,"Comment": "find the h Index"}
{"id": 227 ,"Comment": "find sum numbers helper"}
{"id": 228 ,"Comment": "swap between numbers"}
{"id": 229 ,"Comment": "find sum of the numbers"}
{"id": 230 ,"Comment": "sift Down Minimum"}
{"id": 231 ,"Comment": "sift Down Maximum"}
{"id": 232 ,"Comment": "sift Up Maximum"}
{"id": 233 ,"Comment": "sift Up Minimum"}
{"id": 234 ,"Comment": "add Heap"}
{"id": 235 ,"Comment": "count Digit One"}
{"id": 236 ,"Comment": "find Median number"}
{"id": 237 ,"Comment": "add numbers"}
{"id": 238 ,"Comment": "find the Median and make it Free"}
{"id": 239 ,"Comment": "create the Median Finder"}
{"id": 240 ,"Comment": "copy Random List"}
{"id": 241 ,"Comment": "find Hint"}
{"id": 242 ,"Comment": "top from stack"}
{"id": 243 ,"Comment": "make postorder Traversal"}
{"id": 244 ,"Comment": "push from stack"}
{"id": 245 ,"Comment": "pop from stack"}
{"id": 246 ,"Comment": "find the hamming Weight"}
{"id": 247 ,"Comment": "find the hamming Weight"}
{"id": 248 ,"Comment": "find the hamming Weight"}
{"id": 249 ,"Comment": "print bits"}
{"id": 250 ,"Comment": "find the hamming Weight"}
{"id": 251 ,"Comment": "find the hamming Weight"}
{"id": 252 ,"Comment": "get intersection node"}
{"id": 253 ,"Comment": "find the product except Self"}
{"id": 254 ,"Comment": "find the hamming Weight"}
{"id": 255 ,"Comment": "detect cycle"}
{"id": 256 ,"Comment": "compare between numbers"}
{"id": 257 ,"Comment": "find the largest number"}
{"id": 258 ,"Comment": "perform quicksort"}
{"id": 259 ,"Comment": "rotate"}
{"id": 260 ,"Comment": "convert title to number"}
{"id": 261 ,"Comment": "destroy"}
{"id": 262 ,"Comment": "transpose the matrix"}
{"id": 263 ,"Comment": "find the top from stack"}
{"id": 264 ,"Comment": "push from stack"}
{"id": 265 ,"Comment": "print"}
{"id": 266 ,"Comment": "pop from stack"}
{"id": 267 ,"Comment": "perform hash"}
{"id": 268 ,"Comment": "destroy"}
{"id": 269 ,"Comment": "find the Power Of Two"}
{"id": 270 ,"Comment": "calculate"}
{"id": 271 ,"Comment": "find and adjust"}
{"id": 272 ,"Comment": "lru Cache Initialization"}
{"id": 273 ,"Comment": "lru Cache Free"}
{"id": 274 ,"Comment": "make lru Cache Set"}
{"id": 275 ,"Comment": "get lru Cache"}
{"id": 276 ,"Comment": "print the array"}
{"id": 277 ,"Comment": "character two lowercase"}
{"id": 278 ,"Comment": "check is Palindrome or not"}
{"id": 279 ,"Comment": "make summary of ranges"}
{"id": 280 ,"Comment": "reverse List"}
{"id": 281 ,"Comment": "reverse List"}
{"id": 282 ,"Comment": "perform range bitwise and"}
{"id": 283 ,"Comment": "perform range bitwise and"}
{"id": 284 ,"Comment": "find nth Super Ugly Number"}
{"id": 285 ,"Comment": "compute area"}
{"id": 286 ,"Comment": "find lowest Common Ancestor"}
{"id": 287 ,"Comment": "find num Squares"}
{"id": 288 ,"Comment": "evaluate RPN"}
{"id": 289 ,"Comment": "pop from stack"}
{"id": 290 ,"Comment": "push from stack"}
{"id": 291 ,"Comment": "print stack"}
{"id": 292 ,"Comment": "print list"}
{"id": 293 ,"Comment": "check is Palindrome or not"}
{"id": 294 ,"Comment": "find the single number"}
{"id": 295 ,"Comment": "add digits"}
{"id": 296 ,"Comment": "find depth first search"}
{"id": 297 ,"Comment": "find number of islands"}
{"id": 298 ,"Comment": "reverse bits"}
{"id": 299 ,"Comment": "print bits"}
{"id": 300 ,"Comment": "reverse bit"}
{"id": 301 ,"Comment": "add digits"}
{"id": 302 ,"Comment": "reverse bits"}
{"id": 303 ,"Comment": "pop from queue"}
{"id": 304 ,"Comment": "check if queue is empty or not"}
{"id": 305 ,"Comment": "push from queue"}
{"id": 306 ,"Comment": "create queue"}
{"id": 307 ,"Comment": "pop from queue"}
{"id": 308 ,"Comment": "push from queue"}
{"id": 309 ,"Comment": "peek the queue "}
{"id": 310 ,"Comment": "destroy queue"}
{"id": 311 ,"Comment": "check if queue is empty or not"}
{"id": 312 ,"Comment": "find has cycle or not"}
{"id": 313 ,"Comment": "swap between numbers"}
{"id": 314 ,"Comment": "find Kth Largest"}
{"id": 315 ,"Comment": "search the matrix"}
{"id": 316 ,"Comment": "find the maximum gap"}
{"id": 317 ,"Comment": "check for nearby duplicate"}
{"id": 318 ,"Comment": "find Kth Largest number"}
{"id": 319 ,"Comment": "check the transate"}
{"id": 320 ,"Comment": "find word beginning with o"}
{"id": 321 ,"Comment": "find word beginning with e"}
{"id": 322 ,"Comment": "find word beginning with a"}
{"id": 323 ,"Comment": "find word beginning with i"}
{"id": 324 ,"Comment": "find word beginning with q without a following u"}
{"id": 325 ,"Comment": "find word beginning with a vowel and followed by a qu"}
{"id": 326 ,"Comment": "find word beginning with k"}
{"id": 327 ,"Comment": "find word beginning with x"}
{"id": 328 ,"Comment": "find word beginning with p"}
{"id": 329 ,"Comment": "find word beginning with u"}
{"id": 330 ,"Comment": "find word beginning with thr"}
{"id": 331 ,"Comment": "find word beginning with qu"}
{"id": 332 ,"Comment": "find word beginning with ch"}
{"id": 333 ,"Comment": "find word beginning with th"}
{"id": 334 ,"Comment": "find word beginning with qu and a preceding consonant"}
{"id": 335 ,"Comment": "y is treated like a vowel at the end of a consonant cluster"}
{"id": 336 ,"Comment": "find word beginning with yt"}
{"id": 337 ,"Comment": "y is treated like a consonant at the beginning of a word"}
{"id": 338 ,"Comment": "find word beginning with xr"}
{"id": 339 ,"Comment": "find word beginning with sch"}
{"id": 340 ,"Comment": "count one nucleotide in single character input"}
{"id": 341 ,"Comment": "y as second letter in two letter word"}
{"id": 342 ,"Comment": "strand count"}
{"id": 343 ,"Comment": "find a whole phrase"}
{"id": 344 ,"Comment": "find empty strand"}
{"id": 345 ,"Comment": "find invalid nucleotide"}
{"id": 346 ,"Comment": "find multiple nucleotides"}
{"id": 347 ,"Comment": "apply tear down"}
{"id": 348 ,"Comment": "set up"}
{"id": 349 ,"Comment": "find repeated nucleotide"}
{"id": 350 ,"Comment": "find null_string"}
{"id": 351 ,"Comment": "check abbreviation"}
{"id": 352 ,"Comment": "find lowercase words"}
{"id": 353 ,"Comment": "find basic abbreviation"}
{"id": 354 ,"Comment": "check empty string"}
{"id": 355 ,"Comment": "find long abbreviation"}
{"id": 356 ,"Comment": "find punctuation"}
{"id": 357 ,"Comment": "find punctuation without whitespace"}
{"id": 358 ,"Comment": "find consecutive delimiters abbreviation"}
{"id": 359 ,"Comment": "find all caps words"}
{"id": 360 ,"Comment": "apostrophes"}
{"id": 361 ,"Comment": "rna complement of cytosine is guanine"}
{"id": 362 ,"Comment": "underscore emphasis"}
{"id": 363 ,"Comment": "empty rna sequence"}
{"id": 364 ,"Comment": "check transcription"}
{"id": 365 ,"Comment": "check paired square brackets"}
{"id": 366 ,"Comment": "rna complement"}
{"id": 367 ,"Comment": "rna complement of adenine is uracil"}
{"id": 368 ,"Comment": "rna complement of thymine is adenine"}
{"id": 369 ,"Comment": "rna complement of guanine is cytosine"}
{"id": 370 ,"Comment": "paired with whitespace"}
{"id": 371 ,"Comment": "check wrong closing bracket"}
{"id": 372 ,"Comment": "find unpaired brackets"}
{"id": 373 ,"Comment": "wrong ordered brackets"}
{"id": 374 ,"Comment": "check empty string"}
{"id": 375 ,"Comment": "find partially paired brackets"}
{"id": 376 ,"Comment": "find several paired brackets"}
{"id": 377 ,"Comment": "find unpaired and nested brackets"}
{"id": 378 ,"Comment": "find paired and nested brackets"}
{"id": 379 ,"Comment": "find unopened closing brackets"}
{"id": 380 ,"Comment": "find early unexpected brackets"}
{"id": 381 ,"Comment": "find paired and wrong nested brackets"}
{"id": 382 ,"Comment": "find paired and incomplete brackets"}
{"id": 383 ,"Comment": "check too many closing brackets"}
{"id": 384 ,"Comment": "check empty sentence"}
{"id": 385 ,"Comment": "find math expression"}
{"id": 386 ,"Comment": "find complex latex expression"}
{"id": 387 ,"Comment": "find early mismatched brackets"}
{"id": 388 ,"Comment": "find null"}
{"id": 389 ,"Comment": "find underscores"}
{"id": 390 ,"Comment": "find only lower case"}
{"id": 391 ,"Comment": "perfect lower case"}
{"id": 392 ,"Comment": "find missing letter x"}
{"id": 393 ,"Comment": "find missing letter h"}
{"id": 394 ,"Comment": "find missing letters replaced by numbers"}
{"id": 395 ,"Comment": "test with numbers"}
{"id": 396 ,"Comment": "find mixed case and punctuation"}
{"id": 397 ,"Comment": "find factor t are equal"}
{"id": 398 ,"Comment": "a to m and A to M are 26 different characters but not pangram"}
{"id": 399 ,"Comment": "find smallest palindrome from double digit factors"}
{"id": 400 ,"Comment": "check whether contains factor"}
{"id": 401 ,"Comment": "find smallest palindrome from single digit factors"}
{"id": 402 ,"Comment": "find largest palindrome from single digit factors"}
{"id": 403 ,"Comment": "check factors"}
{"id": 404 ,"Comment": "largest palindrome from four digit factors"}
{"id": 405 ,"Comment": "largest palindrome from double digit factors"}
{"id": 406 ,"Comment": "largest palindrome from triple digit factors"}
{"id": 407 ,"Comment": "largest palindrome from four digit factors"}
{"id": 408 ,"Comment": "largest palindrome from triple digit factors"}
{"id": 409 ,"Comment": "find solution"}
{"id": 410 ,"Comment": "empty result for largest if no palindrome in the range"}
{"id": 411 ,"Comment": "empty result for smallest if no palindrome in the range"}
{"id": 412 ,"Comment": "error result for largest if min is more than max"}
{"id": 413 ,"Comment": "error result for smallest if min is more than max"}
{"id": 414 ,"Comment": "make slices of one from two"}
{"id": 415 ,"Comment": "make slices of one from one"}
{"id": 416 ,"Comment": "make slices can include duplicates"}
{"id": 417 ,"Comment": "make slices of two overlap"}
{"id": 418 ,"Comment": "make slices of two"}
{"id": 419 ,"Comment": "make slices of a long series"}
{"id": 420 ,"Comment": "find slice length is too large"}
{"id": 421 ,"Comment": "slice length cannot be zero"}
{"id": 422 ,"Comment": "empty series is invalid"}
{"id": 423 ,"Comment": "build candidates"}
{"id": 424 ,"Comment": "detects anagram"}
{"id": 425 ,"Comment": "does not detect anagram subsets"}
{"id": 426 ,"Comment": "no matches"}
{"id": 427 ,"Comment": "detect two anagrams"}
{"id": 428 ,"Comment": "assert correct anagrams"}
{"id": 429 ,"Comment": "detects anagram using case insensitive subject"}
{"id": 430 ,"Comment": "three anagrams"}
{"id": 431 ,"Comment": "detects multiple anagrams with different case"}
{"id": 432 ,"Comment": "does not detect non anagrams with identical checksum"}
{"id": 433 ,"Comment": "detects anagrams case insensitively"}
{"id": 434 ,"Comment": "find words are not anagrams of themselves"}
{"id": 435 ,"Comment": "find anagrams must use all letters exactly once"}
{"id": 436 ,"Comment": "not detect an anagram if the original word is repeated"}
{"id": 437 ,"Comment": "find words other than themselves can be anagrams"}
{"id": 438 ,"Comment": "detects anagrams using case insensitive possible matches"}
{"id": 439 ,"Comment": "find first prime"}
{"id": 440 ,"Comment": "say hi"}
{"id": 441 ,"Comment": "find big prime"}
{"id": 442 ,"Comment": "find second prime"}
{"id": 443 ,"Comment": "find sixth prime"}
{"id": 444 ,"Comment": "get document"}
{"id": 445 ,"Comment": "find where there is no zeroth prime"}
{"id": 446 ,"Comment": "find kth sentence in mth paragraph"}
{"id": 447 ,"Comment": "find kth word in mth sentence of nth paragraph"}
{"id": 448 ,"Comment": "kth paragraph"}
{"id": 449 ,"Comment": "print word"}
{"id": 450 ,"Comment": "annotate number of rows"}
{"id": 451 ,"Comment": "print sentence"}
{"id": 452 ,"Comment": "print paragraph"}
{"id": 453 ,"Comment": "input text"}
{"id": 454 ,"Comment": "annotate space surrounded by mines"}
{"id": 455 ,"Comment": "annotate number of mines"}
{"id": 456 ,"Comment": "annotate mine surrounded by spaces"}
{"id": 457 ,"Comment": "annotate number of columns"}
{"id": 458 ,"Comment": "annotate minefield with only mines"}
{"id": 459 ,"Comment": "annotate cross"}
{"id": 460 ,"Comment": "annotate horizontal line mines at edges"}
{"id": 461 ,"Comment": "annotate vertical line"}
{"id": 462 ,"Comment": "annotate horizontal line"}
{"id": 463 ,"Comment": "annotate vertical line mines at edges"}
{"id": 464 ,"Comment": "find volume"}
{"id": 465 ,"Comment": "two fer no name given"}
{"id": 466 ,"Comment": "two fer a name given"}
{"id": 467 ,"Comment": "two fer another name given"}
{"id": 468 ,"Comment": "annotate large minefield"}
{"id": 469 ,"Comment": "find isogram with only lower case characters"}
{"id": 470 ,"Comment": "compare"}
{"id": 471 ,"Comment": "sort by area"}
{"id": 472 ,"Comment": "find empty string"}
{"id": 473 ,"Comment": "compare the number"}
{"id": 474 ,"Comment": "find word with duplicated letter in mixed case lowercase first"}
{"id": 475 ,"Comment": "find word with one duplicated character from end of alphabet"}
{"id": 476 ,"Comment": "find word with one duplicated character"}
{"id": 477 ,"Comment": "find word with duplicated letter in mixed case"}
{"id": 478 ,"Comment": "find longest reported english isogram"}
{"id": 479 ,"Comment": "find duplicated_character_in_the_middle"}
{"id": 480 ,"Comment": "find hypothetical isogrammic word with hyphen"}
{"id": 481 ,"Comment": "find hypothetical word with duplicated character following hyphen"}
{"id": 482 ,"Comment": "find isogram with duplicated hyphen"}
{"id": 483 ,"Comment": "made up name that is an isogram"}
{"id": 484 ,"Comment": "find single row"}
{"id": 485 ,"Comment": "find word with duplicated character and with two hyphens"}
{"id": 486 ,"Comment": "check triangle"}
{"id": 487 ,"Comment": "number of rows"}
{"id": 488 ,"Comment": "find same first and last characters"}
{"id": 489 ,"Comment": "find six rows"}
{"id": 490 ,"Comment": "find five rows"}
{"id": 491 ,"Comment": "find four rows"}
{"id": 492 ,"Comment": "find two rows"}
{"id": 493 ,"Comment": "find three rows"}
{"id": 494 ,"Comment": "check position"}
{"id": 495 ,"Comment": "rotating clockwise changes north to east"}
{"id": 496 ,"Comment": "find ten rows"}
{"id": 497 ,"Comment": "create at origin facing north"}
{"id": 498 ,"Comment": "create at negative position facing south"}
{"id": 499 ,"Comment": "rotating counter clockwise changes north to west"}
{"id": 500 ,"Comment": "rotating counter clockwise changes west to south"}
{"id": 502 ,"Comment": "rotating clockwise changes west to north"}
{"id": 503 ,"Comment": "rotating clockwise changes south to west"}
{"id": 501 ,"Comment": "rotating clockwise changes east to south"}
{"id": 504 ,"Comment": "rotating counter clockwise changes south to east"}
{"id": 505 ,"Comment": "moving forward one facing east increments X"}
{"id": 506 ,"Comment": "moving forward one facing north increments Y"}
{"id": 507 ,"Comment": "rotating counter clockwise changes east to north"}
{"id": 508 ,"Comment": "moving forward one facing south decrements Y"}
{"id": 509 ,"Comment": "follow series of instructions moving east and north"}
{"id": 510 ,"Comment": "follow series of instructions moving east and north from README"}
{"id": 511 ,"Comment": "follow series of instructions moving west and south"}
{"id": 512 ,"Comment": "moving forward one facing west decrements X"}
{"id": 513 ,"Comment": "follow series of instructions moving west and north"}
{"id": 514 ,"Comment": "decode"}
{"id": 515 ,"Comment": "encode yes"}
{"id": 516 ,"Comment": "encode"}
{"id": 517 ,"Comment": "encode OMG"}
{"id": 518 ,"Comment": "encode number"}
{"id": 519 ,"Comment": "encode spaces"}
{"id": 520 ,"Comment": "encode all the letters"}
{"id": 521 ,"Comment": "encode deep thought"}
{"id": 522 ,"Comment": "encode numbers"}
{"id": 523 ,"Comment": "encode mindblowingly"}
{"id": 524 ,"Comment": "decode with too many spaces"}
{"id": 525 ,"Comment": "decode all the letters"}
{"id": 526 ,"Comment": "decode a sentence"}
{"id": 527 ,"Comment": "decode numbers"}
{"id": 528 ,"Comment": "decode exercism"}
{"id": 529 ,"Comment": "find the largest product of 3 with numbers in order"}
{"id": 530 ,"Comment": "find the largest product of 2 with numbers in order"}
{"id": 531 ,"Comment": "find the largest product of 2"}
{"id": 532 ,"Comment": "finds the largest product if span equals length"}
{"id": 533 ,"Comment": "decode with no spaces"}
{"id": 534 ,"Comment": "reports zero if all spans include zero"}
{"id": 535 ,"Comment": "get the largest product of a big number"}
{"id": 536 ,"Comment": "find the largest product of 5 with numbers in order"}
{"id": 537 ,"Comment": "reports zero if the only digits are zero"}
{"id": 538 ,"Comment": "find the largest product of 3"}
{"id": 539 ,"Comment": "rejects invalid character in digits"}
{"id": 540 ,"Comment": "reports 1 for empty string and empty product"}
{"id": 541 ,"Comment": "rejects span longer than string length"}
{"id": 542 ,"Comment": "reports 1 for nonempty string and empty product"}
{"id": 543 ,"Comment": "rejects empty string and nonzero span"}
{"id": 544 ,"Comment": "find binary 11 is decimal 3"}
{"id": 545 ,"Comment": "find binary 0 is decimal 0"}
{"id": 546 ,"Comment": "rejects negative span"}
{"id": 547 ,"Comment": "find binary 1 is decimal 1"}
{"id": 548 ,"Comment": "find binary 10 is decimal 2"}
{"id": 549 ,"Comment": "find binary 11010 is decimal 26"}
{"id": 550 ,"Comment": "binary ignores leading zeros"}
{"id": 551 ,"Comment": "binary 100 is decimal 4"}
{"id": 552 ,"Comment": "binary 1001 is decimal 9"}
{"id": 553 ,"Comment": "binary 10001101000 is decimal 1128"}
{"id": 554 ,"Comment": "a number with leading non binary characters is invalid"}
{"id": 555 ,"Comment": "a number with trailing non binary characters is invalid"}
{"id": 556 ,"Comment": "2 is not a valid binary digit"}
{"id": 557 ,"Comment": "a number containing a non binary digit is invalid"}
{"id": 558 ,"Comment": "a number with internal non binary characters is invalid"}
{"id": 559 ,"Comment": "find smallest perfect number is classified correctly"}
{"id": 560 ,"Comment": "a number and a word whitespace separated is invalid"}
{"id": 561 ,"Comment": "medium perfect number is classified correctly"}
{"id": 562 ,"Comment": "large perfect number is classified correctly"}
{"id": 563 ,"Comment": "smallest abundant number is classified correctly"}
{"id": 564 ,"Comment": "medium deficient number is_classified_correctly"}
{"id": 565 ,"Comment": "large abundant number is classified correctly"}
{"id": 566 ,"Comment": "smallest prime deficient number is classified correctly"}
{"id": 567 ,"Comment": "smallest non prime deficient number is classified correctly"}
{"id": 568 ,"Comment": "medium abundant number is classified correctly"}
{"id": 569 ,"Comment": "square of sum 1"}
{"id": 570 ,"Comment": "edge case is classified correctly"}
{"id": 571 ,"Comment": "zero is rejected"}
{"id": 572 ,"Comment": "negative integer is rejected"}
{"id": 573 ,"Comment": "large deficient number is classified correctly"}
{"id": 574 ,"Comment": "square of sum 100"}
{"id": 575 ,"Comment": "sum of squares 5"}
{"id": 576 ,"Comment": "sum of squares 100"}
{"id": 577 ,"Comment": "square of sum 5"}
{"id": 578 ,"Comment": "sum of squares 1"}
{"id": 579 ,"Comment": "stating something"}
{"id": 580 ,"Comment": "next permutation"}
{"id": 581 ,"Comment": "difference of squares 1"}
{"id": 582 ,"Comment": "difference of squares 100"}
{"id": 583 ,"Comment": "difference of squares 5"}
{"id": 584 ,"Comment": "asking gibberish"}
{"id": 585 ,"Comment": "asking a numeric question"}
{"id": 586 ,"Comment": "shouting gibberish"}
{"id": 587 ,"Comment": "asking a question"}
{"id": 588 ,"Comment": "test shouting"}
{"id": 589 ,"Comment": "test talking forcefully"}
{"id": 590 ,"Comment": "test only numbers"}
{"id": 591 ,"Comment": "test shouting numbers"}
{"id": 592 ,"Comment": "find using acronyms in regular speech"}
{"id": 593 ,"Comment": "find forceful question"}
{"id": 594 ,"Comment": "find question with only numbers"}
{"id": 595 ,"Comment": "test shouting with no exclamation mark"}
{"id": 596 ,"Comment": "find non letters with question"}
{"id": 597 ,"Comment": "find statement containing question mark"}
{"id": 598 ,"Comment": "find shouting with special characters"}
{"id": 599 ,"Comment": "find multiple line question"}
{"id": 600 ,"Comment": "test prolonged silence"}
{"id": 601 ,"Comment": "test alternate silence"}
{"id": 602 ,"Comment": "test silence"}
{"id": 603 ,"Comment": "test prattling on"}
{"id": 604 ,"Comment": "encode_lowercase_characters"}
{"id": 605 ,"Comment": "encode empty string"}
{"id": 606 ,"Comment": "find other whitespace"}
{"id": 607 ,"Comment": "find starting with whitespace"}
{"id": 608 ,"Comment": "test ending with whitespace"}
{"id": 609 ,"Comment": "find non question ending with whitespace"}
{"id": 610 ,"Comment": "encode string with no single characters"}
{"id": 611 ,"Comment": "encode single characters only are encoded without count"}
{"id": 612 ,"Comment": "encode multiple whitespace mixed in string"}
{"id": 613 ,"Comment": "encode single characters mixed with repeated characters"}
{"id": 614 ,"Comment": "decode single characters with repeated characters"}
{"id": 615 ,"Comment": "decode single characters only"}
{"id": 616 ,"Comment": "decode string with no single characters"}
{"id": 617 ,"Comment": "decode empty string"}
{"id": 618 ,"Comment": "test the sound for 3 is pling"}
{"id": 619 ,"Comment": "encode followed by decode gives original string"}
{"id": 620 ,"Comment": "decode lower case string"}
{"id": 621 ,"Comment": "check convert drops"}
{"id": 622 ,"Comment": "decode multiple whitespace mixed in string"}
{"id": 623 ,"Comment": "test the sound for 1 is 1"}
{"id": 624 ,"Comment": "test the sound for 5 is plang"}
{"id": 625 ,"Comment": "test the sound for 7 is plong"}
{"id": 626 ,"Comment": "test the sound for 9 is pling as it has a factor 3"}
{"id": 627 ,"Comment": "test the sound for 6 is pling as it has a factor 3"}
{"id": 628 ,"Comment": "test 2 to the power 3  does not make a raindrop sound as 3 is the exponent not the base"}
{"id": 629 ,"Comment": "test the sound for 25 is plingplang as it has a factor 5"}
{"id": 630 ,"Comment": "test the sound for 15 is plingplang as it has a factor 3 and_5"}
{"id": 631 ,"Comment": "test the sound for 21 is plingplong as it has a factor 3 and_7"}
{"id": 632 ,"Comment": "test the sound for 14 is plong as it has a factor 7"}
{"id": 633 ,"Comment": "test the sound for 10 is plang as it has a factor 5"}
{"id": 634 ,"Comment": "test the sound for 35 is plangplong as it has factors 5 and 7"}
{"id": 635 ,"Comment": "test the sound for 49 is plong as it has a factor 7"}
{"id": 636 ,"Comment": "test the sound for 3125 is plang as it has a factor 5"}
{"id": 637 ,"Comment": "test the sound for 105 is plangplangplong as it has a factor 3 5 and 7"}
{"id": 638 ,"Comment": "test the sound for 52 is 52"}
{"id": 639 ,"Comment": "find single digit strings that cannot be valid"}
{"id": 640 ,"Comment": "find a simple valid SIN that remains valid if reversed"}
{"id": 641 ,"Comment": "find a single zero is invalid"}
{"id": 642 ,"Comment": "find a simple valid SIN that becomes invalid if reversed"}
{"id": 643 ,"Comment": "find a valid Canadian SIN"}
{"id": 644 ,"Comment": "find valid number with an even number of digits"}
{"id": 645 ,"Comment": "find invalid credit_card"}
{"id": 646 ,"Comment": "find valid number with an odd number of spaces"}
{"id": 647 ,"Comment": "find invalid long number with an even remainder"}
{"id": 648 ,"Comment": "find invalid Canadian SIN;"}
{"id": 649 ,"Comment": "find valid string with a non digit added at the end to become invalid"}
{"id": 650 ,"Comment": "test valid strings with symbols included become invalid"}
{"id": 651 ,"Comment": "test more than a single zero is valid"}
{"id": 652 ,"Comment": "test valid strings with punctuation included become invalid"}
{"id": 653 ,"Comment": "find single zero with space is invalid"}
{"id": 654 ,"Comment": "test ascii value for doubled non digit isnt allowed"}
{"id": 655 ,"Comment": "find ascii value for non doubled non digit isnt allowed"}
{"id": 656 ,"Comment": "find number with odd number of digits and non zero first digit"}
{"id": 657 ,"Comment": "find very long input that is valid"}
{"id": 658 ,"Comment": "check input digit 9 is correctly converted to output digit 9"}
{"id": 659 ,"Comment": "check addition with negative numbers"}
{"id": 660 ,"Comment": "test non numeric non space char in middle with sum divisible by 10 isnt allowed"}
{"id": 661 ,"Comment": "perform addition"}
{"id": 662 ,"Comment": "perform addition"}
{"id": 663 ,"Comment": "find just a number"}
{"id": 664 ,"Comment": "perfrom multiplication"}
{"id": 665 ,"Comment": "perform division"}
{"id": 666 ,"Comment": "perform subtraction"}
{"id": 667 ,"Comment": "perform large addition"}
{"id": 668 ,"Comment": "perform multiple additions"}
{"id": 669 ,"Comment": "perform multiple multiplication"}
{"id": 670 ,"Comment": "perform addition and subtraction"}
{"id": 671 ,"Comment": "perform multiple subtraction"}
{"id": 672 ,"Comment": "perform subtraction then addition"}
{"id": 673 ,"Comment": "perform multiple multiplication"}
{"id": 674 ,"Comment": "perform multiple division"}
{"id": 675 ,"Comment": "reject a problem missing an operand"}
{"id": 676 ,"Comment": "find unknown operation"}
{"id": 677 ,"Comment": "find non math question"}
{"id": 678 ,"Comment": "reject problem with no operands or operators"}
{"id": 679 ,"Comment": "reject postfix notation"}
{"id": 680 ,"Comment": "reject prefix notation"}
{"id": 681 ,"Comment": "reject two numbers in a row"}
{"id": 682 ,"Comment": "create"}
{"id": 683 ,"Comment": "reject two operations in a row"}
{"id": 684 ,"Comment": "find past the hour"}
{"id": 685 ,"Comment": "perform subtract"}
{"id": 686 ,"Comment": "test on the hour"}
{"id": 687 ,"Comment": "compare"}
{"id": 688 ,"Comment": "perform add"}
{"id": 689 ,"Comment": "check midnight is zero hours"}
{"id": 690 ,"Comment": "find sixty minutes is next hour"}
{"id": 691 ,"Comment": "minutes roll over"}
{"id": 692 ,"Comment": "test hour rolls over continuously"}
{"id": 693 ,"Comment": "test hour rolls over"}
{"id": 694 ,"Comment": "check negative hour"}
{"id": 695 ,"Comment": "test minutes roll over continuously"}
{"id": 696 ,"Comment": "test hour and minutes roll over"}
{"id": 697 ,"Comment": "test hour and minutes roll over continuously"}
{"id": 698 ,"Comment": "test hour and minutes roll over to exactly midnight"}
{"id": 699 ,"Comment": "find negative minutes roll over"}
{"id": 700 ,"Comment": "test negative minutes roll over continuously"}
{"id": 701 ,"Comment": "find negative hour rolls over"}
{"id": 702 ,"Comment": "find negative hour rolls over continuously"}
{"id": 703 ,"Comment": "check negative minutes"}
{"id": 704 ,"Comment": "add no minutes"}
{"id": 705 ,"Comment": "add minutes"}
{"id": 706 ,"Comment": "find negative hour and minutes both roll over"}
{"id": 707 ,"Comment": "find negative sixty minutes is previous hour"}
{"id": 708 ,"Comment": "find negative hour and minutes both roll over continuously"}
{"id": 709 ,"Comment": "add more than one day"}
{"id": 710 ,"Comment": "add across midnight"}
{"id": 711 ,"Comment": "add more than one hour"}
{"id": 712 ,"Comment": "add more than two hours with carry"}
{"id": 713 ,"Comment": "add to next hour"}
{"id": 714 ,"Comment": "subtract across midnight"}
{"id": 715 ,"Comment": "subtract more than an hour"}
{"id": 716 ,"Comment": "add more than two days"}
{"id": 717 ,"Comment": "subtract minutes"}
{"id": 718 ,"Comment": "subtract to previous hour"}
{"id": 719 ,"Comment": "subtract more than two hours"}
{"id": 720 ,"Comment": "subtract more than two days"}
{"id": 721 ,"Comment": "compare clocks with same time"}
{"id": 722 ,"Comment": "subtract more than one day"}
{"id": 723 ,"Comment": "subtract more than two hours with borrow"}
{"id": 724 ,"Comment": "compare clocks with negative hour"}
{"id": 725 ,"Comment": "compare clocks an hour apart"}
{"id": 726 ,"Comment": "compare clocks with hour overflow by several days"}
{"id": 727 ,"Comment": "compare clocks a minute apart"}
{"id": 728 ,"Comment": "compare clocks with hour overflow"}
{"id": 729 ,"Comment": "compare clocks with negative minute"}
{"id": 730 ,"Comment": "compare clocks with negative hour that wraps multiple times"}
{"id": 731 ,"Comment": "compare clocks with minute overflow"}
{"id": 732 ,"Comment": "compare clocks with minute overflow by several days"}
{"id": 733 ,"Comment": "compare clocks with negative hour that wraps"}
{"id": 734 ,"Comment": "compare full clock and zeroed clock"}
{"id": 735 ,"Comment": "compare clocks with negative minute that wraps"}
{"id": 736 ,"Comment": "compare clocks with negative hours and minute that wrap"}
{"id": 737 ,"Comment": "compare clocks with negative minute that wraps multiple times"}
{"id": 738 ,"Comment": "compare clocks with negative hours and minute"}
{"id": 739 ,"Comment": "commands close your eyes for 100"}
{"id": 740 ,"Comment": "next permutation"}
{"id": 741 ,"Comment": "commands double blink for 10"}
{"id": 742 ,"Comment": "commands wink for 1"}
{"id": 743 ,"Comment": "max of four"}
{"id": 744 ,"Comment": "combine two actions"}
{"id": 745 ,"Comment": "reversing no actions still gives no actions"}
{"id": 746 ,"Comment": "reverse two actions"}
{"id": 747 ,"Comment": "jump for 1000"}
{"id": 748 ,"Comment": "reversing one action gives the same action"}
{"id": 749 ,"Comment": "lowercase"}
{"id": 750 ,"Comment": "commands all possible actions"}
{"id": 751 ,"Comment": "reverse all possible actions"}
{"id": 752 ,"Comment": "do nothing for zero"}
{"id": 753 ,"Comment": "empty text res in an empty ciphertext"}
{"id": 754 ,"Comment": "remove spaces"}
{"id": 755 ,"Comment": "remove punctuation"}
{"id": 756 ,"Comment": "54 char plaintext gives 7 chunks last two with trailing spaces"}
{"id": 757 ,"Comment": "8 char plaintext gives 3 chunks last one with trailing space"}
{"id": 758 ,"Comment": "9 char plaintext gives 3 chunks of 3 chars"}
{"id": 759 ,"Comment": "find zero steps for one"}
{"id": 760 ,"Comment": "find zero is an error"}
{"id": 761 ,"Comment": "find even and odd steps"}
{"id": 762 ,"Comment": "divide if even"}
{"id": 763 ,"Comment": "find large number of even and odd steps"}
{"id": 764 ,"Comment": "square 4"}
{"id": 765 ,"Comment": "square 3"}
{"id": 766 ,"Comment": "square 1"}
{"id": 767 ,"Comment": "find negative value is an error"}
{"id": 768 ,"Comment": "square 2"}
{"id": 769 ,"Comment": "square greater than 64 does not exist"}
{"id": 770 ,"Comment": "square 32"}
{"id": 771 ,"Comment": "square 64"}
{"id": 772 ,"Comment": "square 0 does not exist"}
{"id": 773 ,"Comment": "square 16"}
{"id": 774 ,"Comment": "decode with three rails"}
{"id": 775 ,"Comment": "encode with ending in the middle"}
{"id": 776 ,"Comment": "find total"}
{"id": 777 ,"Comment": "encode with two rails"}
{"id": 778 ,"Comment": "encode with three rails"}
{"id": 779 ,"Comment": "decode with five rails"}
{"id": 780 ,"Comment": "decode with six rails"}
{"id": 781 ,"Comment": "pop gets element from the list"}
{"id": 782 ,"Comment": "push pop respectively add remove at the end of the list"}
{"id": 783 ,"Comment": "shift gets an element from the list"}
{"id": 784 ,"Comment": "count a list with items"}
{"id": 785 ,"Comment": "pop push shift and unshift can be used in any order"}
{"id": 786 ,"Comment": "shift gets first element from the list"}
{"id": 787 ,"Comment": "unshift adds element at start of the list"}
{"id": 788 ,"Comment": "count an empty list"}
{"id": 789 ,"Comment": "count is correct after mutation"}
{"id": 790 ,"Comment": "deletes the only element"}
{"id": 791 ,"Comment": "deletes the element with the specified value from the list"}
{"id": 792 ,"Comment": "shifting to empty does not break the list"}
{"id": 793 ,"Comment": "popping to empty does not break the list"}
{"id": 794 ,"Comment": "delete does not modify the list if the element is not found"}
{"id": 795 ,"Comment": "deletes the element with the specified value from the list reassigns tail"}
{"id": 796 ,"Comment": "deletes the element with the specified value from the list reassigns head"}
{"id": 797 ,"Comment": "deletes the first of two elements"}
{"id": 798 ,"Comment": "deletes the second of two elements"}
{"id": 799 ,"Comment": "deletes only the first occurrence"}
{"id": 800 ,"Comment": "find valuable letter"}
{"id": 801 ,"Comment": "find short word"}
{"id": 802 ,"Comment": "find lowercase letter"}
{"id": 803 ,"Comment": "find uppercase letter"}
{"id": 804 ,"Comment": "find english like word"}
{"id": 805 ,"Comment": "find long mixed case word"}
{"id": 806 ,"Comment": "find medium valuable word"}
{"id": 807 ,"Comment": "find short valuable word"}
{"id": 808 ,"Comment": "find medium word"}
{"id": 809 ,"Comment": "find real part of a purely imaginary number"}
{"id": 810 ,"Comment": "entire alphabet available"}
{"id": 811 ,"Comment": "find real part of a purely real number"}
{"id": 812 ,"Comment": "empty input"}
{"id": 813 ,"Comment": "compare complex"}
{"id": 814 ,"Comment": "find imaginary unit"}
{"id": 815 ,"Comment": "find imaginary part of a purely real number"}
{"id": 816 ,"Comment": "find imaginary part of a number with real and imaginary part"}
{"id": 817 ,"Comment": "find imaginary part of a purely imaginary number"}
{"id": 818 ,"Comment": "find real part of a number with real and imaginary part"}
{"id": 819 ,"Comment": "add purely imaginary numbers"}
{"id": 820 ,"Comment": "subtract purely imaginary numbers"}
{"id": 821 ,"Comment": "add purely real numbers"}
{"id": 822 ,"Comment": "add numbers with real and imaginary part"}
{"id": 823 ,"Comment": "subtract purely real numbers"}
{"id": 824 ,"Comment": "divide purely real numbers"}
{"id": 825 ,"Comment": "multiply numbers with real and imaginary part"}
{"id": 826 ,"Comment": "multiply purely real numbers"}
{"id": 827 ,"Comment": "multiply purely imaginary numbers"}
{"id": 828 ,"Comment": "subtract numbers with real and imaginary part"}
{"id": 829 ,"Comment": "find absolute value of a purely imaginary number with positive imaginary part"}
{"id": 830 ,"Comment": "find absolute value of a positive purely real number"}
{"id": 831 ,"Comment": "find absolute value of a negative purely real number"}
{"id": 832 ,"Comment": "divide purely imaginary numbers"}
{"id": 833 ,"Comment": "divide numbers with real and imaginary part"}
{"id": 834 ,"Comment": "find complex conjugate of a number with real and imaginary part"}
{"id": 835 ,"Comment": "find absolute value of a purely imaginary number with negative imaginary part"}
{"id": 836 ,"Comment": "find complex conjugate of a purely imaginary number"}
{"id": 837 ,"Comment": "find absolute value of a number with real and imaginary part"}
{"id": 838 ,"Comment": "find complex conjugate of a purely real number"}
{"id": 839 ,"Comment": "add real number to complex number"}
{"id": 840 ,"Comment": "exponential of a number with real and imaginary part"}
{"id": 841 ,"Comment": "find exponential of zero"}
{"id": 842 ,"Comment": "find exponential of a purely real number"}
{"id": 843 ,"Comment": "eulers identity"}
{"id": 844 ,"Comment": "multiply real number by complex_number"}
{"id": 845 ,"Comment": "subtract real number from complex number"}
{"id": 846 ,"Comment": "subtract complex number from real number"}
{"id": 847 ,"Comment": "multiply complex number by real number"}
{"id": 848 ,"Comment": "add complex number to real number"}
{"id": 849 ,"Comment": "assert results match"}
{"id": 850 ,"Comment": "measure using bucket one of size 3 and bucket two of size 5 start with bucket one"}
{"id": 851 ,"Comment": "divide real number by complex number"}
{"id": 852 ,"Comment": "divide complex number by real number"}
{"id": 853 ,"Comment": "measure using bucket one of size 3 and bucket two of size 5 start with bucket two"}
{"id": 854 ,"Comment": "find not possible to reach the goal"}
{"id": 855 ,"Comment": "measure using bucket one of size 7 and bucket two of size 11 start with bucket one"}
{"id": 856 ,"Comment": "measure using bucket one of size 7 and bucket two of size 11 start with bucket two"}
{"id": 857 ,"Comment": "measure using bucket one of size 2 and bucket two of size 3 start with bucket one and end with bucket two"}
{"id": 858 ,"Comment": "measure one step using bucket one of size 1 and bucket two of size 3 start with bucket two"}
{"id": 859 ,"Comment": "test with the same buckets but a different goal then it is possible"}
{"id": 860 ,"Comment": "copy array"}
{"id": 861 ,"Comment": "find goal larger than both buckets is impossible"}
{"id": 862 ,"Comment": "check rebase"}
{"id": 863 ,"Comment": "convert single bit to decimal"}
{"id": 864 ,"Comment": "convert binary to single decimal"}
{"id": 865 ,"Comment": "convert binary to multiple decimal"}
{"id": 866 ,"Comment": "convert decimal to binary"}
{"id": 867 ,"Comment": "convert single decimal to binary"}
{"id": 868 ,"Comment": "convert trinary to hexadecimal"}
{"id": 869 ,"Comment": "find multiple zeros"}
{"id": 870 ,"Comment": "single zero"}
{"id": 871 ,"Comment": "15 bit integer"}
{"id": 872 ,"Comment": "check for empty list"}
{"id": 873 ,"Comment": "convert hexadecimal to trinary"}
{"id": 874 ,"Comment": "find leading zeros"}
{"id": 875 ,"Comment": "find negative digit"}
{"id": 876 ,"Comment": "input base is zero"}
{"id": 877 ,"Comment": "input base is one"}
{"id": 878 ,"Comment": "input base is negative"}
{"id": 879 ,"Comment": "find invalid positive digit"}
{"id": 880 ,"Comment": "check both bases are negative;"}
{"id": 881 ,"Comment": "check output base is zero"}
{"id": 882 ,"Comment": "check output base is negative"}
{"id": 883 ,"Comment": "find invalid positive digit"}
{"id": 884 ,"Comment": "find a value in the middle of an array"}
{"id": 885 ,"Comment": "finds a value at the end of an array"}
{"id": 886 ,"Comment": "finds a value in an array with one element"}
{"id": 887 ,"Comment": "finds a value at the beginning of an array"}
{"id": 888 ,"Comment": "finds a value in an array of odd length"}
{"id": 889 ,"Comment": "check nothing is found in an empty array"}
{"id": 890 ,"Comment": "identifies a value smaller than the arrays smallest value is not found"}
{"id": 891 ,"Comment": "finds a value in an array of even length"}
{"id": 892 ,"Comment": "a value larger than the arrays largest value is not found"}
{"id": 893 ,"Comment": "identifies that a value is not included in the array"}
{"id": 894 ,"Comment": "find data same number at left node"}
{"id": 895 ,"Comment": "find data greater number at right node"}
{"id": 896 ,"Comment": "make data is retained"}
{"id": 897 ,"Comment": "identifies nothing is found when the left and right bounds cross"}
{"id": 898 ,"Comment": "identifies data smaller number at left node"}
{"id": 899 ,"Comment": "data can create complex tree"}
{"id": 900 ,"Comment": "data can sort single number"}
{"id": 901 ,"Comment": "sorted data can sort if second number is smaller than_first"}
{"id": 902 ,"Comment": "sorted data can sort if second number is same as first"}
{"id": 903 ,"Comment": "sorted data can sort if second number is greater than first"}
{"id": 904 ,"Comment": "test first generic verse"}
{"id": 905 ,"Comment": "delete song"}
{"id": 906 ,"Comment": "sorted data can sort complex tree"}
{"id": 907 ,"Comment": "create empty song"}
{"id": 908 ,"Comment": "check song"}
{"id": 909 ,"Comment": "verse with 1 bottle"}
{"id": 910 ,"Comment": "verse with 0 bottles"}
{"id": 911 ,"Comment": "check first two verses"}
{"id": 912 ,"Comment": "verse with 2 bottles;"}
{"id": 913 ,"Comment": "check last generic verse"}
{"id": 914 ,"Comment": "check last_three_verses"}
{"id": 915 ,"Comment": "find equilateral triangle all sides are equal"}
{"id": 916 ,"Comment": "find equilateral triangle no sides are equal"}
{"id": 917 ,"Comment": "find all verses"}
{"id": 918 ,"Comment": "find equilateral triangle if any side is unequal"}
{"id": 919 ,"Comment": "find isosceles triangle if first and last sides are equal"}
{"id": 920 ,"Comment": "find equilateral triangle sides may be floats"}
{"id": 921 ,"Comment": "find equilateral triangle all zero sides is not a triangle"}
{"id": 922 ,"Comment": "find isosceles triangle first two sides are equal"}
{"id": 923 ,"Comment": "find isosceles triangle last two sides are equal"}
{"id": 924 ,"Comment": "find isosceles triangle first triangle inequality violation"}
{"id": 925 ,"Comment": "find isosceles triangle no sides are equal"}
{"id": 926 ,"Comment": "find isosceles triangle second triangle inequality violation"}
{"id": 927 ,"Comment": "find isosceles triangle third triangle inequality violation"}
{"id": 928 ,"Comment": "find isosceles triangle equilateral triangles are also isosceles"}
{"id": 929 ,"Comment": "scalene triangle may not violate triangle inequality"}
{"id": 930 ,"Comment": "scalene triangle no sides are equal"}
{"id": 931 ,"Comment": "scalene triangle all sides are equal"}
{"id": 932 ,"Comment": "isosceles triangle sides may be floats"}
{"id": 933 ,"Comment": "scalene triangle two sides are equal"}
{"id": 934 ,"Comment": "3 is III;"}
{"id": 935 ,"Comment": "scalene triangle sides may be floats"}
{"id": 936 ,"Comment": "2 is II"}
{"id": 937 ,"Comment": "check conversion"}
{"id": 938 ,"Comment": "1 is I"}
{"id": 939 ,"Comment": "4 is IV"}
{"id": 940 ,"Comment": "27 is XXVII"}
{"id": 941 ,"Comment": "5 is V"}
{"id": 942 ,"Comment": "9 is IX"}
{"id": 943 ,"Comment": "6 is VI"}
{"id": 944 ,"Comment": "48 is XLVIII"}
{"id": 945 ,"Comment": "141 is CXLI"}
{"id": 946 ,"Comment": "49 is XLIX"}
{"id": 947 ,"Comment": "93 is XCIII"}
{"id": 948 ,"Comment": "59 is LIX"}
{"id": 949 ,"Comment": "163 is CLXIII"}
{"id": 950 ,"Comment": "575 is DLXXV"}
{"id": 951 ,"Comment": "911 is CMXI"}
{"id": 952 ,"Comment": "402 is CDII"}
{"id": 953 ,"Comment": "1024 is MXXIV"}
{"id": 954 ,"Comment": "16 is XVI"}
{"id": 955 ,"Comment": "66 is LXVI"}
{"id": 956 ,"Comment": "166 is CLXVI"}
{"id": 957 ,"Comment": "666 is DCLXVI"}
{"id": 958 ,"Comment": "3000 is MMM"}
{"id": 959 ,"Comment": "cleans numbers with multiple spaces"}
{"id": 960 ,"Comment": "1666 is MDCLXVI"}
{"id": 961 ,"Comment": "marks summation"}
{"id": 962 ,"Comment": "cleans numbers with dots"}
{"id": 963 ,"Comment": "cleans the number"}
{"id": 964 ,"Comment": "check valid when 11 digits and starting with 1"}
{"id": 965 ,"Comment": "check valid when 11 digits and starting with 1 even with punctuation"}
{"id": 966 ,"Comment": "identifies invalid when 11 digits does not start with a 1"}
{"id": 967 ,"Comment": "identifies invalid when 9 digits"}
{"id": 968 ,"Comment": "get string"}
{"id": 969 ,"Comment": "fold the line"}
{"id": 970 ,"Comment": "check the syntax"}
{"id": 971 ,"Comment": "get line"}
{"id": 972 ,"Comment": "get line"}
{"id": 973 ,"Comment": "get line"}
{"id": 974 ,"Comment": "copy mechanism"}
{"id": 975 ,"Comment": "remove comments"}
{"id": 976 ,"Comment": "remove trailing blanks"}
{"id": 977 ,"Comment": "find length"}
{"id": 978 ,"Comment": "celsius to fahrenheit"}
{"id": 979 ,"Comment": "print"}
{"id": 980 ,"Comment": "apply reverse"}
{"id": 981 ,"Comment": "remove trailing blanks"}
{"id": 982 ,"Comment": "get line"}
{"id": 983 ,"Comment": "get character"}
{"id": 984 ,"Comment": "print"}
{"id": 985 ,"Comment": "celsius to fahrenheit"}
{"id": 986 ,"Comment": "get length"}
{"id": 987 ,"Comment": "function puts"}
{"id": 988 ,"Comment": "get line"}
{"id": 989 ,"Comment": "invalid when more than 11 digits"}
{"id": 990 ,"Comment": "invalid with letters"}
{"id": 991 ,"Comment": "reverse"}
{"id": 992 ,"Comment": "identifies invalid if area code starts with 0"}
{"id": 993 ,"Comment": "identifies invalid if exchange code starts with 1"}
{"id": 994 ,"Comment": "identifies invalid if exchange code starts with 0"}
{"id": 995 ,"Comment": "identifies invalid with punctuations"}
{"id": 996 ,"Comment": "identifies invalid if area code starts with 1"}
{"id": 997 ,"Comment": "identifies invalid if exchange code starts with 1 on valid 11 digit number"}
{"id": 998 ,"Comment": "identifies invalid if area code starts with 1 on valid 11 digit number"}
{"id": 999 ,"Comment": "identifies invalid if exchange code starts with 0 on valid 11 digit number"}
{"id": 1000 ,"Comment": "identifies invalid if area code starts with 1 on valid 11 digit number"}
{"id": 1001 ,"Comment": "implementations by sending three elements"}
{"id": 1002 ,"Comment": "update"}
{"id": 1003 ,"Comment": "find maximum"}
{"id": 1004 ,"Comment": "find minimum"}
{"id": 1005 ,"Comment": "find sum"}
{"id": 1006 ,"Comment": "implementations by sending five elements"}
{"id": 1007 ,"Comment": "find age on venus"}
{"id": 1008 ,"Comment": "implementations by sending ten elements"}
{"id": 1009 ,"Comment": "find age on mercury"}
{"id": 1010 ,"Comment": "find age on earth"}
{"id": 1011 ,"Comment": "find age on neptune"}
{"id": 1012 ,"Comment": "find age on uranus"}
{"id": 1013 ,"Comment": "find age on mars"}
{"id": 1014 ,"Comment": "find age on saturn"}
{"id": 1015 ,"Comment": "find age on jupiter"}
{"id": 1016 ,"Comment": "apply tear down"}
{"id": 1017 ,"Comment": "release lists"}
{"id": 1018 ,"Comment": "create_error_message"}
{"id": 1019 ,"Comment": "provide invalid planet causes error"}
{"id": 1020 ,"Comment": "print elements"}
{"id": 1021 ,"Comment": "fold add"}
{"id": 1022 ,"Comment": "filter modulo"}
{"id": 1023 ,"Comment": "check lists match"}
{"id": 1024 ,"Comment": "map increment"}
{"id": 1025 ,"Comment": "fold multiply"}
{"id": 1026 ,"Comment": "append empty lists"}
{"id": 1027 ,"Comment": "call delete list"}
{"id": 1028 ,"Comment": "append list to empty list"}
{"id": 1029 ,"Comment": "append empty list to list"}
{"id": 1030 ,"Comment": "fold divide"}
{"id": 1031 ,"Comment": "append non empty lists"}
{"id": 1032 ,"Comment": "filter non empty list"}
{"id": 1033 ,"Comment": "filter empty list"}
{"id": 1034 ,"Comment": "find length of empty list"}
{"id": 1035 ,"Comment": "find length of non empty list"}
{"id": 1036 ,"Comment": "foldl direction dependent function applied to non empty list"}
{"id": 1037 ,"Comment": "map non empty list"}
{"id": 1038 ,"Comment": "foldl empty list"}
{"id": 1039 ,"Comment": "map empty list"}
{"id": 1040 ,"Comment": "foldl direction independent function applied to non empty list"}
{"id": 1041 ,"Comment": "reverse empty list"}
{"id": 1042 ,"Comment": "foldr empty list"}
{"id": 1043 ,"Comment": "foldr direction dependent function applied to non empty list"}
{"id": 1044 ,"Comment": "reverse non empty list"}
{"id": 1045 ,"Comment": "foldr direction independent function applied to non empty list"}
{"id": 1046 ,"Comment": "rows degenerate case with a single a row"}
{"id": 1047 ,"Comment": "rows largest possible diamond"}
{"id": 1048 ,"Comment": "rows smallest non degenerate case with odd diamond side length"}
{"id": 1049 ,"Comment": "rows degenerate case with number of row with 3 distinct groups of spaces"}
{"id": 1050 ,"Comment": "rows smallest non degenerate case with even diamond side length"}
{"id": 1051 ,"Comment": "handles cramped lists"}
{"id": 1052 ,"Comment": "count one word"}
{"id": 1053 ,"Comment": "multiple occurrence of a word"}
{"id": 1054 ,"Comment": "count one of each word"}
{"id": 1055 ,"Comment": "check solution"}
{"id": 1056 ,"Comment": "find with apostrophes"}
{"id": 1057 ,"Comment": "ignore punctuation"}
{"id": 1058 ,"Comment": "handles expanded lists"}
{"id": 1059 ,"Comment": "normalize case"}
{"id": 1060 ,"Comment": "include numbers"}
{"id": 1061 ,"Comment": "make lexicographic sort"}
{"id": 1062 ,"Comment": "find with quotations"}
{"id": 1063 ,"Comment": "multiple spaces not detected as a word"}
{"id": 1064 ,"Comment": "find substrings from the beginning"}
{"id": 1065 ,"Comment": "alternating word separators not detected as a word"}
{"id": 1066 ,"Comment": "find year not divisible by 4 in common year"}
{"id": 1067 ,"Comment": "lexicographic sort reverse"}
{"id": 1068 ,"Comment": "string sort"}
{"id": 1069 ,"Comment": "sort by number of distinct characters"}
{"id": 1070 ,"Comment": "sort by length"}
{"id": 1071 ,"Comment": "find year divisible by 4 not divisible by 100 in leap year"}
{"id": 1072 ,"Comment": "find year divisible by 4 and 5 is still a leap year"}
{"id": 1073 ,"Comment": "find year divisible by 2 not divisible by 4 in common year"}
{"id": 1074 ,"Comment": "find year divisible by 100 but not by 3 is still not a leap year"}
{"id": 1075 ,"Comment": "find year divisible by 100 not divisible by 400 in common year"}
{"id": 1076 ,"Comment": "find year divisible by 400 in leap year"}
{"id": 1077 ,"Comment": "perform plus1"}
{"id": 1078 ,"Comment": "find year divisible by 400 but not by 125 is still a leap year"}
{"id": 1079 ,"Comment": "perform plus"}
{"id": 1080 ,"Comment": "find year divisible by 200 not divisible by 400 in common year"}
{"id": 1081 ,"Comment": "perform minus1"}
{"id": 1082 ,"Comment": "perform minus"}
{"id": 1083 ,"Comment": "perform times 2"}
{"id": 1084 ,"Comment": "perform times"}
{"id": 1085 ,"Comment": "concatenate digits"}
{"id": 1086 ,"Comment": "input cells value can be set"}
{"id": 1087 ,"Comment": "perform spy"}
{"id": 1088 ,"Comment": "perform times 30"}
{"id": 1089 ,"Comment": "find big if three"}
{"id": 1090 ,"Comment": "input cells have value"}
{"id": 1091 ,"Comment": "compute cells take inputs in the right order"}
{"id": 1092 ,"Comment": "compute cells calculate initial value"}
{"id": 1093 ,"Comment": "compute cells can depend on other compute cells"}
{"id": 1094 ,"Comment": "compute cells update value when dependencies are changed"}
{"id": 1095 ,"Comment": "compute cells fire callbacks"}
{"id": 1096 ,"Comment": "callbacks only fire on change"}
{"id": 1097 ,"Comment": "callbacks can be added and removed"}
{"id": 1098 ,"Comment": "callbacks do not report already reported values"}
{"id": 1099 ,"Comment": "callbacks can fire from multiple cells"}
{"id": 1100 ,"Comment": "removing a callback multiple times doesnt interfere with other callbacks"}
{"id": 1101 ,"Comment": "callbacks only called once even if multiple dependencies change"}
{"id": 1102 ,"Comment": "find no multiples within limit"}
{"id": 1103 ,"Comment": "find more than one multiple withiin limit"}
{"id": 1104 ,"Comment": "callbacks not called if dependencies change but output value doesnt change"}
{"id": 1105 ,"Comment": "check one factor has multiples within limit"}
{"id": 1106 ,"Comment": "factors not relatively prime"}
{"id": 1107 ,"Comment": "find a much larger limit"}
{"id": 1108 ,"Comment": "each multiple is only counted once"}
{"id": 1109 ,"Comment": "find three factors"}
{"id": 1110 ,"Comment": "more than one factor with multiples within_limit"}
{"id": 1111 ,"Comment": "no factors means an empty sum"}
{"id": 1112 ,"Comment": "find some pairs of factors relatively prime and some not"}
{"id": 1113 ,"Comment": "find much larger factors"}
{"id": 1114 ,"Comment": "find one factor is a multiple of another"}
{"id": 1115 ,"Comment": "find all numbers that are multiples of 1"}
{"id": 1116 ,"Comment": "find only multiple of zero is zero"}
{"id": 1117 ,"Comment": "solutions using include exclude must extend to cardinality greater than 3"}
{"id": 1118 ,"Comment": "empty lists"}
{"id": 1119 ,"Comment": "factor 0 does not affect the sum of multiples of other factors"}
{"id": 1120 ,"Comment": "empty list within non empty list"}
{"id": 1121 ,"Comment": "find consecutive number"}
{"id": 1122 ,"Comment": "find non empty list contains empty list"}
{"id": 1123 ,"Comment": "find list equals itself"}
{"id": 1124 ,"Comment": "find different lists"}
{"id": 1125 ,"Comment": "false start"}
{"id": 1126 ,"Comment": "find middle of superlist"}
{"id": 1127 ,"Comment": "find sublist at start"}
{"id": 1128 ,"Comment": "find sublist at end"}
{"id": 1129 ,"Comment": "find the start of superlist"}
{"id": 1130 ,"Comment": "find sublist at middle"}
{"id": 1131 ,"Comment": "follow order to make a list"}
{"id": 1132 ,"Comment": "find second list missing element from first list"}
{"id": 1133 ,"Comment": "find first list missing additional digits from second list"}
{"id": 1134 ,"Comment": "find the end of superlist"}
{"id": 1135 ,"Comment": "find first list missing element from second list"}
{"id": 1136 ,"Comment": "single score with multiple letters"}
{"id": 1137 ,"Comment": "find different signs"}
{"id": 1138 ,"Comment": "find same digits but different numbers"}
{"id": 1139 ,"Comment": "compare map"}
{"id": 1140 ,"Comment": "find a single letter"}
{"id": 1141 ,"Comment": "find root of 25"}
{"id": 1142 ,"Comment": "find root of 4"}
{"id": 1143 ,"Comment": "find root of 1"}
{"id": 1144 ,"Comment": "multiple scores with multiple letters"}
{"id": 1145 ,"Comment": "multiple scores with differing numbers of letters"}
{"id": 1146 ,"Comment": "check white queen must have row on board"}
{"id": 1147 ,"Comment": "find root of 81"}
{"id": 1148 ,"Comment": "find root of 196"}
{"id": 1149 ,"Comment": "invalid if on same position"}
{"id": 1150 ,"Comment": "find root of 65025"}
{"id": 1151 ,"Comment": "check white queen must have column on board"}
{"id": 1152 ,"Comment": "find can attack on same row"}
{"id": 1153 ,"Comment": "check black queen must have row on board"}
{"id": 1154 ,"Comment": "find can not attack"}
{"id": 1155 ,"Comment": "check black queen must have column on board"}
{"id": 1156 ,"Comment": "check can attack on same column"}
{"id": 1157 ,"Comment": "check can attack on second diagonal"}
{"id": 1158 ,"Comment": "check can attack on third diagonal"}
{"id": 1159 ,"Comment": "check can attack on fourth diagonal"}
{"id": 1160 ,"Comment": "check can attack on first diagonal"}
{"id": 1161 ,"Comment": "find nth term"}
{"id": 1162 ,"Comment": "find single letter different strands"}
{"id": 1163 ,"Comment": "find empty strands"}
{"id": 1164 ,"Comment": "find nth term"}
{"id": 1165 ,"Comment": "find single identical strands"}
{"id": 1166 ,"Comment": "disallow empty first strand"}
{"id": 1167 ,"Comment": "disallow second strand when longer"}
{"id": 1168 ,"Comment": "find long identical strands"}
{"id": 1169 ,"Comment": "find long different strands"}
{"id": 1170 ,"Comment": "disallow first strand when longer"}
{"id": 1171 ,"Comment": "find date"}
{"id": 1172 ,"Comment": "find days"}
{"id": 1173 ,"Comment": "find is leap year"}
{"id": 1174 ,"Comment": "disallow empty second strand"}
{"id": 1175 ,"Comment": "construct date"}
{"id": 1176 ,"Comment": "find monteenth of May_2013"}
{"id": 1177 ,"Comment": "find date and time"}
{"id": 1178 ,"Comment": "find another date"}
{"id": 1179 ,"Comment": "find third date"}
{"id": 1180 ,"Comment": "find date and time with day rollover"}
{"id": 1181 ,"Comment": "find tuesteenth of March 2013"}
{"id": 1182 ,"Comment": "find tuesteenth of April 2013"}
{"id": 1183 ,"Comment": "find monteenth of September 2013"}
{"id": 1184 ,"Comment": "find monteenth of August 2013"}
{"id": 1185 ,"Comment": "find tuesteenth of August 2013"}
{"id": 1186 ,"Comment": "find thursteenth of June 2013"}
{"id": 1187 ,"Comment": "find wednesteenth of January 2013"}
{"id": 1188 ,"Comment": "find thursteenth of May 2013"}
{"id": 1189 ,"Comment": "find wednesteenth of February 2013"}
{"id": 1190 ,"Comment": "find wednesteenth of June 2013"}
{"id": 1191 ,"Comment": "find saturteenth of February 2013"}
{"id": 1192 ,"Comment": "find friteenth of September 2013"}
{"id": 1193 ,"Comment": "find friteenth of April 2013"}
{"id": 1194 ,"Comment": "find thursteenth of September 2013"}
{"id": 1195 ,"Comment": "find friteenth of August 2013"}
{"id": 1196 ,"Comment": "find sunteenth of October 2013"}
{"id": 1197 ,"Comment": "find sunteenth of May 2013"}
{"id": 1198 ,"Comment": "find saturteenth of April 2013"}
{"id": 1199 ,"Comment": "find saturteenth of October 2013"}
{"id": 1200 ,"Comment": "find sunteenth of June 2013"}
{"id": 1201 ,"Comment": "find first Wednesday of July 2013"}
{"id": 1202 ,"Comment": "find first Monday of March 2013"}
{"id": 1203 ,"Comment": "find first Tuesday of May 2013"}
{"id": 1204 ,"Comment": "find first Monday of April 2013"}
{"id": 1205 ,"Comment": "find first Tuesday of June 2013"}
{"id": 1206 ,"Comment": "find first Wednesday of August 2013"}
{"id": 1207 ,"Comment": "find first Friday of December 2013"}
{"id": 1208 ,"Comment": "find first Friday of November 2013"}
{"id": 1209 ,"Comment": "find first Thursday of October 2013"}
{"id": 1210 ,"Comment": "find first Thursday of September 2013"}
{"id": 1211 ,"Comment": "find first Sunday of April 2013"}
{"id": 1212 ,"Comment": "find first Sunday of March 2013"}
{"id": 1213 ,"Comment": "find first Saturday of February 2013"}
{"id": 1214 ,"Comment": "find second Monday of March 2013"}
{"id": 1215 ,"Comment": "find first Saturday of January 2013"}
{"id": 1216 ,"Comment": "find second Monday of April 2013"}
{"id": 1217 ,"Comment": "find second Wednesday of July 2013"}
{"id": 1218 ,"Comment": "find second Wednesday of August 2013"}
{"id": 1219 ,"Comment": "find second Tuesday of May 2013"}
{"id": 1220 ,"Comment": "find second Tuesday of June 2013"}
{"id": 1221 ,"Comment": "find second Thursday of October 2013"}
{"id": 1222 ,"Comment": "find second Saturday of January 2013"}
{"id": 1223 ,"Comment": "find second Friday of December 2013"}
{"id": 1224 ,"Comment": "find second Thursday of September 2013"}
{"id": 1225 ,"Comment": "find second Friday of November2013"}
{"id": 1226 ,"Comment": "find third Monday of April 2013"}
{"id": 1227 ,"Comment": "find third Monday of March 2013"}
{"id": 1228 ,"Comment": "find second Sunday of March 2013"}
{"id": 1229 ,"Comment": "find second Saturday of February 2013"}
{"id": 1230 ,"Comment": "find second Sunday of April 2013"}
{"id": 1231 ,"Comment": "find third Thursday of September 2013"}
{"id": 1232 ,"Comment": "find third Tuesday of May 2013"}
{"id": 1233 ,"Comment": "find third Tuesday of June_2013"}
{"id": 1234 ,"Comment": "find third Wednesday of July 2013"}
{"id": 1235 ,"Comment": "find third Wednesday of August 2013"}
{"id": 1236 ,"Comment": "find third Saturday of February 2013"}
{"id": 1237 ,"Comment": "find third Thursday of October 2013"}
{"id": 1238 ,"Comment": "find third Friday of December 2013"}
{"id": 1239 ,"Comment": "find third Friday of November 2013"}
{"id": 1240 ,"Comment": "find third Saturday of January 2013"}
{"id": 1241 ,"Comment": "find fourth Tuesday of May 2013"}
{"id": 1242 ,"Comment": "find fourth Monday of April 2013"}
{"id": 1243 ,"Comment": "find fourth Monday of March 2013"}
{"id": 1244 ,"Comment": "find third Sunday of April 2013"}
{"id": 1245 ,"Comment": "find third Sunday of March 2013"}
{"id": 1246 ,"Comment": "find fourth Wednesday of July 2013"}
{"id": 1247 ,"Comment": "find fourth Tuesday of June 2013"}
{"id": 1248 ,"Comment": "find fourth Thursday of October 2013"}
{"id": 1249 ,"Comment": "find fourth Wednesday of August 2013"}
{"id": 1250 ,"Comment": "find fourth Thursday of September 2013"}
{"id": 1251 ,"Comment": "find fourth Friday of November 2013"}
{"id": 1252 ,"Comment": "find fourth Sunday of March 2013"}
{"id": 1253 ,"Comment": "find fourth Saturday of January 2013"}
{"id": 1254 ,"Comment": "find fourth Friday of December 2013"}
{"id": 1255 ,"Comment": "find fourth Saturday of February 2013"}
{"id": 1256 ,"Comment": "find last Tuesday of June 2013"}
{"id": 1257 ,"Comment": "find last Monday of March 2013"}
{"id": 1258 ,"Comment": "find fourth Sunday of April 2013"}
{"id": 1259 ,"Comment": "find last Monday of April 2013"}
{"id": 1260 ,"Comment": "find last Tuesday of May 2013"}
{"id": 1261 ,"Comment": "find last Wednesday of July 2013"}
{"id": 1262 ,"Comment": "find last Wednesday of August 2013"}
{"id": 1263 ,"Comment": "find last Friday of November 2013"}
{"id": 1264 ,"Comment": "find last Thursday of September 2013"}
{"id": 1265 ,"Comment": "find last Thursday of October 2013"}
{"id": 1266 ,"Comment": "find last_Sunday_of_April_2013"}
{"id": 1267 ,"Comment": "find last_Friday_of_December_2013"}
{"id": 1268 ,"Comment": "find last_Saturday_of_January_2013"}
{"id": 1269 ,"Comment": "find last_Saturday_of_February_2013"}
{"id": 1270 ,"Comment": "find last_Sunday_of_March_2013"}
{"id": 1271 ,"Comment": "check zero"}
{"id": 1272 ,"Comment": "find last_Sunday_of_February_2015"}
{"id": 1273 ,"Comment": "find last_Wednesday_of_February_2012"}
{"id": 1274 ,"Comment": "find last_Wednesday_of_December_2014"}
{"id": 1275 ,"Comment": "find first_Friday_of_December_2012"}
{"id": 1276 ,"Comment": "find twenty"}
{"id": 1277 ,"Comment": "find twenty two"}
{"id": 1278 ,"Comment": "find one"}
{"id": 1279 ,"Comment": "find one hundred"}
{"id": 1280 ,"Comment": "find fourteen"}
{"id": 1281 ,"Comment": "find one hundred twenty three"}
{"id": 1282 ,"Comment": "find one thousand"}
{"id": 1283 ,"Comment": "find one million"}
{"id": 1284 ,"Comment": "find one thousand two hundred thirty four"}
{"id": 1285 ,"Comment": "find one million two thousand three hundred forty five"}
{"id": 1286 ,"Comment": "find one_billion"}
{"id": 1287 ,"Comment": "find a big number"}
{"id": 1288 ,"Comment": "find numbers below zero are out of range"}
{"id": 1289 ,"Comment": "find numbers above 999 999 999 999 are out of range"}
{"id": 1290 ,"Comment": "find number of primes under two"}
{"id": 1291 ,"Comment": "find firs prime"}
{"id": 1292 ,"Comment": "check limit is prime"}
{"id": 1293 ,"Comment": "find primes up to 10"}
{"id": 1294 ,"Comment": "check limit is prime and small max primes"}
{"id": 1295 ,"Comment": "find primes up to 1000"}
{"id": 1296 ,"Comment": "read a line into s and return length"}
{"id": 1297 ,"Comment": "right trim"}
{"id": 1298 ,"Comment": "replaces tabs with the proper number of blanks"}
{"id": 1299 ,"Comment": "reverses s's charaters in-place"}
{"id": 1300 ,"Comment": "copy 'from' into 'to'"}
{"id": 1301 ,"Comment": "check symbol is balanced or not"}
{"id": 1302 ,"Comment": "print information"}
{"id": 1303 ,"Comment": "replaces blanks with the minimum number of tabs and blanks"}
{"id": 1304 ,"Comment": "skip the blanks"}
{"id": 1305 ,"Comment": "find there is any quotation mark"}
{"id": 1306 ,"Comment": "standard library macros"}
{"id": 1307 ,"Comment": "skip the quote"}
{"id": 1308 ,"Comment": "count Symbols"}
{"id": 1309 ,"Comment": "skip the comment"}
{"id": 1310 ,"Comment": "skip the char"}
{"id": 1311 ,"Comment": "returns the first location in a string where any character from the string occurs"}
{"id": 1312 ,"Comment": "standard library ranges"}
{"id": 1313 ,"Comment": "apply squeeze"}
{"id": 1314 ,"Comment": "compute ranges"}
{"id": 1315 ,"Comment": "converts a string of hexadecimal digits into integer"}
{"id": 1316 ,"Comment": "set bits"}
{"id": 1317 ,"Comment": "returns the value of the integer x rotated to right by n positions"}
{"id": 1318 ,"Comment": "find size"}
{"id": 1319 ,"Comment": "invert"}
{"id": 1320 ,"Comment": "bitcount"}
{"id": 1321 ,"Comment": "copy string t to s and convert characters like newline and tab into visible escape sequences"}
{"id": 1322 ,"Comment": "escape to character"}
{"id": 1323 ,"Comment": "bin Search"}
{"id": 1324 ,"Comment": "expands shorthand notations like a-z in the string"}
{"id": 1325 ,"Comment": "converts upper case letters to lower case"}
{"id": 1326 ,"Comment": "converts the integer n into a base b character representation in the string"}
{"id": 1327 ,"Comment": "find is valid range"}
{"id": 1328 ,"Comment": "reverse the string"}
{"id": 1329 ,"Comment": "reverse the order of the characters in the string"}
{"id": 1330 ,"Comment": "convert n to characters in s"}
{"id": 1331 ,"Comment": "pop and return top value from stack"}
{"id": 1332 ,"Comment": "get a character"}
{"id": 1333 ,"Comment": "convert string s to double"}
{"id": 1334 ,"Comment": "return index of t in s"}
{"id": 1335 ,"Comment": "get next operator or numeric operand"}
{"id": 1336 ,"Comment": "push from stack"}
{"id": 1337 ,"Comment": "clear Stack"}
{"id": 1338 ,"Comment": "duplicate top"}
{"id": 1339 ,"Comment": "push character back on input"}
{"id": 1340 ,"Comment": "swap top two"}
{"id": 1341 ,"Comment": "print top"}
{"id": 1342 ,"Comment": "duplicate top"}
{"id": 1343 ,"Comment": "clear memory"}
{"id": 1344 ,"Comment": "get a character"}
{"id": 1345 ,"Comment": "math function"}
{"id": 1346 ,"Comment": "get a character"}
{"id": 1347 ,"Comment": "store variable"}
{"id": 1348 ,"Comment": "push back s onto the input"}
{"id": 1349 ,"Comment": "get a character"}
{"id": 1350 ,"Comment": "fetch variable"}
{"id": 1351 ,"Comment": "convert an integer into a string by calling a recursive routine"}
{"id": 1352 ,"Comment": "reverse inplace"}
{"id": 1353 ,"Comment": "convert n to characters in s recursive version"}
{"id": 1354 ,"Comment": "reverse a string"}
{"id": 1355 ,"Comment": "swap between numbers"}
{"id": 1356 ,"Comment": "copy at most n characters of string t to s"}
{"id": 1357 ,"Comment": "concatenate at most n characters of string t to string s"}
{"id": 1358 ,"Comment": "get float"}
{"id": 1359 ,"Comment": "get character"}
{"id": 1360 ,"Comment": "returns 1 if t occurs at the end of s, and zero otherwise"}
{"id": 1361 ,"Comment": "sortinto increasing order"}
{"id": 1362 ,"Comment": "concatenate at most n characters of string t to string s"}
{"id": 1363 ,"Comment": "copy at most n characters of string t to s"}
{"id": 1364 ,"Comment": "swap between numbers"}
{"id": 1365 ,"Comment": "write output lines"}
{"id": 1366 ,"Comment": "find month name"}
{"id": 1367 ,"Comment": "read lines"}
{"id": 1368 ,"Comment": "return pointer to n characters"}
{"id": 1369 ,"Comment": "find day of year"}
{"id": 1370 ,"Comment": "find month day"}
{"id": 1371 ,"Comment": "compare string"}
{"id": 1372 ,"Comment": "find day_of_year"}
{"id": 1373 ,"Comment": "find month_day"}
{"id": 1374 ,"Comment": "pointer to the compare function corresponding to the input option"}
{"id": 1375 ,"Comment": "expand argument"}
{"id": 1376 ,"Comment": "compare number"}
{"id": 1377 ,"Comment": "compare string"}
{"id": 1378 ,"Comment": "pointer to the compare function corresponding to the input option"}
{"id": 1379 ,"Comment": "compare number"}
{"id": 1380 ,"Comment": "compare string"}
{"id": 1381 ,"Comment": "get character"}
{"id": 1382 ,"Comment": "expand argument"}
{"id": 1383 ,"Comment": "perform directory-order comparison--compare only letters, numbers and blanks"}
{"id": 1384 ,"Comment": "get token"}
{"id": 1385 ,"Comment": "compare fields according to the field pos entered by user"}
{"id": 1386 ,"Comment": "print error message, set state flag to FAIL"}
{"id": 1387 ,"Comment": "parse a direct declarator "}
{"id": 1388 ,"Comment": "find is equal or not"}
{"id": 1389 ,"Comment": "convert word descriptions to declarations"}
{"id": 1390 ,"Comment": "parse a declarator"}
{"id": 1391 ,"Comment": "return 1 if token is type-qualifier otherwise return 0"}
{"id": 1392 ,"Comment": "return 1 if token is a type-specifier otherwise return 0"}
{"id": 1393 ,"Comment": "parse a declarations-specifier"}
{"id": 1394 ,"Comment": "parse parameter-declaration"}
{"id": 1395 ,"Comment": "parse a direct declarator "}
{"id": 1396 ,"Comment": "free allocated heap memory of node tree"}
{"id": 1397 ,"Comment": "make a duplicate of s"}
{"id": 1398 ,"Comment": "alocate memory to new tree node"}
{"id": 1399 ,"Comment": "find word"}
{"id": 1400 ,"Comment": "get word"}
{"id": 1401 ,"Comment": "print tree"}
{"id": 1402 ,"Comment": "add a node"}
{"id": 1403 ,"Comment": "set current node's flag variable and the found variable to 1"}
{"id": 1404 ,"Comment": "check match"}
{"id": 1405 ,"Comment": "set current node's flag variable and the found variable to 1"}
{"id": 1406 ,"Comment": "frees allocated heap memory of linked list"}
{"id": 1407 ,"Comment": "add a node with w"}
{"id": 1408 ,"Comment": "frees allocated heap memory of tree"}
{"id": 1409 ,"Comment": "preorder print of list p"}
{"id": 1410 ,"Comment": "in order print of tree p"}
{"id": 1411 ,"Comment": "add a node with list"}
{"id": 1412 ,"Comment": "prints content of hashtable and apply linear scan "}
{"id": 1413 ,"Comment": "free table's allocated memory from heap"}
{"id": 1414 ,"Comment": "copy nodes in root into p according to frequency of occurrence"}
{"id": 1415 ,"Comment": "performs inorder traversal on root and creates a BST p according to frequency of occurrence"}
{"id": 1416 ,"Comment": "look for s in hashtab"}
{"id": 1417 ,"Comment": "form hash value for string s"}
{"id": 1418 ,"Comment": "prints content of hashtable and linear scan"}
{"id": 1419 ,"Comment": "remove name and def in hash table"}
{"id": 1420 ,"Comment": "put name and def in hashtab "}
{"id": 1421 ,"Comment": "push into stack"}
{"id": 1422 ,"Comment": "apply parse"}
{"id": 1423 ,"Comment": "increment line's length by the number of actually printed characters"}
{"id": 1424 ,"Comment": "copy the rest of the line int s and return length of s"}
{"id": 1425 ,"Comment": "scanf analogous to minprintf"}
{"id": 1426 ,"Comment": "compare files"}
{"id": 1427 ,"Comment": "print file"}
{"id": 1428 ,"Comment": "load file"}
{"id": 1429 ,"Comment": "open file"}
{"id": 1430 ,"Comment": "find pattern"}
{"id": 1431 ,"Comment": "find error"}
{"id": 1432 ,"Comment": "file copy"}
{"id": 1433 ,"Comment": "allocate and flush output buffer "}
{"id": 1434 ,"Comment": "print print header"}
{"id": 1435 ,"Comment": "allocate and fill input buffer"}
{"id": 1436 ,"Comment": "open file"}
{"id": 1437 ,"Comment": "read directory entries in sequence"}
{"id": 1438 ,"Comment": "write unwritten buffered data"}
{"id": 1439 ,"Comment": "close file"}
{"id": 1440 ,"Comment": "sets the file position indicator for fp "}
{"id": 1441 ,"Comment": "print file"}
{"id": 1442 ,"Comment": "close directory opened by opendir"}
{"id": 1443 ,"Comment": "open a directory for readdir calls"}
{"id": 1444 ,"Comment": "print file"}
{"id": 1445 ,"Comment": "apply fcn to all files in dir"}
{"id": 1446 ,"Comment": "print size of file name"}
{"id": 1447 ,"Comment": "print"}
{"id": 1448 ,"Comment": "format unix time into local time"}
{"id": 1449 ,"Comment": "replaces tabs with the proper number of blanks"}
{"id": 1450 ,"Comment": "put block ap in free list"}
{"id": 1451 ,"Comment": "general-purpose storage allocator"}
{"id": 1452 ,"Comment": "general-purpose storage allocator"}
{"id": 1453 ,"Comment": " ask system for more memory"}
{"id": 1454 ,"Comment": "extracts topstops positions from command line arguments"}
{"id": 1455 ,"Comment": "replaces tabs with the proper number of blanks"}
{"id": 1456 ,"Comment": "expand argument"}
{"id": 1457 ,"Comment": "extracts topstops positions from command line arguments"}
{"id": 1458 ,"Comment": "return the number of blanks to the next tab stop position"}
{"id": 1459 ,"Comment": "remove comments"}
{"id": 1460 ,"Comment": "replaces blanks with the minimum number of tabs and blanks"}
{"id": 1461 ,"Comment": "return the next tab stop position from tabList"}
{"id": 1462 ,"Comment": "check syntax"}
{"id": 1463 ,"Comment": "get string"}
{"id": 1464 ,"Comment": "remove trailing blanks"}
{"id": 1465 ,"Comment": "find length"}
{"id": 1466 ,"Comment": "get string"}
{"id": 1467 ,"Comment": "fold line"}
{"id": 1468 ,"Comment": "get line"}
{"id": 1469 ,"Comment": "copy"}
{"id": 1470 ,"Comment": "convert celsius to fahrenheit"}
{"id": 1471 ,"Comment": "dirReduc"}
{"id": 1472 ,"Comment": "maze runner"}
{"id": 1473 ,"Comment": "index to position"}
{"id": 1474 ,"Comment": "find none negative"}
{"id": 1475 ,"Comment": "decrease"}
{"id": 1476 ,"Comment": "increase"}
{"id": 1477 ,"Comment": "scramble"}
{"id": 1478 ,"Comment": "find maximum Sequence"}
{"id": 1479 ,"Comment": "find granny distance"}
{"id": 1480 ,"Comment": "find opposite leg"}
{"id": 1481 ,"Comment": "tour related problem"}
{"id": 1482 ,"Comment": "encode"}
{"id": 1483 ,"Comment": "search"}
{"id": 1484 ,"Comment": "spin words"}
{"id": 1485 ,"Comment": "extract distances"}
{"id": 1486 ,"Comment": "apply joining"}
{"id": 1487 ,"Comment": "filter friend towns"}
{"id": 1488 ,"Comment": "josephus survivor"}
{"id": 1489 ,"Comment": "beeramid"}
{"id": 1490 ,"Comment": "check valid parentheses"}
{"id": 1491 ,"Comment": "apply potentiation"}
{"id": 1492 ,"Comment": "display initial message"}
{"id": 1493 ,"Comment": "direction reduction"}
{"id": 1494 ,"Comment": "duplicate encoder"}
{"id": 1495 ,"Comment": "validate array"}
{"id": 1496 ,"Comment": "request side"}
{"id": 1497 ,"Comment": "sum of values"}
{"id": 1498 ,"Comment": "display output message"}
{"id": 1499 ,"Comment": "display final message"}
{"id": 1500 ,"Comment": "display initial message"}
{"id": 1501 ,"Comment": "find perimeter of square"}
{"id": 1502 ,"Comment": "find multiplication table"}
{"id": 1503 ,"Comment": "display final message"}
{"id": 1504 ,"Comment": "display output message"}
{"id": 1505 ,"Comment": "find greatest divider"}
{"id": 1506 ,"Comment": "find odd or even"}
{"id": 1507 ,"Comment": "request value"}
{"id": 1508 ,"Comment": "display final message"}
{"id": 1509 ,"Comment": "find pattern"}
{"id": 1510 ,"Comment": "find alphabet position"}
{"id": 1511 ,"Comment": "find solution"}
{"id": 1512 ,"Comment": "find greatest value"}
{"id": 1513 ,"Comment": "find is valid ip"}
{"id": 1514 ,"Comment": "clear variables"}
{"id": 1515 ,"Comment": "find outlier"}
{"id": 1516 ,"Comment": "find number of months"}
{"id": 1517 ,"Comment": "game beeramid"}
{"id": 1518 ,"Comment": "find choose"}
{"id": 1519 ,"Comment": "request position in the game"}
{"id": 1520 ,"Comment": "find adjacent elements product"}
{"id": 1521 ,"Comment": "find kth term"}
{"id": 1522 ,"Comment": "make upper case"}
{"id": 1523 ,"Comment": "find positive sum"}
{"id": 1524 ,"Comment": "find sum of values"}
{"id": 1525 ,"Comment": "compare values"}
{"id": 1526 ,"Comment": "liters conversion"}
{"id": 1527 ,"Comment": "apply encode"}
{"id": 1528 ,"Comment": "request salary"}
{"id": 1529 ,"Comment": "find is prime"}
{"id": 1530 ,"Comment": "find sum of two smallest numbers"}
{"id": 1531 ,"Comment": "find number of year"}
{"id": 1532 ,"Comment": "validate"}
{"id": 1533 ,"Comment": "get sum"}
{"id": 1534 ,"Comment": "find new salary"}
{"id": 1535 ,"Comment": "request percentage increase"}
{"id": 1536 ,"Comment": "find outlier"}
{"id": 1537 ,"Comment": "find is square or not"}
{"id": 1538 ,"Comment": "find average values"}
{"id": 1539 ,"Comment": "find longest repetition"}
{"id": 1540 ,"Comment": "check for leap year"}
{"id": 1541 ,"Comment": "find sum of values"}
{"id": 1542 ,"Comment": "find odd and even number"}
{"id": 1543 ,"Comment": "find who is next in the game"}
{"id": 1544 ,"Comment": "read age"}
{"id": 1545 ,"Comment": "xo game"}
{"id": 1546 ,"Comment": "clonewars game"}
{"id": 1547 ,"Comment": "find percentage of students"}
{"id": 1548 ,"Comment": "find factorial"}
{"id": 1549 ,"Comment": "make sum of ages"}
{"id": 1550 ,"Comment": "find average of ages"}
{"id": 1551 ,"Comment": "change first by last"}
{"id": 1552 ,"Comment": "request value"}
{"id": 1553 ,"Comment": "request first value"}
{"id": 1554 ,"Comment": "find parts of sums"}
{"id": 1555 ,"Comment": "find is prime number"}
{"id": 1556 ,"Comment": "double a number"}
{"id": 1557 ,"Comment": "request value"}
{"id": 1558 ,"Comment": "request second value"}
{"id": 1559 ,"Comment": "find potentiation"}
{"id": 1560 ,"Comment": "find approved number of students"}
{"id": 1561 ,"Comment": "find is sorted and how"}
{"id": 1562 ,"Comment": "find current location"}
{"id": 1563 ,"Comment": "score hand"}
{"id": 1564 ,"Comment": "apply partition"}
{"id": 1565 ,"Comment": "swap between numbers"}
{"id": 1566 ,"Comment": "find number"}
{"id": 1567 ,"Comment": "quick sort"}
{"id": 1568 ,"Comment": "iterPi game"}
{"id": 1569 ,"Comment": "change elements of positions"}
{"id": 1570 ,"Comment": "find fortune"}
{"id": 1571 ,"Comment": "request second position"}
{"id": 1572 ,"Comment": "request first position"}
{"id": 1573 ,"Comment": "get number"}
{"id": 1574 ,"Comment": "find square perimeter"}
{"id": 1575 ,"Comment": "find ideal weight"}
{"id": 1576 ,"Comment": "find solution"}
{"id": 1577 ,"Comment": "calculate damage"}
{"id": 1578 ,"Comment": "discover original price"}
{"id": 1579 ,"Comment": "create phone number"}
{"id": 1580 ,"Comment": "find missing alphabets"}
{"id": 1581 ,"Comment": "find greatest value v2"}
{"id": 1582 ,"Comment": "find negative elements"}
{"id": 1583 ,"Comment": "filling array fibonacci"}
{"id": 1584 ,"Comment": "find fruit"}
{"id": 1585 ,"Comment": "find is approved or not"}
{"id": 1586 ,"Comment": "display initial message"}
{"id": 1587 ,"Comment": "request score"}
{"id": 1588 ,"Comment": "request first value"}
{"id": 1589 ,"Comment": "find number of year"}
{"id": 1590 ,"Comment": "find even index"}
{"id": 1591 ,"Comment": "find negative elements"}
{"id": 1592 ,"Comment": "show all array"}
{"id": 1593 ,"Comment": "find greatest commom divisor"}
{"id": 1594 ,"Comment": "find likes"}
{"id": 1595 ,"Comment": "find queue time"}
{"id": 1596 ,"Comment": "find correct tail"}
{"id": 1597 ,"Comment": "request second value"}
{"id": 1598 ,"Comment": "apply expand"}
{"id": 1599 ,"Comment": "find next cell"}
{"id": 1600 ,"Comment": "find any row"}
{"id": 1601 ,"Comment": "find any column"}
{"id": 1602 ,"Comment": "count number"}
{"id": 1603 ,"Comment": "request natural number"}
{"id": 1604 ,"Comment": "apply trim"}
{"id": 1605 ,"Comment": "greet"}
{"id": 1606 ,"Comment": "get generation"}
{"id": 1607 ,"Comment": "find next gen"}
{"id": 1608 ,"Comment": "request position"}
{"id": 1609 ,"Comment": "find nth term"}
{"id": 1610 ,"Comment": "request natural number"}
{"id": 1611 ,"Comment": "invert values"}
{"id": 1612 ,"Comment": "count positives sum negatives"}
{"id": 1613 ,"Comment": "get factorial"}
{"id": 1614 ,"Comment": "find prime number to each other"}
{"id": 1615 ,"Comment": "find even index"}
{"id": 1616 ,"Comment": "predict the age"}
{"id": 1617 ,"Comment": "reverse the words"}
{"id": 1618 ,"Comment": "get count"}
{"id": 1619 ,"Comment": "fix the meerkat"}
{"id": 1620 ,"Comment": "apply encode"}
{"id": 1621 ,"Comment": "apply smash"}
{"id": 1622 ,"Comment": "apply decode"}
{"id": 1623 ,"Comment": "apply invert"}
{"id": 1624 ,"Comment": "find power of digit"}
{"id": 1625 ,"Comment": "find the key"}
{"id": 1626 ,"Comment": "find disarium number"}
{"id": 1627 ,"Comment": "initialize cell"}
{"id": 1628 ,"Comment": "calculate a sum or product of a series of values"}
{"id": 1629 ,"Comment": "find clue index on board"}
{"id": 1630 ,"Comment": "remove possibility"}
{"id": 1631 ,"Comment": "find index"}
{"id": 1632 ,"Comment": "process of elimination"}
{"id": 1633 ,"Comment": "find is clue on row"}
{"id": 1634 ,"Comment": "constraint propagation"}
{"id": 1635 ,"Comment": "find edge clue initialization"}
{"id": 1636 ,"Comment": "solve puzzle"}
{"id": 1637 ,"Comment": "bouncing ball game"}
{"id": 1638 ,"Comment": "print board"}
{"id": 1639 ,"Comment": "find is completed or not"}
{"id": 1640 ,"Comment": "find number of laps"}
{"id": 1641 ,"Comment": "apply decode"}
{"id": 1642 ,"Comment": "maze runner game"}
{"id": 1643 ,"Comment": "find apple and orange"}
{"id": 1644 ,"Comment": "apply potentiation"}
{"id": 1645 ,"Comment": "duplicate the encoder"}
{"id": 1646 ,"Comment": "display initial message"}
{"id": 1647 ,"Comment": "find direction reduction"}
{"id": 1648 ,"Comment": "find initial message"}
{"id": 1649 ,"Comment": "find the sum of the values"}
{"id": 1650 ,"Comment": "find output message"}
{"id": 1651 ,"Comment": "validate an array"}
{"id": 1652 ,"Comment": "display final message"}
{"id": 1653 ,"Comment": "find multiplication table"}
{"id": 1654 ,"Comment": "find the perimeter of a square"}
{"id": 1655 ,"Comment": "request a value"}
{"id": 1656 ,"Comment": "find greatest divider"}
{"id": 1657 ,"Comment": "request the Side"}
{"id": 1658 ,"Comment": "find odd or even"}
{"id": 1659 ,"Comment": "find greatest value"}
{"id": 1660 ,"Comment": "find ip is valid or not"}
{"id": 1661 ,"Comment": "find a solution"}
{"id": 1662 ,"Comment": "find the alphabet position"}
{"id": 1663 ,"Comment": "find the pattern"}
{"id": 1664 ,"Comment": "find an outlier"}
{"id": 1665 ,"Comment": "number of months"}
{"id": 1666 ,"Comment": "choose"}
{"id": 1667 ,"Comment": "request the position"}
{"id": 1668 ,"Comment": "clear the variables"}
{"id": 1669 ,"Comment": "find product of an adjacent elements"}
{"id": 1670 ,"Comment": "find kth term"}
{"id": 1671 ,"Comment": "find upper case"}
{"id": 1672 ,"Comment": "apply encode"}
{"id": 1673 ,"Comment": "beeramid game"}
{"id": 1674 ,"Comment": "find sum of values"}
{"id": 1675 ,"Comment": "complement"}
{"id": 1676 ,"Comment": "convert to liters"}
{"id": 1677 ,"Comment": "find positive sum"}
{"id": 1678 ,"Comment": "find the number is prime or not"}
{"id": 1679 ,"Comment": "find the sum of two smallest numbers"}
{"id": 1680 ,"Comment": "validate a number"}
{"id": 1681 ,"Comment": "find the number of year"}
{"id": 1682 ,"Comment": "request percentage increase"}
{"id": 1683 ,"Comment": "request salary"}
{"id": 1684 ,"Comment": "find sum of numbers"}
{"id": 1685 ,"Comment": "find is square or not"}
{"id": 1686 ,"Comment": "find new salary"}
{"id": 1687 ,"Comment": "find the sum of values"}
{"id": 1688 ,"Comment": "find is leap year"}
{"id": 1689 ,"Comment": "find odd or even number"}
{"id": 1690 ,"Comment": "find longest repetition"}
{"id": 1691 ,"Comment": "find average values"}
{"id": 1692 ,"Comment": "find an outlier"}
{"id": 1693 ,"Comment": "find the percentage of students"}
{"id": 1694 ,"Comment": "find who is next"}
{"id": 1695 ,"Comment": "clonewars game"}
{"id": 1696 ,"Comment": "xo game"}
{"id": 1697 ,"Comment": "find factorial of a number"}
{"id": 1698 ,"Comment": "find age"}
{"id": 1699 ,"Comment": "change first element by last"}
{"id": 1700 ,"Comment": "find sum of ages"}
{"id": 1701 ,"Comment": "find average ages"}
{"id": 1702 ,"Comment": "request a value"}
{"id": 1703 ,"Comment": "request first value"}
{"id": 1704 ,"Comment": "double a number"}
{"id": 1705 ,"Comment": "find a prime number"}
{"id": 1706 ,"Comment": "find the location"}
{"id": 1707 ,"Comment": "find parts of sums"}
{"id": 1708 ,"Comment": "find is sorted and how"}
{"id": 1709 ,"Comment": "request second value"}
{"id": 1710 ,"Comment": "approved students"}
{"id": 1711 ,"Comment": "apply potentiation"}
{"id": 1712 ,"Comment": "perform quick sort"}
{"id": 1713 ,"Comment": "apply partition"}
{"id": 1714 ,"Comment": "score hand"}
{"id": 1715 ,"Comment": "find a number"}
{"id": 1716 ,"Comment": "swap between numbers"}
{"id": 1717 ,"Comment": "change positions of elements"}
{"id": 1718 ,"Comment": "request for the first position"}
{"id": 1719 ,"Comment": "request for the second position"}
{"id": 1720 ,"Comment": "iterPi game"}
{"id": 1721 ,"Comment": "find square perimeter"}
{"id": 1722 ,"Comment": "find fortune"}
{"id": 1723 ,"Comment": "find birthday cake candles"}
{"id": 1724 ,"Comment": "balance the left"}
{"id": 1725 ,"Comment": "find the mean of numbers"}
{"id": 1726 ,"Comment": "apply quick sort"}
{"id": 1727 ,"Comment": "swap the integers"}
{"id": 1728 ,"Comment": "display the numbers"}
{"id": 1729 ,"Comment": "find the work"}
{"id": 1730 ,"Comment": "find the maximum value"}
{"id": 1731 ,"Comment": "find the minimum value"}
{"id": 1732 ,"Comment": "find the sum of the values"}
{"id": 1733 ,"Comment": "find the factorial"}
{"id": 1734 ,"Comment": "find the distance"}
{"id": 1735 ,"Comment": "check"}
{"id": 1736 ,"Comment": "find the notes"}
{"id": 1737 ,"Comment": "reverse an element"}
{"id": 1738 ,"Comment": "find the total expense"}
{"id": 1739 ,"Comment": "find the gross salary"}
{"id": 1740 ,"Comment": "check valid triangles"}
{"id": 1741 ,"Comment": "display the numbers"}
{"id": 1742 ,"Comment": "find the previous number"}
{"id": 1743 ,"Comment": "find is leap or not"}
{"id": 1744 ,"Comment": "find the next number"}
{"id": 1745 ,"Comment": "find the lowest common multiple"}
{"id": 1746 ,"Comment": "find the square of a number"}
{"id": 1747 ,"Comment": "find greatest common divisor"}
{"id": 1748 ,"Comment": "find the palindrome"}
{"id": 1749 ,"Comment": "find the coin"}
{"id": 1750 ,"Comment": "find the prime number"}
{"id": 1751 ,"Comment": "check"}
{"id": 1752 ,"Comment": "find highest common factor"}
{"id": 1753 ,"Comment": "find the prime number"}
{"id": 1754 ,"Comment": "get long long integer"}
{"id": 1755 ,"Comment": "get get double"}
{"id": 1756 ,"Comment": "get float"}
{"id": 1757 ,"Comment": "retry"}
{"id": 1758 ,"Comment": "get an integer"}
{"id": 1759 ,"Comment": "get a string"}
{"id": 1760 ,"Comment": "direction reduction"}
{"id": 1761 ,"Comment": "reverse a card"}
{"id": 1762 ,"Comment": "apply merge sort"}
{"id": 1763 ,"Comment": "merge the numbers"}
{"id": 1764 ,"Comment": "apply binary search"}
{"id": 1765 ,"Comment": "check power"}
{"id": 1766 ,"Comment": "find farmer and his plot"}
{"id": 1767 ,"Comment": "find the grade"}
{"id": 1768 ,"Comment": "find the bit difference"}
{"id": 1769 ,"Comment": "find square or not"}
{"id": 1770 ,"Comment": "find disarium number"}
{"id": 1771 ,"Comment": "find flying jet"}
{"id": 1772 ,"Comment": "find position of set bit"}
{"id": 1773 ,"Comment": "find factorial of a number"}
{"id": 1774 ,"Comment": "find keypad typing"}
{"id": 1775 ,"Comment": "check number containing 0s and 1s"}
{"id": 1776 ,"Comment": "generate binary number"}
{"id": 1777 ,"Comment": "find the fibbanocci"}
{"id": 1778 ,"Comment": "find number of paths"}
{"id": 1779 ,"Comment": "check odd divisors"}
{"id": 1780 ,"Comment": "find the permutation"}
{"id": 1781 ,"Comment": "find the factorial"}
{"id": 1782 ,"Comment": "find the sum of numbers"}
{"id": 1783 ,"Comment": "find the perfect number"}
{"id": 1784 ,"Comment": "find the repeated sum of digits"}
{"id": 1785 ,"Comment": "find the volume"}
{"id": 1786 ,"Comment": "find the sum of the series"}
{"id": 1787 ,"Comment": "find the prime number"}
{"id": 1788 ,"Comment": "find the sum of the prime number"}
{"id": 1789 ,"Comment": "find total surface area"}
{"id": 1790 ,"Comment": "find 1s complement"}
{"id": 1791 ,"Comment": "find the xor of all element"}
{"id": 1792 ,"Comment": "find the sum of digits"}
{"id": 1793 ,"Comment": "get into proto"}
{"id": 1794 ,"Comment": "Grade students"}
{"id": 1795 ,"Comment": "grid tour"}
{"id": 1796 ,"Comment": "find the Nth term"}
{"id": 1797 ,"Comment": "help Watson to escape"}
{"id": 1798 ,"Comment": "perform fast read"}
{"id": 1799 ,"Comment": "sort the numbers"}
{"id": 1800 ,"Comment": "make a number line jumps"}
{"id": 1801 ,"Comment": "find  min max sum"}
{"id": 1802 ,"Comment": "print 1 dimensional array"}
{"id": 1803 ,"Comment": "update a date"}
{"id": 1804 ,"Comment": "simple multiplication multisrm"}
{"id": 1805 ,"Comment": "remove a duplicates"}
{"id": 1806 ,"Comment": "find a leap year"}
{"id": 1807 ,"Comment": "swap a case"}
{"id": 1808 ,"Comment": "sort the node in a tree"}
{"id": 1809 ,"Comment": "split node in a tree"}
{"id": 1810 ,"Comment": "create node in a tree"}
{"id": 1811 ,"Comment": "search node in the tree"}
{"id": 1812 ,"Comment": "search node in the tree"}
{"id": 1813 ,"Comment": "apply preOrder"}
{"id": 1814 ,"Comment": "find the height of a tree"}
{"id": 1815 ,"Comment": "find different RNL"}
{"id": 1816 ,"Comment": "function to book room for male student"}
{"id": 1817 ,"Comment": "function to book room for female student"}
{"id": 1818 ,"Comment": "display all renting room in the female student block"}
{"id": 1819 ,"Comment": "display all renting room in the male student block"}
{"id": 1820 ,"Comment": "Check male telephone number is available inside the file"}
{"id": 1821 ,"Comment": "Check female telephone number is available inside the file"}
{"id": 1822 ,"Comment": "search male student details by using student telephone"}
{"id": 1823 ,"Comment": "search female student details by using student telephone"}
{"id": 1824 ,"Comment": "cancel booking from the male file"}
{"id": 1825 ,"Comment": "update booking detail for male by using student telephone"}
{"id": 1826 ,"Comment": "cancel booking from the female file"}
{"id": 1827 ,"Comment": "update booking detail for female by using student telephone"}
{"id": 1828 ,"Comment": "display staff menu"}
{"id": 1829 ,"Comment": "view all invoices records"}
{"id": 1830 ,"Comment": "check customer ID"}
{"id": 1831 ,"Comment": "get next line"}
{"id": 1832 ,"Comment": "search for a customer record"}
{"id": 1833 ,"Comment": "register customer function"}
{"id": 1834 ,"Comment": "view all customers function"}
{"id": 1835 ,"Comment": "delete customer record"}
{"id": 1836 ,"Comment": "update customer record"}
{"id": 1837 ,"Comment": "display total owned money"}
{"id": 1838 ,"Comment": "search by ID of person"}
{"id": 1839 ,"Comment": "update balance of Pci"}
{"id": 1840 ,"Comment": "find the hospitlization"}
{"id": 1841 ,"Comment": "search by plan pc"}
{"id": 1842 ,"Comment": "search by age"}
{"id": 1843 ,"Comment": "search by plan type Pc"}
{"id": 1844 ,"Comment": "display all records"}
{"id": 1845 ,"Comment": "find total annual"}
{"id": 1846 ,"Comment": "find total life time"}
{"id": 1847 ,"Comment": "find registered people"}
{"id": 1848 ,"Comment": "find the maximum array"}
{"id": 1849 ,"Comment": "perform test"}
{"id": 1850 ,"Comment": "find minimum distance of a star"}
{"id": 1851 ,"Comment": "print a star"}
{"id": 1852 ,"Comment": "print the solution for the star"}
{"id": 1853 ,"Comment": "find transaction for the atm machine"}
{"id": 1854 ,"Comment": "view the list from the bank management system"}
{"id": 1855 ,"Comment": "find the new account from the bank management system"}
{"id": 1856 ,"Comment": "make a list for delay"}
{"id": 1857 ,"Comment": "edit data from the bank management system"}
{"id": 1858 ,"Comment": "erase data from the  bank management system"}
{"id": 1859 ,"Comment": "find transaction from bank"}
{"id": 1860 ,"Comment": "close the account from bank"}
{"id": 1861 ,"Comment": "find intersection based on basic set operations"}
{"id": 1862 ,"Comment": "find interest rate"}
{"id": 1863 ,"Comment": "display menu"}
{"id": 1864 ,"Comment": "find difference based on basic set operations"}
{"id": 1865 ,"Comment": "find the cardinal product on basic set operations"}
{"id": 1866 ,"Comment": "apply bead sort"}
{"id": 1867 ,"Comment": "join the binary matrix"}
{"id": 1868 ,"Comment": "find the boolean product of matrix"}
{"id": 1869 ,"Comment": "find union set for the matrix"}
{"id": 1870 ,"Comment": "find the boolean product of matrix"}
{"id": 1871 ,"Comment": "find the matrix meet or not"}
{"id": 1872 ,"Comment": "find the preorder traversal "}
{"id": 1873 ,"Comment": "find the postorder traversal"}
{"id": 1874 ,"Comment": "join the binary matrix"}
{"id": 1875 ,"Comment": "find the matrix meet or not"}
{"id": 1876 ,"Comment": "find the inorder traversal "}
{"id": 1877 ,"Comment": "insert a node in the tree"}
{"id": 1878 ,"Comment": "search the appropriate position to insert the new node"}
{"id": 1879 ,"Comment": "create a node"}
{"id": 1880 ,"Comment": "apply bogo sort"}
{"id": 1881 ,"Comment": "apply recursive bubble sort"}
{"id": 1882 ,"Comment": "apply iterative bubble sort"}
{"id": 1883 ,"Comment": "find key"}
{"id": 1884 ,"Comment": "find is sorted for bogo sort"}
{"id": 1885 ,"Comment": "shuffle in bogo sort"}
{"id": 1886 ,"Comment": "get digit for bucket sort"}
{"id": 1887 ,"Comment": "find card from number"}
{"id": 1888 ,"Comment": "find the largest element"}
{"id": 1889 ,"Comment": "display the bucket sort"}
{"id": 1890 ,"Comment": "perform radix sort"}
{"id": 1891 ,"Comment": "make ranking to string"}
{"id": 1892 ,"Comment": "find card from letters"}
{"id": 1893 ,"Comment": "print card"}
{"id": 1894 ,"Comment": "find suit letter"}
{"id": 1895 ,"Comment": "find value and letter"}
{"id": 1896 ,"Comment": "apply comb sort"}
{"id": 1897 ,"Comment": "apply cockTail  sort"}
{"id": 1898 ,"Comment": "check if first number is greater than second number"}
{"id": 1899 ,"Comment": "assert card is valid "}
{"id": 1900 ,"Comment": "print triangle"}
{"id": 1901 ,"Comment": "find find next gap in comb sort"}
{"id": 1902 ,"Comment": "provide computer repair service"}
{"id": 1903 ,"Comment": "provide computer repair service"}
{"id": 1904 ,"Comment": "find maximum value in comb sort"}
{"id": 1905 ,"Comment": "provide computer repair service"}
{"id": 1906 ,"Comment": "provide computer repair service"}
{"id": 1907 ,"Comment": "provide computer repair service"}
{"id": 1908 ,"Comment": "provide computer repair service"}
{"id": 1909 ,"Comment": "provide computer repair service"}
{"id": 1910 ,"Comment": "provide computer repair service"}
{"id": 1911 ,"Comment": "view visit for service"}
{"id": 1912 ,"Comment": "show all payment"}
{"id": 1913 ,"Comment": "search visit for computer repair service"}
{"id": 1914 ,"Comment": "visit detail for repair service"}
{"id": 1915 ,"Comment": "new visit for computer repair service"}
{"id": 1916 ,"Comment": "update payment for computer repair"}
{"id": 1917 ,"Comment": "sign up for computer repair service"}
{"id": 1918 ,"Comment": "update visit for computer repair"}
{"id": 1919 ,"Comment": "cancel visit for computer repair"}
{"id": 1920 ,"Comment": "log in for computer repair service"}
{"id": 1921 ,"Comment": "display menu page"}
{"id": 1922 ,"Comment": "print array for counting sort"}
{"id": 1923 ,"Comment": "display admin menu"}
{"id": 1924 ,"Comment": "print counts"}
{"id": 1925 ,"Comment": "free counts"}
{"id": 1926 ,"Comment": "apply counting sort"}
{"id": 1927 ,"Comment": "add count"}
{"id": 1928 ,"Comment": "create counts"}
{"id": 1929 ,"Comment": "display payment paid and unpaid from all records"}
{"id": 1930 ,"Comment": "display  visit function"}
{"id": 1931 ,"Comment": "create visit function"}
{"id": 1932 ,"Comment": "search visit function"}
{"id": 1933 ,"Comment": "log up for management system"}
{"id": 1934 ,"Comment": "delete visit record function"}
{"id": 1935 ,"Comment": "display staff menu"}
{"id": 1936 ,"Comment": "update payment for management system"}
{"id": 1937 ,"Comment": "update service for management system"}
{"id": 1938 ,"Comment": "print hand deck"}
{"id": 1939 ,"Comment": "shuffle the deck"}
{"id": 1940 ,"Comment": "assert full deck"}
{"id": 1941 ,"Comment": "find whether it contains deck or not"}
{"id": 1942 ,"Comment": "log in for management system"}
{"id": 1943 ,"Comment": "stock update for departmental store"}
{"id": 1944 ,"Comment": "add staff for departmental store"}
{"id": 1945 ,"Comment": "display stock"}
{"id": 1946 ,"Comment": "display customer"}
{"id": 1947 ,"Comment": "display staff"}
{"id": 1948 ,"Comment": "add a dealer"}
{"id": 1949 ,"Comment": "stock quantity deduction"}
{"id": 1950 ,"Comment": "update customer for departmental store"}
{"id": 1951 ,"Comment": "check sale for departmental store"}
{"id": 1952 ,"Comment": "contact dealer for  departmental store"}
{"id": 1953 ,"Comment": "delete doubly linked list"}
{"id": 1954 ,"Comment": "insert doubly linked list"}
{"id": 1955 ,"Comment": "view doubly linked list"}
{"id": 1956 ,"Comment": "find difference"}
{"id": 1957 ,"Comment": "dijsktra algorithm"}
{"id": 1958 ,"Comment": "apply extended euclidean"}
{"id": 1959 ,"Comment": "apply stats array"}
{"id": 1960 ,"Comment": "read linked list"}
{"id": 1961 ,"Comment": "apply stats linked list"}
{"id": 1962 ,"Comment": "read array"}
{"id": 1963 ,"Comment": "greatest common divisor"}
{"id": 1964 ,"Comment": "compare the cards"}
{"id": 1965 ,"Comment": "flush suit"}
{"id": 1966 ,"Comment": "get largest element"}
{"id": 1967 ,"Comment": "get match index"}
{"id": 1968 ,"Comment": "find secondary pair in evaluation"}
{"id": 1969 ,"Comment": "compare hands in evaluation"}
{"id": 1970 ,"Comment": "find whether n length is straight or not"}
{"id": 1971 ,"Comment": "find whether is straight or not"}
{"id": 1972 ,"Comment": "build hand from match"}
{"id": 1973 ,"Comment": "add number of tree"}
{"id": 1974 ,"Comment": "get number of word"}
{"id": 1975 ,"Comment": "find straight in evaluation"}
{"id": 1976 ,"Comment": "copy straight in evaluation"}
{"id": 1977 ,"Comment": "evaluate hand"}
{"id": 1978 ,"Comment": "apply talloc"}
{"id": 1979 ,"Comment": "add word to list"}
{"id": 1980 ,"Comment": "print the tree"}
{"id": 1981 ,"Comment": "print the words"}
{"id": 1982 ,"Comment": "apply traverse"}
{"id": 1983 ,"Comment": "allocate number and word"}
{"id": 1984 ,"Comment": "copy"}
{"id": 1985 ,"Comment": "reverse an element"}
{"id": 1986 ,"Comment": "get new line"}
{"id": 1987 ,"Comment": "allocate words"}
{"id": 1988 ,"Comment": "remove comments"}
{"id": 1989 ,"Comment": "find new position"}
{"id": 1990 ,"Comment": "expand tab"}
{"id": 1991 ,"Comment": "print line"}
{"id": 1992 ,"Comment": "get blank"}
{"id": 1993 ,"Comment": "apply squeezing"}
{"id": 1994 ,"Comment": "quotes either double or ordinary"}
{"id": 1995 ,"Comment": "find every quote in the word "}
{"id": 1996 ,"Comment": "convert a string of hexadecimal digits to integer"}
{"id": 1997 ,"Comment": "checking if any exist there in comment"}
{"id": 1998 ,"Comment": "convert c to lower case"}
{"id": 1999 ,"Comment": "count the number of bits"}
{"id": 2001 ,"Comment": "returns the first location in the string s1 where any character from string s2 occurs"}
{"id": 2002 ,"Comment": "returns x with the n bits that begin at position p inverted"}
{"id": 2003 ,"Comment": "return x with the n bits that begin at position p set to the rightmost n bits of y, leaving the other bits unchanged"}
{"id": 2004 ,"Comment": "convert n to characters in s"}
{"id": 2005 ,"Comment": "expands shorhand notations into equivalent complete list"}
{"id": 2006 ,"Comment": "convert the integer n into base b character representation in the string s"}
{"id": 2007 ,"Comment": "convert n to character in s"}
{"id": 2008 ,"Comment": "convert n to character in s"}
{"id": 2009 ,"Comment": "pop and return top value from stack"}
{"id": 2010 ,"Comment": "get a character"}
{"id": 2011 ,"Comment": "push character back on input"}
{"id": 2012 ,"Comment": "get next character or numeric operand"}
{"id": 2013 ,"Comment": "convert string s to double"}
{"id": 2014 ,"Comment": "set day of year from month and day"}
{"id": 2015 ,"Comment": "reverse string s in place "}
{"id": 2016 ,"Comment": "set month and day from day of year"}
{"id": 2017 ,"Comment": "push f onto value stack "}
{"id": 2018 ,"Comment": "tab for day"}
{"id": 2019 ,"Comment": "set month and day from day of year"}
{"id": 2020 ,"Comment": "function cube"}
{"id": 2021 ,"Comment": "search fibonacci number"}
{"id": 2022 ,"Comment": "search minimum fibonacci number"}
{"id": 2023 ,"Comment": "apply floor ceiling"}
{"id": 2024 ,"Comment": "apply ceiling"}
{"id": 2025 ,"Comment": "find future cards from deck"}
{"id": 2026 ,"Comment": "apply fuzzy sets minimum operation"}
{"id": 2027 ,"Comment": "apply fuzzy sets maximum operation"}
{"id": 2028 ,"Comment": "fuzzy compare operations"}
{"id": 2029 ,"Comment": "add future card"}
{"id": 2030 ,"Comment": "print the results"}
{"id": 2031 ,"Comment": "display patients details"}
{"id": 2032 ,"Comment": "find winning hand"}
{"id": 2033 ,"Comment": "point calculation"}
{"id": 2034 ,"Comment": "grade calculation"}
{"id": 2035 ,"Comment": "find patient information"}
{"id": 2036 ,"Comment": "display patients list"}
{"id": 2037 ,"Comment": "sort patients list by name"}
{"id": 2038 ,"Comment": "sort patients list by id"}
{"id": 2039 ,"Comment": "sort patients list by month"}
{"id": 2040 ,"Comment": "swap data"}
{"id": 2041 ,"Comment": "card in hand from string"}
{"id": 2042 ,"Comment": "find available room for patients"}
{"id": 2043 ,"Comment": "read input"}
{"id": 2044 ,"Comment": "find patient"}
{"id": 2045 ,"Comment": "find largest number factorial"}
{"id": 2046 ,"Comment": "reverse the string"}
{"id": 2047 ,"Comment": "multiply the number"}
{"id": 2048 ,"Comment": "find largest number factorial"}
{"id": 2049 ,"Comment": "convert to string"}
{"id": 2050 ,"Comment": "sum of matrix"}
{"id": 2051 ,"Comment": "get the sum of matrix"}
{"id": 2052 ,"Comment": "sum of matrix"}
{"id": 2053 ,"Comment": "sum of matrix"}
{"id": 2054 ,"Comment": "binary search tree"}
{"id": 2055 ,"Comment": "find deduction stock quantity for departmental store"}
{"id": 2056 ,"Comment": "contact with dealer for departmental store"}
{"id": 2057 ,"Comment": "add dealer for departmental store"}
{"id": 2058 ,"Comment": "update customer for departmental store"}
{"id": 2059 ,"Comment": "linear search list"}
{"id": 2060 ,"Comment": "display stock for departmental store"}
{"id": 2061 ,"Comment": "display staff for departmental store"}
{"id": 2062 ,"Comment": "sale product for departmental store"}
{"id": 2063 ,"Comment": "add staff for departmental store"}
{"id": 2064 ,"Comment": "update stock for departmental store"}
{"id": 2065 ,"Comment": "function to add matrices"}
{"id": 2066 ,"Comment": "export value"}
{"id": 2067 ,"Comment": "delete employee id"}
{"id": 2068 ,"Comment": "display customer for departmental store"}
{"id": 2069 ,"Comment": "multiply matrix"}
{"id": 2071 ,"Comment": "add matrix"}
{"id": 2072 ,"Comment": "take transpose of matrix"}
{"id": 2073 ,"Comment": "add matrix"}
{"id": 2074 ,"Comment": "print matrix"}
{"id": 2075 ,"Comment": "multiply matrices"}
{"id": 2076 ,"Comment": "print matrix"}
{"id": 2077 ,"Comment": "take transpose of matrix"}
{"id": 2078 ,"Comment": "print matrices"}
{"id": 2079 ,"Comment": "subtract matrix"}
{"id": 2080 ,"Comment": "reverseback solve the problem of returning back from point E to point S by using stacks"}
{"id": 2081 ,"Comment": "push insert data into stack"}
{"id": 2082 ,"Comment": "pop retrive data from stack"}
{"id": 2083 ,"Comment": "maximum number substraction in sequence"}
{"id": 2084 ,"Comment": "find maximum number in sequence"}
{"id": 2085 ,"Comment": "solve the problem  and display the information"}
{"id": 2086 ,"Comment": "retrive data from stack"}
{"id": 2087 ,"Comment": "clear data before the next run"}
{"id": 2088 ,"Comment": "function mazewalk used to solve our maze problem by finding the pather"}
{"id": 2089 ,"Comment": "a delay function used to animate the movmenet of the arrow on the screen"}
{"id": 2090 ,"Comment": "turn to play"}
{"id": 2091 ,"Comment": "clear data before the next run"}
{"id": 2092 ,"Comment": "print the movements of maze"}
{"id": 2093 ,"Comment": "print the reverse movement of maze"}
{"id": 2094 ,"Comment": "print the maze"}
{"id": 2095 ,"Comment": "click to play the game"}
{"id": 2096 ,"Comment": "turn for a free board"}
{"id": 2097 ,"Comment": "input a number"}
{"id": 2098 ,"Comment": "reveal the number"}
{"id": 2099 ,"Comment": "checking win or not"}
{"id": 2100 ,"Comment": "check the number is valid or not"}
{"id": 2101 ,"Comment": "print the board"}
{"id": 2102 ,"Comment": "reveal the number"}
{"id": 2103 ,"Comment": "reveal mines"}
{"id": 2104 ,"Comment": "determine to known mines"}
{"id": 2105 ,"Comment": "count number of mines"}
{"id": 2106 ,"Comment": "add random mine"}
{"id": 2107 ,"Comment": "make a board"}
{"id": 2108 ,"Comment": "naive string matching function declaration"}
{"id": 2109 ,"Comment": "appending the row as given order in the file of the process name"}
{"id": 2110 ,"Comment": "find is safe"}
{"id": 2111 ,"Comment": "number of the process is getting return one extra"}
{"id": 2112 ,"Comment": "storing the data in structure"}
{"id": 2113 ,"Comment": "general sorting funciton to sort it according to their entry time"}
{"id": 2114 ,"Comment": "solve the n queens"}
{"id": 2115 ,"Comment": "get the average "}
{"id": 2116 ,"Comment": "do the test"}
{"id": 2117 ,"Comment": "number to bits"}
{"id": 2118 ,"Comment": "the board"}
{"id": 2119 ,"Comment": "get number to bits"}
{"id": 2120 ,"Comment": "function to sign up for admin for pharmacy management system"}
{"id": 2121 ,"Comment": "function to update admin account for pharmacy management system"}
{"id": 2122 ,"Comment": "fuction to check admin id in the file for pharmacy management system"}
{"id": 2123 ,"Comment": "fraction"}
{"id": 2124 ,"Comment": "function to add medicine for pharmacy management system"}
{"id": 2125 ,"Comment": "function to read the receipts for pharmacy management system"}
{"id": 2126 ,"Comment": "function to delete medicine for pharmacy management system"}
{"id": 2127 ,"Comment": "function to update medicine details for pharmacy management system"}
{"id": 2128 ,"Comment": "function to search for medicine for pharmacy management system"}
{"id": 2129 ,"Comment": "fuction to check medicine id in the file for pharmacy management system"}
{"id": 2130 ,"Comment": "list out expiry dates of the medicines based on months"}
{"id": 2131 ,"Comment": "list medicines based on availability"}
{"id": 2132 ,"Comment": "find power"}
{"id": 2133 ,"Comment": "get seconds"}
{"id": 2134 ,"Comment": "list all  medicines"}
{"id": 2135 ,"Comment": "checking for the full of the queue"}
{"id": 2136 ,"Comment": "checking for the empty queue"}
{"id": 2137 ,"Comment": "sort the data"}
{"id": 2138 ,"Comment": "power calculation"}
{"id": 2139 ,"Comment": "top value in the queue"}
{"id": 2140 ,"Comment": "process the file"}
{"id": 2141 ,"Comment": "pushing the value in the queue"}
{"id": 2142 ,"Comment": "storing the data in structure"}
{"id": 2143 ,"Comment": "checking the size of the queue"}
{"id": 2144 ,"Comment": "removing the last value from the queue"}
{"id": 2145 ,"Comment": "function to cancel participant booking"}
{"id": 2146 ,"Comment": "function for update the participant payment"}
{"id": 2147 ,"Comment": "check program"}
{"id": 2148 ,"Comment": "check program"}
{"id": 2149 ,"Comment": "this function places an exit button on the screen and allows the user to exit the program"}
{"id": 2150 ,"Comment": "declare all the function"}
{"id": 2151 ,"Comment": "function for displaying the invoice recode"}
{"id": 2152 ,"Comment": "login function"}
{"id": 2153 ,"Comment": "checking the course code inside the staff file"}
{"id": 2154 ,"Comment": "system menu"}
{"id": 2155 ,"Comment": "showing the created courses"}
{"id": 2156 ,"Comment": "displaying all team building courses"}
{"id": 2157 ,"Comment": "displaying all corporate career growth courses"}
{"id": 2158 ,"Comment": "displaying all communications courses"}
{"id": 2159 ,"Comment": "displaying all team building courses"}
{"id": 2160 ,"Comment": "displaying all software design courses"}
{"id": 2161 ,"Comment": "show the participant details"}
{"id": 2162 ,"Comment": "show all the booked courses and bill details"}
{"id": 2163 ,"Comment": "displaying all web development courses"}
{"id": 2164 ,"Comment": "displaying all cloud computing courses"}
{"id": 2165 ,"Comment": "displaying all mobile content design and development courses"}
{"id": 2166 ,"Comment": "in order"}
{"id": 2167 ,"Comment": "minimum value node"}
{"id": 2168 ,"Comment": "post order"}
{"id": 2169 ,"Comment": "delete node"}
{"id": 2170 ,"Comment": "convert binary to decimal"}
{"id": 2171 ,"Comment": "find largest number without condition"}
{"id": 2172 ,"Comment": "frequency counter"}
{"id": 2173 ,"Comment": "data encrypt"}
{"id": 2174 ,"Comment": "find largest sum of contiguous array"}
{"id": 2175 ,"Comment": "user define function"}
{"id": 2176 ,"Comment": "convert binary to octal"}
{"id": 2177 ,"Comment": "user define function"}
{"id": 2178 ,"Comment": "convert binary to decimal"}
{"id": 2179 ,"Comment": "convert decimal to binary"}
{"id": 2180 ,"Comment": "mix cards"}
{"id": 2181 ,"Comment": "can offer covid coverage"}
{"id": 2182 ,"Comment": "control current city"}
{"id": 2183 ,"Comment": "control records"}
{"id": 2184 ,"Comment": "add numbers"}
{"id": 2185 ,"Comment": "calculates divisibility of the given first integer by second one"}
{"id": 2186 ,"Comment": "num paths home"}
{"id": 2187 ,"Comment": "read file"}
{"id": 2188 ,"Comment": "input data"}
{"id": 2189 ,"Comment": "find root"}
{"id": 2190 ,"Comment": "apply multiplication"}
{"id": 2191 ,"Comment": "determines whether the triangle can be drawn according to the triangle inequality theorem"}
{"id": 2192 ,"Comment": "finds the perimeter of the triangle"}
{"id": 2193 ,"Comment": "determines the type of the triangle"}
{"id": 2194 ,"Comment": "finds the area of the triangle"}
{"id": 2195 ,"Comment": "sum of the number"}
{"id": 2196 ,"Comment": "finds the length of the number entered by the user"}
{"id": 2197 ,"Comment": "finds the number in the index entered by the user"}
{"id": 2198 ,"Comment": "finds the power"}
{"id": 2199 ,"Comment": "find it is a prime number"}
{"id": 2200 ,"Comment": "returns an integer between zero and seven that represents the one of the eight directions"}
{"id": 2201 ,"Comment": "find it is binary or not"}
{"id": 2202 ,"Comment": "find the length"}
{"id": 2203 ,"Comment": "returns a random character between a and z"}
{"id": 2204 ,"Comment": "perform and operation"}
{"id": 2205 ,"Comment": "control intersection"}
{"id": 2206 ,"Comment": "prints the 20x20 puzzle board"}
{"id": 2207 ,"Comment": "make the list uppercase"}
{"id": 2208 ,"Comment": "fill the board"}
{"id": 2209 ,"Comment": "read the news"}
{"id": 2210 ,"Comment": "works if user never read the text before or wants to read again"}
{"id": 2211 ,"Comment": "find the function"}
{"id": 2212 ,"Comment": "read magic numbers"}
{"id": 2213 ,"Comment": "readed news"}
{"id": 2214 ,"Comment": "append the file"}
{"id": 2215 ,"Comment": "get the function"}
{"id": 2216 ,"Comment": "decrypt and print the function"}
{"id": 2217 ,"Comment": "decrypt numbers"}
{"id": 2218 ,"Comment": "deep decrypt and print"}
{"id": 2219 ,"Comment": "find menu"}
{"id": 2220 ,"Comment": "machine to track the position of the enemy camp"}
{"id": 2221 ,"Comment": "find menu"}
{"id": 2222 ,"Comment": "refresh position"}
{"id": 2223 ,"Comment": "encrypt characters"}
{"id": 2224 ,"Comment": "encrypt messages"}
{"id": 2225 ,"Comment": "find arrays are fixed-size sequence containers"}
{"id": 2226 ,"Comment": "diplay the menu"}
{"id": 2227 ,"Comment": "sum of array"}
{"id": 2228 ,"Comment": "find maximum"}
{"id": 2229 ,"Comment": "generate hofstadters sequence"}
{"id": 2230 ,"Comment": "remove duplicates"}
{"id": 2231 ,"Comment": "get the sum"}
{"id": 2232 ,"Comment": "add number"}
{"id": 2233 ,"Comment": "get absolute number"}
{"id": 2234 ,"Comment": "add days"}
{"id": 2235 ,"Comment": "add years"}
{"id": 2236 ,"Comment": "add months"}
{"id": 2237 ,"Comment": "add number"}
{"id": 2238 ,"Comment": "find place"}
{"id": 2239 ,"Comment": "add single digit recursion"}
{"id": 2240 ,"Comment": "move player"}
{"id": 2241 ,"Comment": "move check results"}
{"id": 2242 ,"Comment": "move check results"}
{"id": 2243 ,"Comment": "wall check"}
{"id": 2244 ,"Comment": "move check"}
{"id": 2245 ,"Comment": "sort anagram"}
{"id": 2246 ,"Comment": "analyzing power function"}
{"id": 2247 ,"Comment": "analyzing power function"}
{"id": 2248 ,"Comment": "analyzing power function"}
{"id": 2249 ,"Comment": "analyzing power function"}
{"id": 2250 ,"Comment": "get average"}
{"id": 2251 ,"Comment": "parse arguments"}
{"id": 2252 ,"Comment": "determine operation"}
{"id": 2253 ,"Comment": "read file"}
{"id": 2254 ,"Comment": "insert the value"}
{"id": 2255 ,"Comment": "insert the value"}
{"id": 2256 ,"Comment": "elements to display"}
{"id": 2257 ,"Comment": "delete a value"}
{"id": 2258 ,"Comment": "delete a value"}
{"id": 2259 ,"Comment": "create array"}
{"id": 2260 ,"Comment": "find minimum"}
{"id": 2261 ,"Comment": "array function"}
{"id": 2262 ,"Comment": "array function"}
{"id": 2263 ,"Comment": "find height"}
{"id": 2264 ,"Comment": "modify array"}
{"id": 2265 ,"Comment": "add a node"}
{"id": 2266 ,"Comment": "create node"}
{"id": 2267 ,"Comment": "left rotate"}
{"id": 2268 ,"Comment": "right rotate"}
{"id": 2269 ,"Comment": "different RNL"}
{"id": 2270 ,"Comment": "post order in AVL tree"}
{"id": 2271 ,"Comment": "delete node in AVL tree"}
{"id": 2272 ,"Comment": "in order in AVL tree"}
{"id": 2273 ,"Comment": "pre order in AVL tree"}
{"id": 2274 ,"Comment": "back track"}
{"id": 2275 ,"Comment": "convert from decimal to base"}
{"id": 2276 ,"Comment": "base converter"}
{"id": 2277 ,"Comment": "create graph in bfs"}
{"id": 2278 ,"Comment": "create node in bfs"}
{"id": 2279 ,"Comment": "breadth first search"}
{"id": 2280 ,"Comment": "add edge in  bfs"}
{"id": 2281 ,"Comment": "enqueue in bfs"}
{"id": 2282 ,"Comment": "create queue"}
{"id": 2283 ,"Comment": "fond is empty or not"}
{"id": 2284 ,"Comment": "dequeue in bfs"}
{"id": 2285 ,"Comment": "apply post order in binary tree"}
{"id": 2286 ,"Comment": "find binary"}
{"id": 2287 ,"Comment": "print queue"}
{"id": 2288 ,"Comment": "perform binary search"}
{"id": 2289 ,"Comment": "find binary string"}
{"id": 2290 ,"Comment": "apply pre order in binary search tree"}
{"id": 2291 ,"Comment": "insert in binary search tree"}
{"id": 2292 ,"Comment": "get node in binary search tree"}
{"id": 2293 ,"Comment": "search element is present or not"}
{"id": 2294 ,"Comment": "apply in order in binary search tree"}
{"id": 2295 ,"Comment": "create node in binary tree"}
{"id": 2296 ,"Comment": "in order in binary tree"}
{"id": 2297 ,"Comment": "add node in binary tree"}
{"id": 2298 ,"Comment": "add in binary tree"}
{"id": 2299 ,"Comment": "apply pre order in binary tree"}
{"id": 2300 ,"Comment": "apply post order in binary tree"}
{"id": 2301 ,"Comment": "set bit in array"}
{"id": 2302 ,"Comment": "find array size in bitarray"}
{"id": 2303 ,"Comment": "free an array"}
{"id": 2304 ,"Comment": "find number bits in bitarray"}
{"id": 2305 ,"Comment": "get bitarray"}
{"id": 2306 ,"Comment": "reset bitarray"}
{"id": 2307 ,"Comment": "toggle bit in bitarray"}
{"id": 2308 ,"Comment": "check bit in bitarray"}
{"id": 2309 ,"Comment": "check and set bit in bitarray"}
{"id": 2310 ,"Comment": "clear bit in bitarray"}
{"id": 2311 ,"Comment": "find consumer consumes item"}
{"id": 2312 ,"Comment": "perform wait in bounded buffer"}
{"id": 2313 ,"Comment": "set number bits in bitarray"}
{"id": 2314 ,"Comment": "bitarray to string"}
{"id": 2315 ,"Comment": "signal in bounded buffer"}
{"id": 2316 ,"Comment": "find producer produces the item"}
{"id": 2317 ,"Comment": "takes the address of pointer variable"}
{"id": 2318 ,"Comment": "use local scope"}
{"id": 2319 ,"Comment": "print integer variable"}
{"id": 2320 ,"Comment": "use global scope"}
{"id": 2321 ,"Comment": "use static local scope"}
{"id": 2322 ,"Comment": "append blank in process visualiser"}
{"id": 2323 ,"Comment": "initialize interface in process visualiser"}
{"id": 2324 ,"Comment": "append row in process visualiser"}
{"id": 2325 ,"Comment": "append bar in process visualiser"}
{"id": 2326 ,"Comment": "act as place marker"}
{"id": 2327 ,"Comment": "check positon"}
{"id": 2328 ,"Comment": "caesar cypher"}
{"id": 2329 ,"Comment": "check positive"}
{"id": 2330 ,"Comment": "check is prime or not"}
{"id": 2331 ,"Comment": "caesar cipher"}
{"id": 2332 ,"Comment": "find last element in circular linked list"}
{"id": 2333 ,"Comment": "find sum digit of array"}
{"id": 2334 ,"Comment": "view list in circular linked list"}
{"id": 2335 ,"Comment": "apply rule in array"}
{"id": 2336 ,"Comment": "apply rule in array"}
{"id": 2337 ,"Comment": "compare date"}
{"id": 2338 ,"Comment": "apply rule in array"}
{"id": 2339 ,"Comment": "apply rule in array"}
{"id": 2340 ,"Comment": "apply rule in array"}
{"id": 2341 ,"Comment": "array clean up"}
{"id": 2342 ,"Comment": "combination formula for factorial"}
{"id": 2343 ,"Comment": "get maximum"}
{"id": 2344 ,"Comment": "print data"}
{"id": 2345 ,"Comment": "get data"}
{"id": 2346 ,"Comment": "collatz"}
{"id": 2347 ,"Comment": "apply combination"}
{"id": 2348 ,"Comment": "compare file"}
{"id": 2349 ,"Comment": "delete character"}
{"id": 2350 ,"Comment": "perform count"}
{"id": 2351 ,"Comment": "check contains string or not"}
{"id": 2352 ,"Comment": "copy file using function"}
{"id": 2353 ,"Comment": "count of two"}
{"id": 2354 ,"Comment": "find is space or not"}
{"id": 2355 ,"Comment": "count words string"}
{"id": 2356 ,"Comment": "replace words"}
{"id": 2357 ,"Comment": "count replace string"}
{"id": 2358 ,"Comment": "set file cursor"}
{"id": 2359 ,"Comment": "find diagonal crossed"}
{"id": 2360 ,"Comment": "find row crossed"}
{"id": 2361 ,"Comment": "find list"}
{"id": 2362 ,"Comment": "find colomn crossed"}
{"id": 2363 ,"Comment": "update data in database"}
{"id": 2364 ,"Comment": "get usigned integer"}
{"id": 2365 ,"Comment": "delete data"}
{"id": 2366 ,"Comment": "get data position"}
{"id": 2367 ,"Comment": "get input string"}
{"id": 2368 ,"Comment": "add data"}
{"id": 2369 ,"Comment": "insert information"}
{"id": 2370 ,"Comment": "search in the database"}
{"id": 2371 ,"Comment": "display in the database"}
{"id": 2372 ,"Comment": "modify records"}
{"id": 2373 ,"Comment": "list data"}
{"id": 2374 ,"Comment": "find book sold"}
{"id": 2375 ,"Comment": "initialize database"}
{"id": 2376 ,"Comment": "split date"}
{"id": 2377 ,"Comment": "create database"}
{"id": 2378 ,"Comment": "form date"}
{"id": 2379 ,"Comment": "perform decryption"}
{"id": 2380 ,"Comment": "find is full or not"}
{"id": 2381 ,"Comment": "insert front end of queue"}
{"id": 2382 ,"Comment": "insert front end of queue"}
{"id": 2383 ,"Comment": "display the queue"}
{"id": 2384 ,"Comment": "find is empty"}
{"id": 2385 ,"Comment": "find difference set"}
{"id": 2386 ,"Comment": "insert front end of queue"}
{"id": 2387 ,"Comment": "insert rear end of queue"}
{"id": 2388 ,"Comment": "delete rear end of queue"}
{"id": 2389 ,"Comment": "delete front end of queue"}
{"id": 2390 ,"Comment": "find different year month and day"}
{"id": 2391 ,"Comment": "find different days"}
{"id": 2392 ,"Comment": "search difference in set"}
{"id": 2393 ,"Comment": "find divisible by nine or not"}
{"id": 2394 ,"Comment": "find divisible by eleven or not"}
{"id": 2395 ,"Comment": "remove dynamic linked list"}
{"id": 2396 ,"Comment": "remove alternative in dynamic linked list"}
{"id": 2397 ,"Comment": "append dynamic linked list"}
{"id": 2398 ,"Comment": "insert dynamic linked list"}
{"id": 2399 ,"Comment": "find first node in dynamic linked list"}
{"id": 2400 ,"Comment": "find last node in dynamic linked list"}
{"id": 2401 ,"Comment": "initialize dynamic linked list"}
{"id": 2402 ,"Comment": "free dynamic linked list"}
{"id": 2403 ,"Comment": "free alternative dynamic linked list"}
{"id": 2404 ,"Comment": "find number of elements in dynamic linked list"}
{"id": 2405 ,"Comment": "find double"}
{"id": 2406 ,"Comment": "find is duck or not"}
{"id": 2407 ,"Comment": "welcome the employees"}
{"id": 2408 ,"Comment": "draw star"}
{"id": 2409 ,"Comment": "print star"}
{"id": 2410 ,"Comment": "print character"}
{"id": 2411 ,"Comment": "add employees"}
{"id": 2412 ,"Comment": "modify employees"}
{"id": 2413 ,"Comment": "delete employees"}
{"id": 2414 ,"Comment": "display list of employees"}
{"id": 2415 ,"Comment": "print head of employees"}
{"id": 2416 ,"Comment": "find male employees"}
{"id": 2417 ,"Comment": "find from dhaka"}
{"id": 2418 ,"Comment": "display basic employees"}
{"id": 2419 ,"Comment": "find female employees"}
{"id": 2420 ,"Comment": "search record"}
{"id": 2421 ,"Comment": "frmors"}
{"id": 2422 ,"Comment": "find basic contact"}
{"id": 2423 ,"Comment": "find other branch"}
{"id": 2424 ,"Comment": "show menu"}
{"id": 2425 ,"Comment": "perform encryption"}
{"id": 2426 ,"Comment": "main branch"}
{"id": 2427 ,"Comment": "perform encryption"}
{"id": 2428 ,"Comment": "shortest job first"}
{"id": 2429 ,"Comment": "enter processor"}
{"id": 2430 ,"Comment": "list processor"}
{"id": 2431 ,"Comment": "first come first serve"}
{"id": 2432 ,"Comment": "painel"}
{"id": 2433 ,"Comment": "find top"}
{"id": 2434 ,"Comment": "escalonador prioridade"}
{"id": 2435 ,"Comment": "escalonador prioridade simulador"}
{"id": 2436 ,"Comment": "robin round"}
{"id": 2437 ,"Comment": "shortest job first simulador"}
{"id": 2438 ,"Comment": "shortest job first"}
{"id": 2439 ,"Comment": "painel"}
{"id": 2440 ,"Comment": "find top"}
{"id": 2441 ,"Comment": "first come first serve"}
{"id": 2442 ,"Comment": "list processor"}
{"id": 2443 ,"Comment": "enter processor"}
{"id": 2444 ,"Comment": "find is even"}
{"id": 2445 ,"Comment": "show menu"}
{"id": 2446 ,"Comment": "escalonador prioridade simulador"}
{"id": 2447 ,"Comment": "shortest job first simulador"}
{"id": 2448 ,"Comment": "escalonador prioridade"}
{"id": 2449 ,"Comment": "robin round"}
{"id": 2450 ,"Comment": "copy the input line"}
{"id": 2451 ,"Comment": "get line"}
{"id": 2452 ,"Comment": "get blank"}
{"id": 2453 ,"Comment": "remove trailing blanks and tabs"}
{"id": 2454 ,"Comment": "get line"}
{"id": 2455 ,"Comment": "print line"}
{"id": 2456 ,"Comment": "check inquote"}
{"id": 2457 ,"Comment": "expand tab"}
{"id": 2458 ,"Comment": "find in comment"}
{"id": 2459 ,"Comment": "echo quote"}
{"id": 2460 ,"Comment": "find new position"}
{"id": 2461 ,"Comment": "remove comment"}
{"id": 2462 ,"Comment": "setting bits at a position n"}
{"id": 2463 ,"Comment": "converting hexadecimal digits into integers"}
{"id": 2464 ,"Comment": "check rudimentary syntax errors"}
{"id": 2465 ,"Comment": "compare s1 and s2 to delete same character in s1"}
{"id": 2466 ,"Comment": "return the first location in the string s1 comparing s2"}
{"id": 2467 ,"Comment": "perform bin search"}
{"id": 2468 ,"Comment": "upper case to lower case"}
{"id": 2469 ,"Comment": "setting bits at a position n inverted"}
{"id": 2470 ,"Comment": "word length"}
{"id": 2471 ,"Comment": "bit count"}
{"id": 2472 ,"Comment": "returns the value of the integer x rotated to the right by n positions"}
{"id": 2473 ,"Comment": "handles largest negative integer"}
{"id": 2474 ,"Comment": "convert integer into string"}
{"id": 2475 ,"Comment": "reverse"}
{"id": 2476 ,"Comment": "expand short hand notation in s1 into string s2"}
{"id": 2477 ,"Comment": "escape sequences into the real characters"}
{"id": 2478 ,"Comment": "strindex which returns rightmost occurance"}
{"id": 2479 ,"Comment": "extend atof to handle scientific notation"}
{"id": 2480 ,"Comment": "reverse"}
{"id": 2481 ,"Comment": "apply power"}
{"id": 2482 ,"Comment": "itoa with field width"}
{"id": 2483 ,"Comment": "push from stack"}
{"id": 2484 ,"Comment": "pop from stack"}
{"id": 2485 ,"Comment": "get top from stack"}
{"id": 2486 ,"Comment": "perform clearing"}
{"id": 2487 ,"Comment": "get character"}
{"id": 2488 ,"Comment": "pushes the single byte character onto the head of input queue"}
{"id": 2489 ,"Comment": "push back an entire string onto the input"}
{"id": 2490 ,"Comment": "perform mathematical function"}
{"id": 2491 ,"Comment": "convert integer into string by calling recursive routine"}
{"id": 2492 ,"Comment": "push back an entire string onto the input"}
{"id": 2493 ,"Comment": "get character"}
{"id": 2494 ,"Comment": "returns one if string t occurs at the end of the string"}
{"id": 2495 ,"Comment": "copy string"}
{"id": 2496 ,"Comment": "string concatenate"}
{"id": 2497 ,"Comment": "returns one if string t occurs at the end of the string"}
{"id": 2498 ,"Comment": "copies the string t to the end of s"}
{"id": 2499 ,"Comment": "compare the string"}
{"id": 2500 ,"Comment": "find month and day"}
{"id": 2501 ,"Comment": "find index of string"}
{"id": 2502 ,"Comment": "find the length of string"}
{"id": 2503 ,"Comment": "find pattern using pointer"}
{"id": 2504 ,"Comment": "find day of year"}
{"id": 2505 ,"Comment": "fill character array tab with values zero or one"}
{"id": 2506 ,"Comment": "fill character array tab with values zero or one"}
{"id": 2507 ,"Comment": "find the position of table"}
{"id": 2508 ,"Comment": "converts tabs in a string to spaces"}
{"id": 2509 ,"Comment": "tail prints the last n lines of input"}
{"id": 2510 ,"Comment": "read lines"}
{"id": 2511 ,"Comment": "compare numbers"}
{"id": 2512 ,"Comment": "free the allocated space"}
{"id": 2513 ,"Comment": "sorting in reverse order"}
{"id": 2514 ,"Comment": "allocate space"}
{"id": 2515 ,"Comment": "find the next token"}
{"id": 2516 ,"Comment": "write lines"}
{"id": 2517 ,"Comment": "compare the characters"}
{"id": 2518 ,"Comment": "parse a direct declarator"}
{"id": 2519 ,"Comment": "parse a direct declarator"}
{"id": 2520 ,"Comment": "find previous token"}
{"id": 2521 ,"Comment": "recover from error message"}
{"id": 2522 ,"Comment": "access the stored data"}
{"id": 2523 ,"Comment": "add tree"}
{"id": 2524 ,"Comment": "apply talloc"}
{"id": 2525 ,"Comment": "pointer to a new string which is a duplicate"}
{"id": 2526 ,"Comment": "perform bin search"}
{"id": 2527 ,"Comment": "get words"}
{"id": 2528 ,"Comment": "print words"}
{"id": 2529 ,"Comment": "add words"}
{"id": 2530 ,"Comment": "get words"}
{"id": 2531 ,"Comment": "add root"}
{"id": 2532 ,"Comment": "print trees"}
{"id": 2533 ,"Comment": "attempts to grow the memory"}
{"id": 2534 ,"Comment": "lookup the table"}
{"id": 2535 ,"Comment": "get word"}
{"id": 2536 ,"Comment": "print list"}
{"id": 2537 ,"Comment": "install the table"}
{"id": 2538 ,"Comment": "undefine name"}
{"id": 2539 ,"Comment": "remove name and definition from table"}
{"id": 2540 ,"Comment": "undefine processor"}
{"id": 2541 ,"Comment": "undefine processor"}
{"id": 2542 ,"Comment": "get words"}
{"id": 2543 ,"Comment": "get characters"}
{"id": 2544 ,"Comment": "get undefine characters"}
{"id": 2545 ,"Comment": "lookup processor"}
{"id": 2546 ,"Comment": "install in the processor"}
{"id": 2547 ,"Comment": "put characters"}
{"id": 2548 ,"Comment": "define processor"}
{"id": 2549 ,"Comment": "print non graphic characters"}
{"id": 2550 ,"Comment": "compare files"}
{"id": 2551 ,"Comment": "find the minimum value and print"}
{"id": 2552 ,"Comment": "get line"}
{"id": 2553 ,"Comment": "print pages"}
{"id": 2554 ,"Comment": "find the index from string"}
{"id": 2555 ,"Comment": "memory move"}
{"id": 2556 ,"Comment": "memory move"}
{"id": 2557 ,"Comment": "memory set"}
{"id": 2558 ,"Comment": "memory move"}
{"id": 2559 ,"Comment": "memory set"}
{"id": 2560 ,"Comment": "memory copy"}
{"id": 2561 ,"Comment": "memory copy"}
{"id": 2562 ,"Comment": "memory compare"}
{"id": 2563 ,"Comment": "memory copy"}
{"id": 2564 ,"Comment": "memory compare"}
{"id": 2565 ,"Comment": "find the memory character"}
{"id": 2566 ,"Comment": "find the memory character"}
{"id": 2567 ,"Comment": "find the memory character"}
{"id": 2568 ,"Comment": "find the size of the number"}
{"id": 2569 ,"Comment": "memory compare"}
{"id": 2570 ,"Comment": "find the size of the number"}
{"id": 2571 ,"Comment": "print the element"}
{"id": 2572 ,"Comment": "find the size of the number"}
{"id": 2573 ,"Comment": "find the size of the number"}
{"id": 2574 ,"Comment": "find the size of the number"}
{"id": 2575 ,"Comment": "find the digit"}
{"id": 2576 ,"Comment": "print the element"}
{"id": 2577 ,"Comment": "print the element"}
{"id": 2578 ,"Comment": "find the digit"}
{"id": 2579 ,"Comment": "find the digit"}
{"id": 2580 ,"Comment": "find the alphabet"}
{"id": 2581 ,"Comment": "find the ascii value"}
{"id": 2582 ,"Comment": "find the alphabet"}
{"id": 2583 ,"Comment": "find the ascii value"}
{"id": 2584 ,"Comment": "find the ascii value"}
{"id": 2585 ,"Comment": "perform exponential search"}
{"id": 2586 ,"Comment": "get the name"}
{"id": 2587 ,"Comment": "provide external support"}
{"id": 2588 ,"Comment": "perform iterative factorial"}
{"id": 2589 ,"Comment": "binary search tree"}
{"id": 2590 ,"Comment": "apply sort data"}
{"id": 2591 ,"Comment": "calculate data"}
{"id": 2592 ,"Comment": "find an answer"}
{"id": 2593 ,"Comment": "multiply numbers"}
{"id": 2594 ,"Comment": "perform factorial recursive"}
{"id": 2595 ,"Comment": "display data"}
{"id": 2596 ,"Comment": "sort data"}
{"id": 2597 ,"Comment": "assign data"}
{"id": 2598 ,"Comment": "display data"}
{"id": 2599 ,"Comment": "create data"}
{"id": 2600 ,"Comment": "copy file"}
{"id": 2601 ,"Comment": "find an error"}
{"id": 2602 ,"Comment": "checks whether a character is an uppercase alphabet"}
{"id": 2603 ,"Comment": "allocate blocks of memory for array"}
{"id": 2604 ,"Comment": "free a memory"}
{"id": 2605 ,"Comment": "allocate space"}
{"id": 2606 ,"Comment": "empty function with the effect of discarding the chopped off bits"}
{"id": 2607 ,"Comment": "free the space maintained by malloc"}
{"id": 2608 ,"Comment": "try to free"}
{"id": 2609 ,"Comment": "allocate more core"}
{"id": 2610 ,"Comment": "process for first come first serve"}
{"id": 2611 ,"Comment": "find and replace string"}
{"id": 2612 ,"Comment": "perform fibonacci using iterative method"}
{"id": 2613 ,"Comment": "perform fibonacci using recursive method"}
{"id": 2614 ,"Comment": "get string"}
{"id": 2615 ,"Comment": "first in first out queue"}
{"id": 2616 ,"Comment": "converts a character string to an integer value"}
{"id": 2617 ,"Comment": "count the frequency of characters"}
{"id": 2618 ,"Comment": "find the power of exponential"}
{"id": 2619 ,"Comment": "find first number"}
{"id": 2620 ,"Comment": "converts a character string to an integer value"}
{"id": 2621 ,"Comment": "converts a character string to an integer value"}
{"id": 2622 ,"Comment": "apply calloc"}
{"id": 2623 ,"Comment": "erases the data"}
{"id": 2624 ,"Comment": "allocate a specific amount of memory"}
{"id": 2625 ,"Comment": "allocate a specific amount of memory"}
{"id": 2626 ,"Comment": "erases the data"}
{"id": 2627 ,"Comment": "erases the data"}
{"id": 2628 ,"Comment": "find alphabet"}
{"id": 2629 ,"Comment": "find is a number"}
{"id": 2630 ,"Comment": "put character"}
{"id": 2631 ,"Comment": "sets the first count bytes of dest to the value c"}
{"id": 2632 ,"Comment": "put character"}
{"id": 2633 ,"Comment": "get factorial"}
{"id": 2634 ,"Comment": "get name"}
{"id": 2635 ,"Comment": "function call by reference"}
{"id": 2636 ,"Comment": "function call by value"}
{"id": 2637 ,"Comment": "get name"}
{"id": 2638 ,"Comment": "add name"}
{"id": 2639 ,"Comment": "get factorial"}
{"id": 2640 ,"Comment": "substract the numbers"}
{"id": 2641 ,"Comment": "divide the numbers"}
{"id": 2642 ,"Comment": "get length"}
{"id": 2643 ,"Comment": "multipy the numbers"}
{"id": 2644 ,"Comment": "add the numbers"}
{"id": 2645 ,"Comment": "get sum of the number"}
{"id": 2646 ,"Comment": "find power of the number"}
{"id": 2647 ,"Comment": "find power of the number"}
{"id": 2648 ,"Comment": "add a number"}
{"id": 2649 ,"Comment": "get maximum of number"}
{"id": 2650 ,"Comment": "find an area"}
{"id": 2651 ,"Comment": "apply foo"}
{"id": 2652 ,"Comment": "function greatest common divisor"}
{"id": 2653 ,"Comment": "add x and y"}
{"id": 2654 ,"Comment": "find recursive sum"}
{"id": 2655 ,"Comment": "get sum"}
{"id": 2656 ,"Comment": "get character count"}
{"id": 2657 ,"Comment": "print sum of number"}
{"id": 2658 ,"Comment": "get perimeter"}
{"id": 2659 ,"Comment": "get words"}
{"id": 2660 ,"Comment": "apply greedy algorithm"}
{"id": 2661 ,"Comment": "find big number"}
{"id": 2662 ,"Comment": "greedy algorithm"}
{"id": 2663 ,"Comment": "find log base 2"}
{"id": 2664 ,"Comment": "find great number"}
{"id": 2665 ,"Comment": "load a number"}
{"id": 2666 ,"Comment": "insert number"}
{"id": 2667 ,"Comment": "get index"}
{"id": 2668 ,"Comment": "print number"}
{"id": 2669 ,"Comment": "create node"}
{"id": 2670 ,"Comment": "apply hashing linear"}
{"id": 2671 ,"Comment": "search quadratic probing"}
{"id": 2672 ,"Comment": "insert quadratic probing"}
{"id": 2673 ,"Comment": "search quadratic probing"}
{"id": 2674 ,"Comment": "insert quadratic probing"}
{"id": 2675 ,"Comment": "search quadratic probing"}
{"id": 2676 ,"Comment": "input id for search"}
{"id": 2677 ,"Comment": "make string"}
{"id": 2678 ,"Comment": "insert quadratic probing"}
{"id": 2679 ,"Comment": "make string"}
{"id": 2680 ,"Comment": "intialize text"}
{"id": 2681 ,"Comment": "perform search interpolation"}
{"id": 2682 ,"Comment": "apply insertion sort"}
{"id": 2683 ,"Comment": "set initials"}
{"id": 2684 ,"Comment": "get initials"}
{"id": 2685 ,"Comment": "find the prime number"}
{"id": 2686 ,"Comment": "rev julian"}
{"id": 2687 ,"Comment": "find is sorted or not"}
{"id": 2688 ,"Comment": "find is gapful"}
{"id": 2689 ,"Comment": "find is unique"}
{"id": 2690 ,"Comment": "apply union"}
{"id": 2691 ,"Comment": "jump search"}
{"id": 2692 ,"Comment": "julian"}
{"id": 2693 ,"Comment": "span list"}
{"id": 2694 ,"Comment": "sort list"}
{"id": 2695 ,"Comment": "span list"}
{"id": 2696 ,"Comment": "print linked list"}
{"id": 2697 ,"Comment": "find is leap or not"}
{"id": 2698 ,"Comment": "find list"}
{"id": 2699 ,"Comment": "create node"}
{"id": 2700 ,"Comment": "print nodes"}
{"id": 2701 ,"Comment": "insert back"}
{"id": 2702 ,"Comment": "delete node"}
{"id": 2703 ,"Comment": "print linked list"}
{"id": 2704 ,"Comment": "search node of tree"}
{"id": 2705 ,"Comment": "push back"}
{"id": 2706 ,"Comment": "add front"}
{"id": 2707 ,"Comment": "new node"}
{"id": 2708 ,"Comment": "create node"}
{"id": 2709 ,"Comment": "insert front"}
{"id": 2710 ,"Comment": "print list"}
{"id": 2711 ,"Comment": "clean list"}
{"id": 2712 ,"Comment": "construct node"}
{"id": 2713 ,"Comment": "print person"}
{"id": 2714 ,"Comment": "create new person"}
{"id": 2715 ,"Comment": "print list"}
{"id": 2716 ,"Comment": "push front list"}
{"id": 2717 ,"Comment": "push back list"}
{"id": 2718 ,"Comment": "pop back list"}
{"id": 2719 ,"Comment": "pop next list"}
{"id": 2720 ,"Comment": "append list"}
{"id": 2721 ,"Comment": "remove list"}
{"id": 2722 ,"Comment": "construct node"}
{"id": 2723 ,"Comment": "pop list by information"}
{"id": 2724 ,"Comment": "remove list"}
{"id": 2725 ,"Comment": "append list"}
{"id": 2726 ,"Comment": "insert list"}
{"id": 2727 ,"Comment": "list number elements"}
{"id": 2728 ,"Comment": "list first node"}
{"id": 2729 ,"Comment": "append list"}
{"id": 2730 ,"Comment": "find lowercase"}
{"id": 2731 ,"Comment": "in queue"}
{"id": 2732 ,"Comment": "list free"}
{"id": 2733 ,"Comment": "list free"}
{"id": 2734 ,"Comment": "initialize list"}
{"id": 2735 ,"Comment": "apply dequeue"}
{"id": 2736 ,"Comment": "delete from queue"}
{"id": 2737 ,"Comment": "apply enqueue"}
{"id": 2738 ,"Comment": "print winner"}
{"id": 2739 ,"Comment": "execute"}
{"id": 2740 ,"Comment": "add participants"}
{"id": 2741 ,"Comment": "print contacts"}
{"id": 2742 ,"Comment": "add contacts"}
{"id": 2743 ,"Comment": "remove contacts"}
{"id": 2744 ,"Comment": "get contacts"}
{"id": 2745 ,"Comment": "add matrix"}
{"id": 2746 ,"Comment": "print menu"}
{"id": 2747 ,"Comment": "get maximum"}
{"id": 2748 ,"Comment": "maximum index"}
{"id": 2749 ,"Comment": "find median number"}
{"id": 2750 ,"Comment": "memory block"}
{"id": 2751 ,"Comment": "setup board"}
{"id": 2752 ,"Comment": "set free"}
{"id": 2753 ,"Comment": "find small location"}
{"id": 2754 ,"Comment": "print directions"}
{"id": 2755 ,"Comment": "get user input"}
{"id": 2756 ,"Comment": "create new board"}
{"id": 2757 ,"Comment": "print board"}
{"id": 2758 ,"Comment": "print correct answer"}
{"id": 2759 ,"Comment": "get acii value"}
{"id": 2760 ,"Comment": "apply merge sort"}
{"id": 2761 ,"Comment": "print array"}
{"id": 2762 ,"Comment": "apply merge sort"}
{"id": 2763 ,"Comment": "get input value"}
{"id": 2764 ,"Comment": "find minimum to maximum value"}
{"id": 2765 ,"Comment": "get missing number"}
{"id": 2766 ,"Comment": "check multiplication"}
{"id": 2767 ,"Comment": "answer selection"}
{"id": 2768 ,"Comment": "perform multiplication"}
{"id": 2769 ,"Comment": "random midium"}
{"id": 2770 ,"Comment": "print music list"}
{"id": 2771 ,"Comment": "insert music"}
{"id": 2772 ,"Comment": "clean music list"}
{"id": 2773 ,"Comment": "print music"}
{"id": 2774 ,"Comment": "create new node"}
{"id": 2775 ,"Comment": "convert to upper case"}
{"id": 2776 ,"Comment": "function for string length"}
{"id": 2777 ,"Comment": "reset function"}
{"id": 2778 ,"Comment": "copy a string"}
{"id": 2779 ,"Comment": "copy a string"}
{"id": 2780 ,"Comment": "convert to upper case"}
{"id": 2781 ,"Comment": "find digit"}
{"id": 2782 ,"Comment": "compare order"}
{"id": 2783 ,"Comment": "check"}
{"id": 2784 ,"Comment": "convert to upper case"}
{"id": 2785 ,"Comment": "find it is a vowel"}
{"id": 2786 ,"Comment": "convert number to binary"}
{"id": 2787 ,"Comment": "print sum pf numbers"}
{"id": 2788 ,"Comment": "convert decimal to binary"}
{"id": 2789 ,"Comment": "find optimal search tree"}
{"id": 2790 ,"Comment": "find optimal cost"}
{"id": 2791 ,"Comment": "computer output file name"}
{"id": 2792 ,"Comment": "find combination"}
{"id": 2793 ,"Comment": "perform factorial"}
{"id": 2794 ,"Comment": "find it is pangram or not"}
{"id": 2795 ,"Comment": "count permutations"}
{"id": 2796 ,"Comment": "pass the input"}
{"id": 2797 ,"Comment": "initialize permutation "}
{"id": 2798 ,"Comment": "make permutation free"}
{"id": 2799 ,"Comment": "input a number"}
{"id": 2800 ,"Comment": "input size"}
{"id": 2801 ,"Comment": "perform permutation to string"}
{"id": 2802 ,"Comment": "perform permutation of alphabet"}
{"id": 2803 ,"Comment": "find current permutation"}
{"id": 2804 ,"Comment": "find permutation of alphabet length"}
{"id": 2805 ,"Comment": "permutation inc"}
{"id": 2806 ,"Comment": "find the factor"}
{"id": 2807 ,"Comment": "perm dec"}
{"id": 2808 ,"Comment": "substract permutation"}
{"id": 2809 ,"Comment": "add permutation"}
{"id": 2810 ,"Comment": "find prime factor"}
{"id": 2811 ,"Comment": "power function"}
{"id": 2812 ,"Comment": "find prime factor"}
{"id": 2813 ,"Comment": "find to the power 2"}
{"id": 2814 ,"Comment": "find power"}
{"id": 2815 ,"Comment": "print digits right to left"}
{"id": 2816 ,"Comment": "this is prime number"}
{"id": 2817 ,"Comment": "print digits"}
{"id": 2818 ,"Comment": "print menu"}
{"id": 2819 ,"Comment": "print prime numbers"}
{"id": 2820 ,"Comment": "find this is vowel"}
{"id": 2821 ,"Comment": "find product of digits"}
{"id": 2822 ,"Comment": "make foundation"}
{"id": 2823 ,"Comment": "greet"}
{"id": 2824 ,"Comment": "find file content"}
{"id": 2825 ,"Comment": "find is integer"}
{"id": 2826 ,"Comment": "find is eol"}
{"id": 2827 ,"Comment": "check value"}
{"id": 2828 ,"Comment": "findis header"}
{"id": 2829 ,"Comment": "find is directive"}
{"id": 2830 ,"Comment": "valid identifier"}
{"id": 2831 ,"Comment": "find is real number"}
{"id": 2832 ,"Comment": "find sub string"}
{"id": 2833 ,"Comment": "find keyword"}
{"id": 2834 ,"Comment": "check is delimiter"}
{"id": 2835 ,"Comment": "check input validity"}
{"id": 2836 ,"Comment": "find a string"}
{"id": 2837 ,"Comment": "check is operator"}
{"id": 2838 ,"Comment": "check is delimiter"}
{"id": 2839 ,"Comment": "count terms"}
{"id": 2840 ,"Comment": "update board"}
{"id": 2841 ,"Comment": "find index"}
{"id": 2842 ,"Comment": "play game"}
{"id": 2843 ,"Comment": "create an array"}
{"id": 2844 ,"Comment": "is board filled"}
{"id": 2845 ,"Comment": "free alt"}
{"id": 2846 ,"Comment": "load text file"}
{"id": 2847 ,"Comment": "display board"}
{"id": 2848 ,"Comment": "free the memory"}
{"id": 2849 ,"Comment": "initialize"}
{"id": 2850 ,"Comment": "pop from stack"}
{"id": 2851 ,"Comment": "find number of elements"}
{"id": 2852 ,"Comment": "find last node"}
{"id": 2853 ,"Comment": "find first node"}
{"id": 2854 ,"Comment": "perform push"}
{"id": 2855 ,"Comment": "find worst case"}
{"id": 2856 ,"Comment": "apply quicksort"}
{"id": 2857 ,"Comment": "find best case"}
{"id": 2858 ,"Comment": "find avarage case"}
{"id": 2859 ,"Comment": "pop from stack"}
{"id": 2860 ,"Comment": "find is prime or not"}
{"id": 2861 ,"Comment": "print rectangle"}
{"id": 2862 ,"Comment": "check is even"}
{"id": 2863 ,"Comment": "perform divide"}
{"id": 2864 ,"Comment": "find intersection"}
{"id": 2865 ,"Comment": "find area"}
{"id": 2866 ,"Comment": "find maximum"}
{"id": 2867 ,"Comment": "canonicalize"}
{"id": 2868 ,"Comment": "recursive remainder"}
{"id": 2869 ,"Comment": "find minimum"}
{"id": 2870 ,"Comment": "recursive division"}
{"id": 2871 ,"Comment": "recursive log"}
{"id": 2872 ,"Comment": "add to number"}
{"id": 2873 ,"Comment": "find average"}
{"id": 2874 ,"Comment": "remove space"}
{"id": 2875 ,"Comment": "find winner"}
{"id": 2876 ,"Comment": "find retirement age"}
{"id": 2877 ,"Comment": "game over"}
{"id": 2878 ,"Comment": "return pointer"}
{"id": 2879 ,"Comment": "calculate"}
{"id": 2880 ,"Comment": "reverse letters"}
{"id": 2881 ,"Comment": "return array from function"}
{"id": 2882 ,"Comment": "return from function"}
{"id": 2883 ,"Comment": "returning methods"}
{"id": 2884 ,"Comment": "find prime numbers"}
{"id": 2885 ,"Comment": "reverse"}
{"id": 2886 ,"Comment": "print reverse string"}
{"id": 2887 ,"Comment": "reverse letters"}
{"id": 2888 ,"Comment": "reverse"}
{"id": 2889 ,"Comment": "it is palindrome or not"}
{"id": 2890 ,"Comment": "reverse words"}
{"id": 2891 ,"Comment": "reverse letters"}
{"id": 2892 ,"Comment": "count vowel"}
{"id": 2893 ,"Comment": "reverse length"}
{"id": 2894 ,"Comment": "reverse words"}
{"id": 2895 ,"Comment": "reverse"}
{"id": 2896 ,"Comment": "add string"}
{"id": 2897 ,"Comment": "peform copy"}
{"id": 2898 ,"Comment": "compare"}
{"id": 2899 ,"Comment": "reverse string"}
{"id": 2900 ,"Comment": "rotate matrix"}
{"id": 2901 ,"Comment": "make roman numbers"}
{"id": 2902 ,"Comment": "rotate matrix"}
{"id": 2903 ,"Comment": "make roman numbers"}
{"id": 2904 ,"Comment": "rotate matrix"}
{"id": 2905 ,"Comment": "find r series"}
{"id": 2906 ,"Comment": "apply sort"}
{"id": 2907 ,"Comment": "a to f convert string to double"}
{"id": 2908 ,"Comment": "finds a market priority and use the allocation"}
{"id": 2909 ,"Comment": "find string index"}
{"id": 2910 ,"Comment": "read lines"}
{"id": 2911 ,"Comment": "apply selection sort"}
{"id": 2912 ,"Comment": "apply selection sort"}
{"id": 2913 ,"Comment": "write lines"}
{"id": 2914 ,"Comment": "apply selection sort"}
{"id": 2915 ,"Comment": "apply sorting"}
{"id": 2916 ,"Comment": "apply sorting"}
{"id": 2917 ,"Comment": "show board"}
{"id": 2918 ,"Comment": "show instructions"}
{"id": 2919 ,"Comment": "find signal user"}
{"id": 2920 ,"Comment": "create data"}
{"id": 2921 ,"Comment": "small intialization"}
{"id": 2922 ,"Comment": "small intialization"}
{"id": 2923 ,"Comment": "display"}
{"id": 2924 ,"Comment": "perform calculation"}
{"id": 2925 ,"Comment": "comapare function in sorting"}
{"id": 2926 ,"Comment": "perform selection sort"}
{"id": 2927 ,"Comment": "apply heapify in sorting"}
{"id": 2928 ,"Comment": "perform heap sort"}
{"id": 2929 ,"Comment": "perform insertion sort"}
{"id": 2930 ,"Comment": "function putendl"}
{"id": 2931 ,"Comment": "function putnbr"}
{"id": 2932 ,"Comment": "function putendl"}
{"id": 2933 ,"Comment": "function putendl"}
{"id": 2934 ,"Comment": "function putnbr"}
{"id": 2935 ,"Comment": "free a memory"}
{"id": 2936 ,"Comment": "writes the string to the given output unit"}
{"id": 2937 ,"Comment": "reserves memory on the heap for string"}
{"id": 2938 ,"Comment": "split a string"}
{"id": 2939 ,"Comment": "copy a string"}
{"id": 2940 ,"Comment": "word count"}
{"id": 2941 ,"Comment": "reserves memory on the heap for string"}
{"id": 2942 ,"Comment": "returns a pointer to the first occurence of character"}
{"id": 2943 ,"Comment": "apply spliting"}
{"id": 2944 ,"Comment": "returns a pointer to a new string which is a duplicate"}
{"id": 2945 ,"Comment": "returns a pointer to the first occurence of character"}
{"id": 2946 ,"Comment": "join a string"}
{"id": 2947 ,"Comment": "applies function to each character of the string passed as argument"}
{"id": 2948 ,"Comment": "copy a string"}
{"id": 2949 ,"Comment": "concatenate a string"}
{"id": 2950 ,"Comment": "copy a string"}
{"id": 2951 ,"Comment": "find the length of string"}
{"id": 2952 ,"Comment": "create a new string"}
{"id": 2953 ,"Comment": "compare a string"}
{"id": 2954 ,"Comment": "locates the first occurrence of the null terminated"}
{"id": 2955 ,"Comment": "locates the first occurrence of the null terminated"}
{"id": 2956 ,"Comment": "trim a string"}
{"id": 2957 ,"Comment": "find the substring"}
{"id": 2958 ,"Comment": "make the string to lower case"}
{"id": 2959 ,"Comment": "make the string to upper case"}
{"id": 2960 ,"Comment": "find the global variable"}
{"id": 2961 ,"Comment": "find the global variable"}
{"id": 2962 ,"Comment": "find the global variable"}
{"id": 2963 ,"Comment": "increase counter of global variable"}
{"id": 2964 ,"Comment": "apply counter"}
{"id": 2965 ,"Comment": "find next prime number"}
{"id": 2966 ,"Comment": "check goldbach"}
{"id": 2967 ,"Comment": "find is prime"}
{"id": 2968 ,"Comment": "free the memory allocation for graph"}
{"id": 2969 ,"Comment": "intialize for graph"}
{"id": 2970 ,"Comment": "get vertex for graph"}
{"id": 2971 ,"Comment": "find edges for graph"}
{"id": 2972 ,"Comment": "find vertices inserted"}
{"id": 2973 ,"Comment": "find depth first traversal"}
{"id": 2974 ,"Comment": "find number of vertices"}
{"id": 2975 ,"Comment": "remove vertex for graph"}
{"id": 2976 ,"Comment": "add vertex"}
{"id": 2977 ,"Comment": "remove vertex for graph"}
{"id": 2978 ,"Comment": "add alternative vertex"}
{"id": 2979 ,"Comment": "get edge for graph"}
{"id": 2980 ,"Comment": "remove edge for graph"}
{"id": 2981 ,"Comment": "get the id of vertex"}
{"id": 2982 ,"Comment": "find vertex number and edges out"}
{"id": 2983 ,"Comment": "add edges for graph"}
{"id": 2984 ,"Comment": "find vertex number and edges in"}
{"id": 2985 ,"Comment": "find vertex metadata"}
{"id": 2986 ,"Comment": "find id of edges"}
{"id": 2987 ,"Comment": "update vertex metadata"}
{"id": 2988 ,"Comment": "find vertex and edge"}
{"id": 2989 ,"Comment": "free vertex allocation"}
{"id": 2990 ,"Comment": "free vertex"}
{"id": 2991 ,"Comment": "free edge allocation"}
{"id": 2992 ,"Comment": "find edge dest"}
{"id": 2993 ,"Comment": "find source of edges"}
{"id": 2994 ,"Comment": "update edge metadata"}
{"id": 2995 ,"Comment": "find depth first traverse"}
{"id": 2996 ,"Comment": "get edge metadata"}
{"id": 2997 ,"Comment": "find breadth first traverse"}
{"id": 2998 ,"Comment": "create logo"}
{"id": 2999 ,"Comment": "roll dice in game"}
{"id": 3000 ,"Comment": "display"}
{"id": 3001 ,"Comment": "find about bill"}
{"id": 3002 ,"Comment": "create"}
{"id": 3003 ,"Comment": "perform edit"}
{"id": 3004 ,"Comment": "make an invoice"}
{"id": 3005 ,"Comment": "perform delete"}
{"id": 3006 ,"Comment": "display"}
{"id": 3007 ,"Comment": "get the node"}
{"id": 3008 ,"Comment": "search contact number"}
{"id": 3009 ,"Comment": "delete contact number"}
{"id": 3010 ,"Comment": "insert contact number"}
{"id": 3011 ,"Comment": "display the contact number"}
{"id": 3012 ,"Comment": "make voting system"}
{"id": 3013 ,"Comment": "show the system"}
{"id": 3014 ,"Comment": "find a winner"}
{"id": 3015 ,"Comment": "insert voter"}
{"id": 3016 ,"Comment": "check main logs"}
{"id": 3017 ,"Comment": "have a admin panel"}
{"id": 3018 ,"Comment": "stop voting"}
{"id": 3019 ,"Comment": "exit mechanism"}
{"id": 3020 ,"Comment": "find the circumference of circle"}
{"id": 3021 ,"Comment": "perform search "}
{"id": 3022 ,"Comment": "find no repetition"}
{"id": 3023 ,"Comment": "input of circle"}
{"id": 3024 ,"Comment": "find area of circle"}
{"id": 3025 ,"Comment": "display results"}
{"id": 3026 ,"Comment": "find the input of triangle base"}
{"id": 3027 ,"Comment": "display the circle"}
{"id": 3028 ,"Comment": "find the area of triangle"}
{"id": 3029 ,"Comment": "take the input for triangle"}
{"id": 3030 ,"Comment": "take the input for square"}
{"id": 3031 ,"Comment": "take the input for circle"}
{"id": 3032 ,"Comment": "display area"}
{"id": 3033 ,"Comment": "find the area of square"}
{"id": 3034 ,"Comment": "find the perimeter of square"}
{"id": 3035 ,"Comment": "order the string"}
{"id": 3036 ,"Comment": "provide partition for sorting"}
{"id": 3037 ,"Comment": "perform quicksort"}
{"id": 3038 ,"Comment": "perform cocktailsort"}
{"id": 3039 ,"Comment": "perform bubblesort"}
{"id": 3040 ,"Comment": "sort the data"}
{"id": 3041 ,"Comment": "shortest remaining time first"}
{"id": 3042 ,"Comment": "find the maximum length of square"}
{"id": 3043 ,"Comment": "display scheduling"}
{"id": 3044 ,"Comment": "shortest process"}
{"id": 3045 ,"Comment": "find the sum for scheduling"}
{"id": 3046 ,"Comment": "find square root"}
{"id": 3047 ,"Comment": "find squares"}
{"id": 3048 ,"Comment": "pop from stack"}
{"id": 3049 ,"Comment": "push from stack"}
{"id": 3050 ,"Comment": "find the first node from stack"}
{"id": 3051 ,"Comment": "find number of elements from stack"}
{"id": 3052 ,"Comment": "pop from alternative stack"}
{"id": 3053 ,"Comment": "free alternative stack"}
{"id": 3054 ,"Comment": "free stack"}
{"id": 3055 ,"Comment": "initialize stack"}
{"id": 3056 ,"Comment": "apply encryption"}
{"id": 3057 ,"Comment": "apply decryption"}
{"id": 3058 ,"Comment": "apply encryption"}
{"id": 3059 ,"Comment": "get average of students"}
{"id": 3060 ,"Comment": "print names of students"}
{"id": 3061 ,"Comment": "find string character"}
{"id": 3062 ,"Comment": "apply decryption"}
{"id": 3063 ,"Comment": "apply encryption"}
{"id": 3064 ,"Comment": "read data for students"}
{"id": 3065 ,"Comment": "compare the string"}
{"id": 3066 ,"Comment": "copy the string"}
{"id": 3067 ,"Comment": "add two strings"}
{"id": 3068 ,"Comment": "reverse a string"}
{"id": 3069 ,"Comment": "count the vowels in the string"}
{"id": 3070 ,"Comment": "concatenate a string"}
{"id": 3071 ,"Comment": "copy the string"}
{"id": 3072 ,"Comment": "convert string to integer"}
{"id": 3073 ,"Comment": "convert string to double"}
{"id": 3074 ,"Comment": "find the length of the string"}
{"id": 3075 ,"Comment": "compare the string"}
{"id": 3076 ,"Comment": "duplicate the string"}
{"id": 3077 ,"Comment": "free array of strings"}
{"id": 3078 ,"Comment": "reverse a string"}
{"id": 3079 ,"Comment": "reverse a string"}
{"id": 3080 ,"Comment": "find the length of a string"}
{"id": 3081 ,"Comment": "reverse a string"}
{"id": 3082 ,"Comment": "replace unwanted characters in string"}
{"id": 3083 ,"Comment": "trim a string"}
{"id": 3084 ,"Comment": "reverse a string"}
{"id": 3085 ,"Comment": "standardize whitespace in string"}
{"id": 3086 ,"Comment": "remove unwanted characters in string"}
{"id": 3087 ,"Comment": "redirect the output of print function onto a buffer"}
{"id": 3088 ,"Comment": "make string to upper case"}
{"id": 3089 ,"Comment": "find a string"}
{"id": 3090 ,"Comment": "find alternative string"}
{"id": 3091 ,"Comment": "find reverse string"}
{"id": 3092 ,"Comment": "make string to lower case"}
{"id": 3093 ,"Comment": "find the count in the string"}
{"id": 3094 ,"Comment": "find a string"}
{"id": 3095 ,"Comment": "find the count in the string"}
{"id": 3096 ,"Comment": "find alternative string"}
{"id": 3097 ,"Comment": "returns a pointer to the first occurence of first string in second string"}
{"id": 3098 ,"Comment": "find the reverse of a string"}
{"id": 3099 ,"Comment": "find any reverse string"}
{"id": 3100 ,"Comment": "find any string"}
{"id": 3101 ,"Comment": "extract substring"}
{"id": 3102 ,"Comment": "append alternative string"}
{"id": 3103 ,"Comment": "find any alternative string"}
{"id": 3104 ,"Comment": "append string"}
{"id": 3105 ,"Comment": "find any count in string"}
{"id": 3106 ,"Comment": "compare alternative string"}
{"id": 3107 ,"Comment": "concatenate the string"}
{"id": 3108 ,"Comment": "compare the string"}
{"id": 3109 ,"Comment": "print book"}
{"id": 3110 ,"Comment": "split string"}
{"id": 3111 ,"Comment": "split string"}
{"id": 3112 ,"Comment": "split any string"}
{"id": 3113 ,"Comment": "extract substring from string"}
{"id": 3114 ,"Comment": "find single space in string"}
{"id": 3115 ,"Comment": "split lines from string"}
{"id": 3116 ,"Comment": "extract substring from string"}
{"id": 3117 ,"Comment": "function to reverse a string"}
{"id": 3118 ,"Comment": "set first name for students"}
{"id": 3119 ,"Comment": "set id for student"}
{"id": 3120 ,"Comment": "print list of students"}
{"id": 3121 ,"Comment": "print students"}
{"id": 3122 ,"Comment": "pop next list of students"}
{"id": 3123 ,"Comment": "find the list of students by id"}
{"id": 3124 ,"Comment": "remove duplicate id from list of students"}
{"id": 3125 ,"Comment": "perform addition"}
{"id": 3126 ,"Comment": "find new node"}
{"id": 3127 ,"Comment": "push next list of students"}
{"id": 3128 ,"Comment": "push back list of students"}
{"id": 3129 ,"Comment": "push front list of students"}
{"id": 3130 ,"Comment": "find the sub months"}
{"id": 3131 ,"Comment": "find the sub days"}
{"id": 3132 ,"Comment": "find the sub years"}
{"id": 3133 ,"Comment": "find the average of the sum"}
{"id": 3134 ,"Comment": "print digits"}
{"id": 3135 ,"Comment": "find sum of digits"}
{"id": 3136 ,"Comment": "find sum of odd digits"}
{"id": 3137 ,"Comment": "get the sum of numbers"}
{"id": 3138 ,"Comment": "calculate the sum of average"}
{"id": 3139 ,"Comment": "swap between numbers"}
{"id": 3140 ,"Comment": "find money for vending machine"}
{"id": 3141 ,"Comment": "convert to upper case"}
{"id": 3142 ,"Comment": "function called"}
{"id": 3143 ,"Comment": "function called"}
{"id": 3144 ,"Comment": "apply tokenizer"}
{"id": 3145 ,"Comment": "find is valid variable or not"}
{"id": 3146 ,"Comment": "find is valid or not"}
{"id": 3147 ,"Comment": "perform tower of honoi"}
{"id": 3148 ,"Comment": "void method"}
{"id": 3149 ,"Comment": "find week of the day"}
{"id": 3150 ,"Comment": "reverse word using function"}
{"id": 3151 ,"Comment": "vigener cypher method"}
{"id": 3152 ,"Comment": "vigenere cipher method"}
{"id": 3153 ,"Comment": "perform anagram"}
{"id": 3154 ,"Comment": "perform arithmetic operations"}
{"id": 3155 ,"Comment": "find the area"}
{"id": 3156 ,"Comment": "find sum of big numbers"}
{"id": 3157 ,"Comment": "multipy big numbers"}
{"id": 3158 ,"Comment": "each increment moves to a new paragraph"}
{"id": 3159 ,"Comment": "all assertions passed"}
{"id": 3160 ,"Comment": "get parent"}
{"id": 3161 ,"Comment": "get child"}
{"id": 3162 ,"Comment": "get last"}
{"id": 3163 ,"Comment": "assert tests"}
{"id": 3164 ,"Comment": "paragraph network equal"}
{"id": 3165 ,"Comment": "get root"}
{"id": 3166 ,"Comment": "add number"}
{"id": 3167 ,"Comment": "make"}
{"id": 3168 ,"Comment": "append"}
{"id": 3169 ,"Comment": "set token"}
{"id": 3170 ,"Comment": "get post string"}
{"id": 3171 ,"Comment": "print head"}
{"id": 3172 ,"Comment": "print end"}
{"id": 3173 ,"Comment": "print header"}
{"id": 3174 ,"Comment": "get r method"}
{"id": 3175 ,"Comment": "set structure"}
{"id": 3176 ,"Comment": "filter string"}
{"id": 3177 ,"Comment": "get string"}
{"id": 3178 ,"Comment": "convert hexadecimal to dez=cimal"}
{"id": 3179 ,"Comment": "get structure"}
{"id": 3180 ,"Comment": "free info"}
{"id": 3181 ,"Comment": "get structure"}
{"id": 3182 ,"Comment": "print leaves node"}
{"id": 3183 ,"Comment": "print right node"}
{"id": 3184 ,"Comment": "print left node"}
{"id": 3185 ,"Comment": "find is tab or not"}
{"id": 3186 ,"Comment": "is whitespace"}
{"id": 3187 ,"Comment": "is space"}
{"id": 3188 ,"Comment": "is newline"}
{"id": 3189 ,"Comment": "browse inventory module"}
{"id": 3190 ,"Comment": "is underscore"}
{"id": 3191 ,"Comment": "chatbot do question"}
{"id": 3192 ,"Comment": "is number"}
{"id": 3193 ,"Comment": "chatbot is question"}
{"id": 3194 ,"Comment": "is latin"}
{"id": 3195 ,"Comment": "chatbot is smalltalk"}
{"id": 3196 ,"Comment": "chatbot do reset"}
{"id": 3197 ,"Comment": "chatbot is save"}
{"id": 3198 ,"Comment": "chatbot do save"}
{"id": 3199 ,"Comment": "chatbot is reset"}
{"id": 3200 ,"Comment": "print hashtable"}
{"id": 3201 ,"Comment": "set hashtable"}
{"id": 3202 ,"Comment": "chatbot do smalltalk"}
{"id": 3203 ,"Comment": "pair hashtable"}
{"id": 3204 ,"Comment": "create hashtable"}
{"id": 3205 ,"Comment": "print smalltalk"}
{"id": 3206 ,"Comment": "chatbot username"}
{"id": 3207 ,"Comment": "chatbot main"}
{"id": 3208 ,"Comment": "chatbot botname"}
{"id": 3209 ,"Comment": "chatbot is exit"}
{"id": 3210 ,"Comment": "chatbot is loading"}
{"id": 3211 ,"Comment": "combinatory"}
{"id": 3212 ,"Comment": "chatbot do loading"}
{"id": 3213 ,"Comment": "chatbot do exit"}
{"id": 3214 ,"Comment": "find prime number"}
{"id": 3215 ,"Comment": "find triangle number"}
{"id": 3216 ,"Comment": "sum of proper divisors"}
{"id": 3217 ,"Comment": "is permutation"}
{"id": 3218 ,"Comment": "counting combination"}
{"id": 3219 ,"Comment": "sum of divisors"}
{"id": 3220 ,"Comment": "fibonacci digits"}
{"id": 3221 ,"Comment": "find is vowel"}
{"id": 3222 ,"Comment": "find is even or not"}
{"id": 3223 ,"Comment": "fibonacci by lucas"}
{"id": 3224 ,"Comment": "get vowel indexes"}
{"id": 3225 ,"Comment": "spell the word"}
{"id": 3226 ,"Comment": "spell the word"}
{"id": 3227 ,"Comment": "function for the slash state"}
{"id": 3228 ,"Comment": "spell sentence"}
{"id": 3229 ,"Comment": "function for the bslash state"}
{"id": 3230 ,"Comment": "function for the normal state"}
{"id": 3231 ,"Comment": "function for the starbg state"}
{"id": 3232 ,"Comment": "function for the slash state"}
{"id": 3233 ,"Comment": "function for the bslash state"}
{"id": 3234 ,"Comment": "function to check the state of the DFA and take action"}
{"id": 3235 ,"Comment": "function for the stared state"}
{"id": 3236 ,"Comment": "function for the dquote state"}
{"id": 3237 ,"Comment": "print solution"}
{"id": 3238 ,"Comment": "function for the bslash state"}
{"id": 3239 ,"Comment": "function for the squote state"}
{"id": 3240 ,"Comment": "decrypting message"}
{"id": 3241 ,"Comment": "find place"}
{"id": 3242 ,"Comment": "place"}
{"id": 3243 ,"Comment": "encrypting message"}
{"id": 3244 ,"Comment": "thanks for using message"}
{"id": 3245 ,"Comment": "is delete"}
{"id": 3246 ,"Comment": "entry point module"}
{"id": 3247 ,"Comment": "find equation"}
{"id": 3248 ,"Comment": "is found"}
{"id": 3249 ,"Comment": "delete entry"}
{"id": 3250 ,"Comment": "prints in screen the block data"}
{"id": 3251 ,"Comment": "reads the inode metadata information from the volume file"}
{"id": 3252 ,"Comment": "determine if the volume specified by fd is an ext2 volume"}
{"id": 3253 ,"Comment": "prints in screen the inode data"}
{"id": 3254 ,"Comment": "get operation number"}
{"id": 3255 ,"Comment": "find the file"}
{"id": 3256 ,"Comment": "executes the action according to operation and filename on an ext2 filesystem"}
{"id": 3257 ,"Comment": "reads the Volume metadata information from the volume file"}
{"id": 3258 ,"Comment": "reads the blcok metadata information from the volume file"}
{"id": 3259 ,"Comment": "prints in screen the Volume data"}
{"id": 3260 ,"Comment": "reads and fills the information of the block group descriptor table"}
{"id": 3261 ,"Comment": "find and get inode"}
{"id": 3262 ,"Comment": "checks if the file specified is a directory given its name and type"}
{"id": 3263 ,"Comment": "checks if the file has been found or not"}
{"id": 3264 ,"Comment": "reads the directory entry given the pointer to the position and the pointer to the directory"}
{"id": 3265 ,"Comment": "find the number of positive divisor"}
{"id": 3266 ,"Comment": "converts a string of characters to uppercase"}
{"id": 3267 ,"Comment": "executes the action according to operation and filename"}
{"id": 3268 ,"Comment": "returns an integer corresponding to the operation string"}
{"id": 3269 ,"Comment": "find maximum factor"}
{"id": 3270 ,"Comment": "prints in screen the inode data"}
{"id": 3271 ,"Comment": "calculates the address position of the root directory entry"}
{"id": 3272 ,"Comment": "reads the fat16 filesystem metadata information from the volume file"}
{"id": 3273 ,"Comment": "calculates the address position of the next folder directory entry"}
{"id": 3274 ,"Comment": "determine if the volume specidied by fd is a fat16 volume"}
{"id": 3275 ,"Comment": "function used to check if there are more characters different from"}
{"id": 3276 ,"Comment": "parses the file name from the directory entry to convert it to normal format and not fat16 format"}
{"id": 3277 ,"Comment": "function that returns 1 if a directory entry is  a file"}
{"id": 3278 ,"Comment": "recursive function that finds looks for a file in  a fat16 filesystem"}
{"id": 3279 ,"Comment": "function that returns 1 if a directory entry is  a folder"}
{"id": 3280 ,"Comment": "is valid folder"}
{"id": 3281 ,"Comment": "print contents number"}
{"id": 3282 ,"Comment": "print contents"}
{"id": 3283 ,"Comment": "deletes the directory entry in the file system"}
{"id": 3284 ,"Comment": "checks if the file has been found or not"}
{"id": 3285 ,"Comment": "print contents normal"}
{"id": 3286 ,"Comment": "file destructor"}
{"id": 3287 ,"Comment": "compare contents"}
{"id": 3288 ,"Comment": "file constructor"}
{"id": 3289 ,"Comment": "is equation"}
{"id": 3290 ,"Comment": "find area"}
{"id": 3291 ,"Comment": "File length"}
{"id": 3292 ,"Comment": "print area"}
{"id": 3293 ,"Comment": "read contents"}
{"id": 3294 ,"Comment": "register"}
{"id": 3295 ,"Comment": "input the radius"}
{"id": 3296 ,"Comment": "display list"}
{"id": 3297 ,"Comment": "print the area of a circle by using functions without argument"}
{"id": 3298 ,"Comment": "declaration of game fucntion"}
{"id": 3299 ,"Comment": "sort by month"}
{"id": 3300 ,"Comment": "change details"}
{"id": 3301 ,"Comment": "sort by id"}
{"id": 3302 ,"Comment": "insert details"}
{"id": 3303 ,"Comment": "sort by name"}
{"id": 3304 ,"Comment": "swap data"}
{"id": 3305 ,"Comment": "display details"}
{"id": 3306 ,"Comment": "get amount"}
{"id": 3307 ,"Comment": "calculate total salary"}
{"id": 3308 ,"Comment": "calculate increment"}
{"id": 3309 ,"Comment": "print details"}
{"id": 3310 ,"Comment": "print weekly salary details"}
{"id": 3311 ,"Comment": "print total cost details"}
{"id": 3312 ,"Comment": "calculate weekly salary"}
{"id": 3313 ,"Comment": "calculate total cost"}
{"id": 3314 ,"Comment": "get discount price"}
{"id": 3315 ,"Comment": "ir gen error"}
{"id": 3316 ,"Comment": "make table"}
{"id": 3317 ,"Comment": "get table"}
{"id": 3318 ,"Comment": "generate"}
{"id": 3319 ,"Comment": "add table"}
{"id": 3320 ,"Comment": "reset knowledge"}
{"id": 3321 ,"Comment": "get knowledge"}
{"id": 3322 ,"Comment": "read knowledge"}
{"id": 3323 ,"Comment": "put knowledge"}
{"id": 3324 ,"Comment": "write knowledge"}
{"id": 3325 ,"Comment": "put my number"}
{"id": 3326 ,"Comment": "overflow"}
{"id": 3327 ,"Comment": "level order"}
{"id": 3328 ,"Comment": "larange interpolation"}
{"id": 3329 ,"Comment": "detete knowledge"}
{"id": 3330 ,"Comment": "print the version"}
{"id": 3331 ,"Comment": "set flags"}
{"id": 3332 ,"Comment": "apply LCA"}
{"id": 3333 ,"Comment": "read all the arguments"}
{"id": 3334 ,"Comment": "apply gaussian method"}
{"id": 3335 ,"Comment": "compare string"}
{"id": 3336 ,"Comment": "put string"}
{"id": 3337 ,"Comment": "find the length of the string"}
{"id": 3338 ,"Comment": "put character"}
{"id": 3339 ,"Comment": "convert intger to ascii"}
{"id": 3340 ,"Comment": "check id of library books"}
{"id": 3341 ,"Comment": "delete books"}
{"id": 3342 ,"Comment": "issue a record"}
{"id": 3343 ,"Comment": "get password"}
{"id": 3344 ,"Comment": "add books"}
{"id": 3345 ,"Comment": "go to main menu"}
{"id": 3346 ,"Comment": "go to xy direction"}
{"id": 3347 ,"Comment": "return function"}
{"id": 3348 ,"Comment": "edit books"}
{"id": 3349 ,"Comment": "search books"}
{"id": 3350 ,"Comment": "view books"}
{"id": 3351 ,"Comment": "get data from library mangement"}
{"id": 3352 ,"Comment": "debug log"}
{"id": 3353 ,"Comment": "arrange binary search tree"}
{"id": 3354 ,"Comment": "initialize mastermind"}
{"id": 3355 ,"Comment": "log session"}
{"id": 3356 ,"Comment": "prompt an user"}
{"id": 3357 ,"Comment": "compare token"}
{"id": 3358 ,"Comment": "make login portal"}
{"id": 3359 ,"Comment": "prompt the user to enter the code"}
{"id": 3360 ,"Comment": "make balanced tree"}
{"id": 3361 ,"Comment": "find the depth level"}
{"id": 3362 ,"Comment": "apply preorder in binary search tree"}
{"id": 3363 ,"Comment": "find the element"}
{"id": 3364 ,"Comment": "apply inorder in binary search tree"}
{"id": 3365 ,"Comment": "create main menu"}
{"id": 3366 ,"Comment": "compare the code with buffer"}
{"id": 3367 ,"Comment": "find if the code is placed in the right position"}
{"id": 3368 ,"Comment": "equation for modified euler"}
{"id": 3369 ,"Comment": "find if the code is placed in the wrong position"}
{"id": 3370 ,"Comment": "message to print if the code is or not placed correctly"}
{"id": 3371 ,"Comment": "scan in stored data from database text file to database"}
{"id": 3372 ,"Comment": "print sorted values along with associated categories"}
{"id": 3373 ,"Comment": "zero out all numeric values in database"}
{"id": 3374 ,"Comment": "copy budget master to database array of structures"}
{"id": 3375 ,"Comment": "scan in budget data from text file to budget master structure"}
{"id": 3376 ,"Comment": "update database text file with any user entries"}
{"id": 3377 ,"Comment": "display expense category menu and scan in user choice"}
{"id": 3378 ,"Comment": "calculate savings balance"}
{"id": 3379 ,"Comment": "record a numeric value from user"}
{"id": 3380 ,"Comment": "store recorded value in database"}
{"id": 3381 ,"Comment": "calculate total spending across categories"}
{"id": 3382 ,"Comment": "sort yearly total spending values"}
{"id": 3383 ,"Comment": "prints monthly budget report"}
{"id": 3384 ,"Comment": "display main menu and scan in user choice"}
{"id": 3385 ,"Comment": "display month menu, scan in user choice"}
{"id": 3386 ,"Comment": "sum up expenses across categories"}
{"id": 3387 ,"Comment": "process data entry menu"}
{"id": 3388 ,"Comment": "print montly report"}
{"id": 3389 ,"Comment": "display yearly report"}
{"id": 3390 ,"Comment": " display data entry menu and scan in user choice"}
{"id": 3391 ,"Comment": "newton raphson"}
{"id": 3392 ,"Comment": "newton backward interrpolation"}
{"id": 3393 ,"Comment": "decimal to binary"}
{"id": 3394 ,"Comment": "find the level order"}
{"id": 3395 ,"Comment": "display open address collision"}
{"id": 3396 ,"Comment": "netwon forward"}
{"id": 3397 ,"Comment": "read program"}
{"id": 3398 ,"Comment": "compare paragraph"}
{"id": 3399 ,"Comment": "create open address collision"}
{"id": 3400 ,"Comment": "find the first paragraph"}
{"id": 3401 ,"Comment": "find next paragraph"}
{"id": 3402 ,"Comment": "apply slicing in paragraph"}
{"id": 3403 ,"Comment": "find the maximum"}
{"id": 3404 ,"Comment": "find the linear probing"}
{"id": 3405 ,"Comment": "paragraph network constructor"}
{"id": 3406 ,"Comment": "paragraph destructor"}
{"id": 3407 ,"Comment": "paragraph constructor"}
{"id": 3408 ,"Comment": "find equal paragraph"}
{"id": 3409 ,"Comment": "paragraph network destructor"}
{"id": 3410 ,"Comment": "print vanilla paragraph "}
{"id": 3411 ,"Comment": "add paragraph paragraph network"}
{"id": 3412 ,"Comment": "equal paragraph"}
{"id": 3413 ,"Comment": "generate random code"}
{"id": 3414 ,"Comment": "print paragraph networks"}
{"id": 3415 ,"Comment": "set attempts"}
{"id": 3416 ,"Comment": "find equal network for paragraph"}
{"id": 3417 ,"Comment": "parse a string"}
{"id": 3418 ,"Comment": "set code"}
{"id": 3419 ,"Comment": "check options for parse"}
{"id": 3420 ,"Comment": "match a parser"}
{"id": 3421 ,"Comment": "declare a parser"}
{"id": 3422 ,"Comment": "function call"}
{"id": 3423 ,"Comment": "block for parser"}
{"id": 3424 ,"Comment": "print tree for parser"}
{"id": 3425 ,"Comment": "match no append for parser"}
{"id": 3426 ,"Comment": "make result for parser"}
{"id": 3427 ,"Comment": "match by class"}
{"id": 3428 ,"Comment": "program a parser"}
{"id": 3429 ,"Comment": "make parser"}
{"id": 3430 ,"Comment": "parse syntax error"}
{"id": 3431 ,"Comment": "program for parse"}
{"id": 3432 ,"Comment": "match by class no append"}
{"id": 3433 ,"Comment": "function for parse"}
{"id": 3434 ,"Comment": "program directive"}
{"id": 3435 ,"Comment": "include directive select"}
{"id": 3436 ,"Comment": "directive for module"}
{"id": 3437 ,"Comment": "include directive"}
{"id": 3438 ,"Comment": "secondary directives"}
{"id": 3439 ,"Comment": "function for parser"}
{"id": 3440 ,"Comment": "secondary directive list"}
{"id": 3441 ,"Comment": "continue statement"}
{"id": 3442 ,"Comment": "parameter list for parser"}
{"id": 3443 ,"Comment": "argument for parser"}
{"id": 3444 ,"Comment": "argument list for parser"}
{"id": 3445 ,"Comment": "parameter for parser"}
{"id": 3446 ,"Comment": "return statement for parser"}
{"id": 3447 ,"Comment": "binary optimization"}
{"id": 3448 ,"Comment": "unop"}
{"id": 3449 ,"Comment": "if statement for parser"}
{"id": 3450 ,"Comment": "break statement for parser"}
{"id": 3451 ,"Comment": "variable for parse"}
{"id": 3452 ,"Comment": "statement for parse"}
{"id": 3453 ,"Comment": "assignment for parse"}
{"id": 3454 ,"Comment": "simple expression"}
{"id": 3455 ,"Comment": "expression for parser"}
{"id": 3456 ,"Comment": "type for parser"}
{"id": 3457 ,"Comment": "term for parser"}
{"id": 3458 ,"Comment": "for statement for parser"}
{"id": 3459 ,"Comment": "expression statement for parse"}
{"id": 3460 ,"Comment": "pascal triangle"}
{"id": 3461 ,"Comment": "add person for phone directory"}
{"id": 3462 ,"Comment": "pause function"}
{"id": 3463 ,"Comment": "menu for phone directory"}
{"id": 3464 ,"Comment": "delete person for phone directory"}
{"id": 3465 ,"Comment": "find is decimal"}
{"id": 3466 ,"Comment": "view directory"}
{"id": 3467 ,"Comment": "change files"}
{"id": 3468 ,"Comment": "combination for pascal triangle"}
{"id": 3469 ,"Comment": "print left justified"}
{"id": 3470 ,"Comment": "format right justified"}
{"id": 3471 ,"Comment": "message in loop"}
{"id": 3472 ,"Comment": "format left justified"}
{"id": 3473 ,"Comment": "initialize prompt message"}
{"id": 3474 ,"Comment": "print right justified"}
{"id": 3475 ,"Comment": "print customer list decreasing order of purchases"}
{"id": 3476 ,"Comment": "print available products"}
{"id": 3477 ,"Comment": "print customer information"}
{"id": 3478 ,"Comment": "print items purchased by a customer frequency"}
{"id": 3479 ,"Comment": "print wish list"}
{"id": 3480 ,"Comment": "print items purchased by all customers frequency"}
{"id": 3481 ,"Comment": "start game for puzzle"}
{"id": 3482 ,"Comment": "return product"}
{"id": 3483 ,"Comment": "create user"}
{"id": 3484 ,"Comment": "add to wish list"}
{"id": 3485 ,"Comment": "print items for a category"}
{"id": 3486 ,"Comment": "order item"}
{"id": 3487 ,"Comment": "add product"}
{"id": 3488 ,"Comment": "cut paper for puzzle game"}
{"id": 3489 ,"Comment": "reverse level order"}
{"id": 3490 ,"Comment": "read line for file"}
{"id": 3491 ,"Comment": "get number of columns"}
{"id": 3492 ,"Comment": "get value"}
{"id": 3493 ,"Comment": "regular falsi"}
{"id": 3494 ,"Comment": "regular falsi"}
{"id": 3495 ,"Comment": "find reflective pair"}
{"id": 3496 ,"Comment": "final destination"}
{"id": 3497 ,"Comment": "equation for rungekutta"}
{"id": 3498 ,"Comment": "range of deleting array functions"}
{"id": 3499 ,"Comment": "equation for rungekutta 4th order"}
{"id": 3500 ,"Comment": "find sum of weights based on the following conditions"}
{"id": 3501 ,"Comment": "downsampling project bill"}
{"id": 3502 ,"Comment": "Save the string in a two dimensional array and search for substring"}
{"id": 3503 ,"Comment": "process CPU"}
{"id": 3504 ,"Comment": "Simpson"}
{"id": 3505 ,"Comment": "random between simulator"}
{"id": 3506 ,"Comment": "cases for signing off"}
{"id": 3507 ,"Comment": "choice for signing off"}
{"id": 3508 ,"Comment": "pass for signing off"}
{"id": 3509 ,"Comment": "create event"}
{"id": 3510 ,"Comment": "remove first from simulator"}
{"id": 3511 ,"Comment": "remove first from simulator"}
{"id": 3512 ,"Comment": "append in simulator"}
{"id": 3513 ,"Comment": "print daily status"}
{"id": 3514 ,"Comment": "process disk"}
{"id": 3515 ,"Comment": "remove job from disk"}
{"id": 3516 ,"Comment": "record event"}
{"id": 3517 ,"Comment": "print inital status"}
{"id": 3518 ,"Comment": "print state"}
{"id": 3519 ,"Comment": "find is all done or not"}
{"id": 3520 ,"Comment": "print final status"}
{"id": 3521 ,"Comment": "convert type to string"}
{"id": 3522 ,"Comment": "record the game"}
{"id": 3523 ,"Comment": "convert day to string"}
{"id": 3524 ,"Comment": "display correct usage of message"}
{"id": 3525 ,"Comment": "cleanup list for simulation"}
{"id": 3526 ,"Comment": "simulate for simulation"}
{"id": 3527 ,"Comment": "read data"}
{"id": 3528 ,"Comment": "initialize day"}
{"id": 3529 ,"Comment": "go to xy direction in snake game"}
{"id": 3530 ,"Comment": "score for snake game"}
{"id": 3531 ,"Comment": "move up in the snake game"}
{"id": 3532 ,"Comment": "go to xy direction in snake game"}
{"id": 3533 ,"Comment": "move the snake"}
{"id": 3534 ,"Comment": "show score only"}
{"id": 3535 ,"Comment": "load the snake game"}
{"id": 3536 ,"Comment": "move down in the snake game"}
{"id": 3537 ,"Comment": "food for snake game"}
{"id": 3538 ,"Comment": "print in snake game"}
{"id": 3539 ,"Comment": "delay the snake game"}
{"id": 3540 ,"Comment": "exit the snake game"}
{"id": 3541 ,"Comment": "turn left in snake game"}
{"id": 3542 ,"Comment": "turn right in snake game"}
{"id": 3543 ,"Comment": "make the snake boarder"}
{"id": 3544 ,"Comment": "bend the snake"}
{"id": 3545 ,"Comment": "create student list"}
{"id": 3546 ,"Comment": "copy the string"}
{"id": 3547 ,"Comment": "module for staff page"}
{"id": 3548 ,"Comment": "print student"}
{"id": 3549 ,"Comment": "initialize list of student"}
{"id": 3550 ,"Comment": "cut the string"}
{"id": 3551 ,"Comment": "print list of student"}
{"id": 3552 ,"Comment": "add student in student list"}
{"id": 3553 ,"Comment": "find the sum"}
{"id": 3554 ,"Comment": "delete list of student record"}
{"id": 3555 ,"Comment": "enter marks for student"}
{"id": 3556 ,"Comment": "get student id"}
{"id": 3557 ,"Comment": "display student information"}
{"id": 3558 ,"Comment": "save student information"}
{"id": 3559 ,"Comment": "retrieve student information"}
{"id": 3560 ,"Comment": "enter student data"}
{"id": 3561 ,"Comment": "find student from student record"}
{"id": 3562 ,"Comment": "display class information"}
{"id": 3563 ,"Comment": "find student information"}
{"id": 3564 ,"Comment": "register student"}
{"id": 3565 ,"Comment": "deregister student from student record"}
{"id": 3566 ,"Comment": "check win for tic tac toe game"}
{"id": 3567 ,"Comment": "write symbol table"}
{"id": 3568 ,"Comment": "add three address code"}
{"id": 3569 ,"Comment": "add symbol table"}
{"id": 3570 ,"Comment": "make symbol table"}
{"id": 3571 ,"Comment": "make three address code"}
{"id": 3572 ,"Comment": "draw board for tic tac toe game"}
{"id": 3573 ,"Comment": "get value for symbol table"}
{"id": 3574 ,"Comment": "get position for symbol table"}
{"id": 3575 ,"Comment": "get line for symbol table"}
{"id": 3576 ,"Comment": "draw board for tic tac toe game"}
{"id": 3577 ,"Comment": "put X O in for tic tac toe game"}
{"id": 3578 ,"Comment": "check draw for the game"}
{"id": 3579 ,"Comment": "make four"}
{"id": 3580 ,"Comment": "go to xy direction for the tic tac toe game"}
{"id": 3581 ,"Comment": "make two"}
{"id": 3582 ,"Comment": "find the possible win"}
{"id": 3583 ,"Comment": "find the first player"}
{"id": 3584 ,"Comment": "show the menu"}
{"id": 3585 ,"Comment": "go in the game"}
{"id": 3586 ,"Comment": "start tic tac toe game"}
{"id": 3587 ,"Comment": "get token type from token array"}
{"id": 3588 ,"Comment": "get canonial from token type"}
{"id": 3589 ,"Comment": "print tokens"}
{"id": 3590 ,"Comment": "make token"}
{"id": 3591 ,"Comment": "get class from token type"}
{"id": 3592 ,"Comment": "get token from token array"}
{"id": 3593 ,"Comment": "make token array"}
{"id": 3594 ,"Comment": "add token array"}
{"id": 3595 ,"Comment": "get token type class by token array"}
{"id": 3596 ,"Comment": "find if typetable exists"}
{"id": 3597 ,"Comment": "add vectors"}
{"id": 3598 ,"Comment": "initialize vectors"}
{"id": 3599 ,"Comment": "apply square and cube to numbers"}
{"id": 3600 ,"Comment": "update vectors"}
{"id": 3601 ,"Comment": "add typetable"}
{"id": 3602 ,"Comment": "delete vectors"}
{"id": 3603 ,"Comment": "get size of typetable"}
{"id": 3604 ,"Comment": "make typetable"}
{"id": 3605 ,"Comment": "find trapezoidal"}
{"id": 3606 ,"Comment": "go to vectors"}
{"id": 3607 ,"Comment": "find the first vector"}
{"id": 3608 ,"Comment": "get size of vectors"}
{"id": 3609 ,"Comment": "get value of vectors"}
{"id": 3610 ,"Comment": "find next vector"}
{"id": 3611 ,"Comment": "set auxillary vector"}
{"id": 3612 ,"Comment": "get auxillary vector"}
{"id": 3613 ,"Comment": "show vectors"}
{"id": 3614 ,"Comment": "track machine"}
{"id": 3615 ,"Comment": "decrypt and print"}
{"id": 3616 ,"Comment": "decrypt the numbers"}
{"id": 3617 ,"Comment": "make uppercase list"}
{"id": 3618 ,"Comment": "fill board"}
{"id": 3619 ,"Comment": "deep decrypt and print"}
{"id": 3620 ,"Comment": "print board"}
{"id": 3621 ,"Comment": "find random direction"}
{"id": 3622 ,"Comment": "find sum of array"}
{"id": 3623 ,"Comment": "find number of paths for home"}
{"id": 3624 ,"Comment": "control current"}
{"id": 3625 ,"Comment": "find can offer covid coverage"}
{"id": 3626 ,"Comment": "mix cards"}
{"id": 3627 ,"Comment": "encrypt characters"}
{"id": 3628 ,"Comment": "get random character"}
{"id": 3629 ,"Comment": "find maximum"}
{"id": 3630 ,"Comment": "refresh position"}
{"id": 3631 ,"Comment": "encrypt messages"}
{"id": 3632 ,"Comment": "read array"}
{"id": 3633 ,"Comment": "find the difference"}
{"id": 3634 ,"Comment": "read linked list"}
{"id": 3635 ,"Comment": "get data"}
{"id": 3636 ,"Comment": "get the menu"}
{"id": 3637 ,"Comment": "standard library for array"}
{"id": 3638 ,"Comment": "remove duplicate"}
{"id": 3639 ,"Comment": "status of array"}
{"id": 3640 ,"Comment": "get the menu"}
{"id": 3641 ,"Comment": "read news"}
{"id": 3642 ,"Comment": "function"}
{"id": 3643 ,"Comment": "read_magic_numbers"}
{"id": 3644 ,"Comment": "get function"}
{"id": 3645 ,"Comment": "append file"}
{"id": 3646 ,"Comment": "create menu"}
{"id": 3647 ,"Comment": "read news"}
{"id": 3648 ,"Comment": "generate hofstadters sequence"}
{"id": 3649 ,"Comment": "find readed or not"}
{"id": 3650 ,"Comment": "stats linked list"}
{"id": 3651 ,"Comment": "control intersection"}
{"id": 3652 ,"Comment": "overlap control"}
{"id": 3653 ,"Comment": "control records"}
{"id": 3654 ,"Comment": "read file"}
{"id": 3655 ,"Comment": "find type of triangle"}
{"id": 3656 ,"Comment": "find the closest multiple"}
{"id": 3657 ,"Comment": "find the perimeter of triangle"}
{"id": 3658 ,"Comment": "perform multiplication"}
{"id": 3659 ,"Comment": "find area of triangle"}
{"id": 3660 ,"Comment": "find the root of number"}
{"id": 3661 ,"Comment": "find the sum of number"}
{"id": 3662 ,"Comment": "find is prime"}
{"id": 3663 ,"Comment": "draw a triangle"}
{"id": 3664 ,"Comment": "find a digit"}
{"id": 3665 ,"Comment": "find the area of circle"}
{"id": 3666 ,"Comment": "find the number of length"}
{"id": 3667 ,"Comment": "find the power of number"}
{"id": 3668 ,"Comment": "find is binary or not"}
{"id": 3669 ,"Comment": "find the length"}
{"id": 3670 ,"Comment": "perform and operator"}
{"id": 3671 ,"Comment": "print queue for bfs"}
{"id": 3672 ,"Comment": "print graph for bellford"}
{"id": 3673 ,"Comment": "find new adjacent list node"}
{"id": 3674 ,"Comment": "bfs implementation"}
{"id": 3675 ,"Comment": "apply dequeue for bfs"}
{"id": 3676 ,"Comment": "create graph for bellford"}
{"id": 3677 ,"Comment": "find the shortest path tree"}
{"id": 3678 ,"Comment": "breadth first search"}
{"id": 3679 ,"Comment": "bellford implementation"}
{"id": 3680 ,"Comment": "add edge to the graph"}
{"id": 3681 ,"Comment": "print graph"}
{"id": 3682 ,"Comment": "find new adjacent list node"}
{"id": 3683 ,"Comment": "add edge to bfs"}
{"id": 3684 ,"Comment": "create graph for bfs"}
{"id": 3685 ,"Comment": "apply enqueue"}
{"id": 3686 ,"Comment": "create billing system"}
{"id": 3687 ,"Comment": "produce a bill"}
{"id": 3688 ,"Comment": "display a bill"}
{"id": 3689 ,"Comment": "produce invoice for bill"}
{"id": 3690 ,"Comment": "edit a bill"}
{"id": 3691 ,"Comment": "display a bill"}
{"id": 3692 ,"Comment": "delete node from binary search tree"}
{"id": 3693 ,"Comment": "find minimum distance from binary search tree"}
{"id": 3694 ,"Comment": "delete a bill"}
{"id": 3695 ,"Comment": "find in binary search tree"}
{"id": 3696 ,"Comment": "print binary search tree"}
{"id": 3697 ,"Comment": "find maximum in binary search tree"}
{"id": 3698 ,"Comment": "add in binary search tree"}
{"id": 3699 ,"Comment": "count tree in binary search tree"}
{"id": 3700 ,"Comment": "create phase two for bomb"}
{"id": 3701 ,"Comment": "create phase five for bomb"}
{"id": 3702 ,"Comment": "create phase one for bomb"}
{"id": 3703 ,"Comment": "create phase four for bomb"}
{"id": 3704 ,"Comment": "create phase six for bomb"}
{"id": 3705 ,"Comment": "create phase three for bomb"}
{"id": 3706 ,"Comment": "find string in list return index position"}
{"id": 3707 ,"Comment": "frees element of list"}
{"id": 3708 ,"Comment": "print list of circular linked list"}
{"id": 3709 ,"Comment": "preprocessing function for boyer moores bad character heuristic"}
{"id": 3710 ,"Comment": "get maximum of two integers"}
{"id": 3711 ,"Comment": "uses bad Character Heuristic of boyer moore algorithm"}
{"id": 3712 ,"Comment": "try to find the given pattern in the search string"}
{"id": 3713 ,"Comment": "add inorder for circular linked list"}
{"id": 3714 ,"Comment": "delete from circular linked list"}
{"id": 3715 ,"Comment": "get new list"}
{"id": 3716 ,"Comment": "get maximum"}
{"id": 3717 ,"Comment": "get node"}
{"id": 3718 ,"Comment": "add element to list"}
{"id": 3719 ,"Comment": "create a caluculator"}
{"id": 3720 ,"Comment": "perform cycle sort"}
{"id": 3721 ,"Comment": "check for CYK algorithm"}
{"id": 3722 ,"Comment": "depth first search algorithm"}
{"id": 3723 ,"Comment": "check parsing for CYK algorithm"}
{"id": 3724 ,"Comment": "get the value for crud utils"}
{"id": 3725 ,"Comment": "check NTR for CYK algorithm"}
{"id": 3726 ,"Comment": "remove an element"}
{"id": 3727 ,"Comment": "check TR for CYK algorithm"}
{"id": 3728 ,"Comment": "find the day of the week"}
{"id": 3729 ,"Comment": "delete next item"}
{"id": 3730 ,"Comment": "create depth first search"}
{"id": 3731 ,"Comment": "add an element"}
{"id": 3732 ,"Comment": "depth first search implementation"}
{"id": 3733 ,"Comment": "depth first search algorithm"}
{"id": 3734 ,"Comment": "print stack"}
{"id": 3735 ,"Comment": "print graph"}
{"id": 3736 ,"Comment": "add edge to the graph"}
{"id": 3737 ,"Comment": "find cycle is detected or not"}
{"id": 3738 ,"Comment": "save high score array"}
{"id": 3739 ,"Comment": "load the game"}
{"id": 3740 ,"Comment": "check for place in score array"}
{"id": 3741 ,"Comment": "load high score array"}
{"id": 3742 ,"Comment": "save the gamae"}
{"id": 3743 ,"Comment": "go to xy direction"}
{"id": 3744 ,"Comment": "dequeue from doubly ended queue"}
{"id": 3745 ,"Comment": "find different lines from game"}
{"id": 3746 ,"Comment": "display grid"}
{"id": 3747 ,"Comment": "check three lines"}
{"id": 3748 ,"Comment": "new data for doubly ended queue"}
{"id": 3749 ,"Comment": "calculate current time"}
{"id": 3750 ,"Comment": "print doubly ended queue"}
{"id": 3751 ,"Comment": "enqueue from doubly ended queue"}
{"id": 3752 ,"Comment": "denqueue from doubly ended queue"}
{"id": 3753 ,"Comment": "get color"}
{"id": 3754 ,"Comment": "print doubly ended queue"}
{"id": 3755 ,"Comment": "print backwards of doubly ended queue"}
{"id": 3756 ,"Comment": "enqueue from doubly ended queue"}
{"id": 3757 ,"Comment": "print list from doubly ended queue"}
{"id": 3758 ,"Comment": "delete doubly ended queue"}
{"id": 3759 ,"Comment": "add inorder for doubly ended queue"}
{"id": 3760 ,"Comment": "draw in y direction"}
{"id": 3761 ,"Comment": "draw in x direction"}
{"id": 3762 ,"Comment": "draw in upward direction"}
{"id": 3763 ,"Comment": "draw line"}
{"id": 3764 ,"Comment": "apply flag sorting"}
{"id": 3765 ,"Comment": "infix expression to tree"}
{"id": 3766 ,"Comment": "gives postfix expression from tree"}
{"id": 3767 ,"Comment": "check progress bar"}
{"id": 3768 ,"Comment": "initialize buffer for error messages"}
{"id": 3769 ,"Comment": "buffer for error messages"}
{"id": 3770 ,"Comment": "clear error messages for buffer"}
{"id": 3771 ,"Comment": "add error messages for buffer"}
{"id": 3772 ,"Comment": "check operation"}
{"id": 3773 ,"Comment": "put pixel"}
{"id": 3774 ,"Comment": "find is digit"}
{"id": 3775 ,"Comment": "get tree for expression tree"}
{"id": 3776 ,"Comment": "menu for fastfood"}
{"id": 3777 ,"Comment": "push into expression tree"}
{"id": 3778 ,"Comment": "get orders for fastfood"}
{"id": 3779 ,"Comment": "get node from expression tree"}
{"id": 3780 ,"Comment": "review orders for fastfood"}
{"id": 3781 ,"Comment": "pop from expression tree"}
{"id": 3782 ,"Comment": "payment for fastfood"}
{"id": 3783 ,"Comment": "clear screen"}
{"id": 3784 ,"Comment": "receipt for fastfood"}
{"id": 3785 ,"Comment": "spacer for fastfood"}
{"id": 3786 ,"Comment": "new adjacent list node"}
{"id": 3787 ,"Comment": "get pixels"}
{"id": 3788 ,"Comment": "create full pyramid of stars"}
{"id": 3789 ,"Comment": "grade finder"}
{"id": 3790 ,"Comment": "function for compare"}
{"id": 3791 ,"Comment": "compare"}
{"id": 3792 ,"Comment": "full pyramid of numbers"}
{"id": 3793 ,"Comment": "find prime number"}
{"id": 3794 ,"Comment": "print graph"}
{"id": 3795 ,"Comment": "perform heap sort"}
{"id": 3796 ,"Comment": "create graph"}
{"id": 3797 ,"Comment": "credit for hangman"}
{"id": 3798 ,"Comment": "enter number for number guess game"}
{"id": 3799 ,"Comment": "inizialize for hangman game"}
{"id": 3800 ,"Comment": "add edge for graph"}
{"id": 3801 ,"Comment": "presentation and insertion"}
{"id": 3802 ,"Comment": "fine in hangman"}
{"id": 3803 ,"Comment": "delete root from heap sort"}
{"id": 3804 ,"Comment": "create heap"}
{"id": 3805 ,"Comment": "make lower hexadecimal"}
{"id": 3806 ,"Comment": "make hexa letter to uppercase"}
{"id": 3807 ,"Comment": "make hexa decimal to uppercase"}
{"id": 3808 ,"Comment": "create heap"}
{"id": 3809 ,"Comment": "insert in heap"}
{"id": 3810 ,"Comment": "apply heap sort"}
{"id": 3811 ,"Comment": "display heap sort"}
{"id": 3812 ,"Comment": "make hexa letter to lowercase"}
{"id": 3813 ,"Comment": "adds data to top of stack"}
{"id": 3814 ,"Comment": "cleans stack"}
{"id": 3815 ,"Comment": "custom interpretor"}
{"id": 3816 ,"Comment": "caller function"}
{"id": 3817 ,"Comment": "apply horspool"}
{"id": 3818 ,"Comment": "find hexa digit"}
{"id": 3819 ,"Comment": "convert to infix or postfix"}
{"id": 3820 ,"Comment": "Precedence for operators"}
{"id": 3821 ,"Comment": "adds a node at the end of a doubly linked list"}
{"id": 3822 ,"Comment": "rotates stack to the top"}
{"id": 3823 ,"Comment": "shift a table"}
{"id": 3824 ,"Comment": "conversion logic"}
{"id": 3825 ,"Comment": "fills the first n bytes of the memory"}
{"id": 3826 ,"Comment": "push for kruskal algorithm"}
{"id": 3827 ,"Comment": "find is number"}
{"id": 3828 ,"Comment": "find options"}
{"id": 3829 ,"Comment": "do keys"}
{"id": 3830 ,"Comment": "adds data to top of stack"}
{"id": 3831 ,"Comment": "kruskal algorithm"}
{"id": 3832 ,"Comment": "put text"}
{"id": 3833 ,"Comment": "print stack for kruskal algorithm"}
{"id": 3834 ,"Comment": "change projection for keys"}
{"id": 3835 ,"Comment": "compare function"}
{"id": 3836 ,"Comment": "apply union"}
{"id": 3837 ,"Comment": "find using kruskal algorithm"}
{"id": 3838 ,"Comment": "make set"}
{"id": 3839 ,"Comment": "main menu for library management system"}
{"id": 3840 ,"Comment": "search books"}
{"id": 3841 ,"Comment": "go to xy direction"}
{"id": 3842 ,"Comment": "delete books"}
{"id": 3843 ,"Comment": "add books"}
{"id": 3844 ,"Comment": "view books"}
{"id": 3845 ,"Comment": "print link list"}
{"id": 3846 ,"Comment": "return function"}
{"id": 3847 ,"Comment": "edit books"}
{"id": 3848 ,"Comment": "get data for library management system"}
{"id": 3849 ,"Comment": "check id for library management system"}
{"id": 3850 ,"Comment": "perform linear sort"}
{"id": 3851 ,"Comment": "adds a node at the beginning"}
{"id": 3852 ,"Comment": "password for library management system"}
{"id": 3853 ,"Comment": "record a issue"}
{"id": 3854 ,"Comment": "reverse the linked list"}
{"id": 3855 ,"Comment": "frees doubly linked list"}
{"id": 3856 ,"Comment": "make result list"}
{"id": 3857 ,"Comment": "shows size of stack"}
{"id": 3858 ,"Comment": "get node for link list"}
{"id": 3859 ,"Comment": "display link list"}
{"id": 3860 ,"Comment": "print file"}
{"id": 3861 ,"Comment": "insert link list"}
{"id": 3862 ,"Comment": "delete node from link list"}
{"id": 3863 ,"Comment": "multiplication for link list"}
{"id": 3864 ,"Comment": "delete node at index"}
{"id": 3865 ,"Comment": "add inorder in link list"}
{"id": 3866 ,"Comment": "delete in link list"}
{"id": 3867 ,"Comment": "print list"}
{"id": 3868 ,"Comment": "add element in list"}
{"id": 3869 ,"Comment": "remove data from list"}
{"id": 3870 ,"Comment": "delete list"}
{"id": 3871 ,"Comment": "max heapify"}
{"id": 3872 ,"Comment": "read data"}
{"id": 3873 ,"Comment": "parse cell area"}
{"id": 3874 ,"Comment": "subtracts the top two in stack"}
{"id": 3875 ,"Comment": "new list"}
{"id": 3876 ,"Comment": "parse cell name"}
{"id": 3877 ,"Comment": "find product of top two in stack"}
{"id": 3878 ,"Comment": "mod of the top two in stack"}
{"id": 3879 ,"Comment": "divide top two in stack"}
{"id": 3880 ,"Comment": "insert list"}
{"id": 3881 ,"Comment": "apply merge sort"}
{"id": 3882 ,"Comment": "apply partition to find median value"}
{"id": 3883 ,"Comment": "print merge sort linked list"}
{"id": 3884 ,"Comment": "apply merge sort"}
{"id": 3885 ,"Comment": "apply merge on merge sort linked list"}
{"id": 3886 ,"Comment": "select to find median"}
{"id": 3887 ,"Comment": "apply three way merge sort"}
{"id": 3888 ,"Comment": "array for merge sort"}
{"id": 3889 ,"Comment": "perform monty"}
{"id": 3890 ,"Comment": "insert in merge sort linked list"}
{"id": 3891 ,"Comment": "create for merge sort linked list"}
{"id": 3892 ,"Comment": "print hexa to lowercase"}
{"id": 3893 ,"Comment": "put number"}
{"id": 3894 ,"Comment": "put string"}
{"id": 3895 ,"Comment": "perform main loop"}
{"id": 3896 ,"Comment": "find string length"}
{"id": 3897 ,"Comment": "get number"}
{"id": 3898 ,"Comment": "get character"}
{"id": 3899 ,"Comment": "find multiples of a number"}
{"id": 3900 ,"Comment": "find print"}
{"id": 3901 ,"Comment": "perform print"}
{"id": 3902 ,"Comment": "print pointer"}
{"id": 3903 ,"Comment": "print integer"}
{"id": 3904 ,"Comment": "print hexa uppercase"}
{"id": 3905 ,"Comment": "perform uniform distribution of neural network"}
{"id": 3906 ,"Comment": "copy string"}
{"id": 3907 ,"Comment": "print string"}
{"id": 3908 ,"Comment": "print character"}
{"id": 3909 ,"Comment": "compare string"}
{"id": 3910 ,"Comment": "compare string"}
{"id": 3911 ,"Comment": "print octal number"}
{"id": 3912 ,"Comment": "concatenate string"}
{"id": 3913 ,"Comment": "duplicate a string"}
{"id": 3914 ,"Comment": "naive string matching"}
{"id": 3915 ,"Comment": "activation of neural network"}
{"id": 3916 ,"Comment": "activation relu for neural network"}
{"id": 3917 ,"Comment": "make spiral data"}
{"id": 3918 ,"Comment": "delocation the spiral"}
{"id": 3919 ,"Comment": "make layer output for neural network"}
{"id": 3920 ,"Comment": "find sum of softmax layer output"}
{"id": 3921 ,"Comment": "forward in neural network"}
{"id": 3922 ,"Comment": "perform dot product"}
{"id": 3923 ,"Comment": "apply random range"}
{"id": 3924 ,"Comment": "activation of softmax"}
{"id": 3925 ,"Comment": "activation of sigmoid"}
{"id": 3926 ,"Comment": "delocation layer"}
{"id": 3927 ,"Comment": "initialize a layer"}
{"id": 3928 ,"Comment": "cast to character"}
{"id": 3929 ,"Comment": "cast to integer"}
{"id": 3930 ,"Comment": "apply fibonacci"}
{"id": 3931 ,"Comment": "make a square of a number"}
{"id": 3932 ,"Comment": "find next multiple"}
{"id": 3933 ,"Comment": "cast to double"}
{"id": 3934 ,"Comment": "convert fahrenheit to celsius"}
{"id": 3935 ,"Comment": "find string"}
{"id": 3936 ,"Comment": "make binary tester"}
{"id": 3937 ,"Comment": "count ones"}
{"id": 3938 ,"Comment": "find binary array"}
{"id": 3939 ,"Comment": "perform binary printer"}
{"id": 3940 ,"Comment": "prints everything in stack"}
{"id": 3941 ,"Comment": "print list for odd and even sort"}
{"id": 3942 ,"Comment": "conversion decimal to octal"}
{"id": 3943 ,"Comment": "close sheet for ods"}
{"id": 3944 ,"Comment": "open ods"}
{"id": 3945 ,"Comment": "close ods"}
{"id": 3946 ,"Comment": "print sheet names for ods"}
{"id": 3947 ,"Comment": "apply batcher sort"}
{"id": 3948 ,"Comment": "print sheet for ods"}
{"id": 3949 ,"Comment": "open sheet for ods"}
{"id": 3950 ,"Comment": "find sheet value for ods"}
{"id": 3951 ,"Comment": "returns nothing from stack"}
{"id": 3952 ,"Comment": "perform prims"}
{"id": 3953 ,"Comment": "make a pattern"}
{"id": 3954 ,"Comment": "make pascals triangle"}
{"id": 3955 ,"Comment": "retrieve open addressing linear"}
{"id": 3956 ,"Comment": "insert open addressing linear"}
{"id": 3957 ,"Comment": "flip pancake sort"}
{"id": 3958 ,"Comment": "make hash function"}
{"id": 3959 ,"Comment": "perform ceil search"}
{"id": 3960 ,"Comment": "apply insertion sort"}
{"id": 3961 ,"Comment": "apply pancake sort"}
{"id": 3962 ,"Comment": "flip the pancake sort"}
{"id": 3963 ,"Comment": "return edge"}
{"id": 3964 ,"Comment": "push into the stack"}
{"id": 3965 ,"Comment": "find the edge visited or not"}
{"id": 3966 ,"Comment": "perform polynomial addition"}
{"id": 3967 ,"Comment": "compute post fix evaluation"}
{"id": 3968 ,"Comment": "find powers of a number"}
{"id": 3969 ,"Comment": "logic for evaluation"}
{"id": 3970 ,"Comment": "prims minimum spanning tree"}
{"id": 3971 ,"Comment": "print stack"}
{"id": 3972 ,"Comment": "use pointer"}
{"id": 3973 ,"Comment": "read polynomial"}
{"id": 3974 ,"Comment": "arrange postman sort"}
{"id": 3975 ,"Comment": "function for deallocation"}
{"id": 3976 ,"Comment": "read profile"}
{"id": 3977 ,"Comment": "remove profile"}
{"id": 3978 ,"Comment": "insert profile"}
{"id": 3979 ,"Comment": "function for deallocation"}
{"id": 3980 ,"Comment": "isometric projection"}
{"id": 3981 ,"Comment": "print projection"}
{"id": 3982 ,"Comment": "print columns"}
{"id": 3983 ,"Comment": "do cords"}
{"id": 3984 ,"Comment": "start game"}
{"id": 3985 ,"Comment": "print rows"}
{"id": 3986 ,"Comment": "function for deallocation"}
{"id": 3987 ,"Comment": "compare areas"}
{"id": 3988 ,"Comment": "update board for puzzle solver game"}
{"id": 3989 ,"Comment": "load text file"}
{"id": 3990 ,"Comment": "check input validity"}
{"id": 3991 ,"Comment": "find is board filled or not"}
{"id": 3992 ,"Comment": "create array"}
{"id": 3993 ,"Comment": "display board for puzzle solver game"}
{"id": 3994 ,"Comment": "play game"}
{"id": 3995 ,"Comment": "cut paper game"}
{"id": 3996 ,"Comment": "compare names"}
{"id": 3997 ,"Comment": "compare areas in descending order"}
{"id": 3998 ,"Comment": "compare names in descending order"}
{"id": 3999 ,"Comment": "find index"}
{"id": 4000 ,"Comment": "insert first the even numbers to the beginning of the list"}
{"id": 4001 ,"Comment": "cut head and add at the last"}
{"id": 4002 ,"Comment": "cut last and add head"}
{"id": 4003 ,"Comment": "delete middle node"}
{"id": 4004 ,"Comment": "insert last by adding the odd numbers to the beginning of the list"}
{"id": 4005 ,"Comment": "change first and last"}
{"id": 4006 ,"Comment": "compare scores in descending"}
{"id": 4007 ,"Comment": "compare sorting"}
{"id": 4008 ,"Comment": "insert first node of the list and adds it to the end as last node"}
{"id": 4009 ,"Comment": "insert last"}
{"id": 4010 ,"Comment": "print the even numbers to the beginning of the list"}
{"id": 4011 ,"Comment": "empty the stack"}
{"id": 4012 ,"Comment": "print the queue array"}
{"id": 4013 ,"Comment": "delete node"}
{"id": 4014 ,"Comment": "dequeue from queue"}
{"id": 4015 ,"Comment": "insert first"}
{"id": 4016 ,"Comment": "free the queue"}
{"id": 4017 ,"Comment": "declare the structure"}
{"id": 4018 ,"Comment": "prints all the items in the queue"}
{"id": 4019 ,"Comment": "enqueue into the queue"}
{"id": 4020 ,"Comment": "change first and last"}
{"id": 4021 ,"Comment": "print the list name and age"}
{"id": 4022 ,"Comment": "dequeue from the queue"}
{"id": 4023 ,"Comment": "enqueue into the queue"}
{"id": 4024 ,"Comment": "pop from stack"}
{"id": 4025 ,"Comment": "push from stack"}
{"id": 4026 ,"Comment": "call string"}
{"id": 4027 ,"Comment": "apply quick sort"}
{"id": 4028 ,"Comment": "initialize call"}
{"id": 4029 ,"Comment": "partition for quick sort"}
{"id": 4030 ,"Comment": "apply quicksort"}
{"id": 4031 ,"Comment": "apply partition in quick sort using randomization"}
{"id": 4032 ,"Comment": "print radix sort"}
{"id": 4033 ,"Comment": "apply radix sort"}
{"id": 4034 ,"Comment": "make random shuffle"}
{"id": 4035 ,"Comment": "read crud"}
{"id": 4036 ,"Comment": "find string buffer tail"}
{"id": 4037 ,"Comment": "buffer string buffer"}
{"id": 4038 ,"Comment": "string buffer out"}
{"id": 4039 ,"Comment": "read all"}
{"id": 4040 ,"Comment": "trash string buffer"}
{"id": 4041 ,"Comment": "make map"}
{"id": 4042 ,"Comment": "initiate string buffer"}
{"id": 4043 ,"Comment": "put numbers"}
{"id": 4044 ,"Comment": "add string buffer"}
{"id": 4045 ,"Comment": "duplicate string buffer"}
{"id": 4046 ,"Comment": "apply shaker sort"}
{"id": 4047 ,"Comment": "apply linear search"}
{"id": 4048 ,"Comment": "linear search in linked list"}
{"id": 4049 ,"Comment": "insert separate chaining"}
{"id": 4050 ,"Comment": "apply shaker sort"}
{"id": 4051 ,"Comment": "create node"}
{"id": 4052 ,"Comment": "retrieve separate chaining"}
{"id": 4053 ,"Comment": "bubble sort for array"}
{"id": 4054 ,"Comment": "apply selective sort recursively"}
{"id": 4055 ,"Comment": "prepend an element to list"}
{"id": 4056 ,"Comment": "apply selection sort"}
{"id": 4057 ,"Comment": "binary search in array and number of steps"}
{"id": 4058 ,"Comment": "hash function"}
{"id": 4059 ,"Comment": "find distinct array"}
{"id": 4060 ,"Comment": "apply slow sort"}
{"id": 4061 ,"Comment": "print array for slow sort"}
{"id": 4062 ,"Comment": "perform preorder for binary search tree"}
{"id": 4063 ,"Comment": "convert array to binary search tree"}
{"id": 4064 ,"Comment": "delete the first element from the queue"}
{"id": 4065 ,"Comment": "search for a product and delete the product or display its information"}
{"id": 4066 ,"Comment": "delete the last element of the stack cart"}
{"id": 4067 ,"Comment": "to store product in the cart and also for sorting the items in a tree form"}
{"id": 4068 ,"Comment": "find the top"}
{"id": 4069 ,"Comment": "sort by number of distinct characters"}
{"id": 4070 ,"Comment": "create new node"}
{"id": 4071 ,"Comment": "sort by length"}
{"id": 4072 ,"Comment": "sort the string"}
{"id": 4073 ,"Comment": "apply stooge sort"}
{"id": 4074 ,"Comment": "reverse lexicographic sort"}
{"id": 4075 ,"Comment": "perform lexicographic sort"}
{"id": 4076 ,"Comment": "insert and sort registry"}
{"id": 4077 ,"Comment": "insert and sort name"}
{"id": 4078 ,"Comment": "find the layer"}
{"id": 4079 ,"Comment": "push into the stack"}
{"id": 4080 ,"Comment": "pop from the stack"}
{"id": 4081 ,"Comment": "initialize the stack"}
{"id": 4082 ,"Comment": "sort names"}
{"id": 4083 ,"Comment": "get offset"}
{"id": 4084 ,"Comment": "print list for link list"}
{"id": 4085 ,"Comment": "define stack"}
{"id": 4086 ,"Comment": "find minimum value"}
{"id": 4087 ,"Comment": "print array"}
{"id": 4088 ,"Comment": "apply tim sort"}
{"id": 4089 ,"Comment": "prints character"}
{"id": 4090 ,"Comment": "prints string"}
{"id": 4091 ,"Comment": "run tic toe game"}
{"id": 4092 ,"Comment": "prints out everything in stack"}
{"id": 4093 ,"Comment": "check tic toe game"}
{"id": 4094 ,"Comment": "check string"}
{"id": 4095 ,"Comment": "rotates stack to the bottom"}
{"id": 4096 ,"Comment": "display the tic toe game"}
{"id": 4097 ,"Comment": "apply insertion sort"}
{"id": 4098 ,"Comment": "input value for tic toe game"}
{"id": 4099 ,"Comment": "perform merge"}
{"id": 4100 ,"Comment": "initialize team for tournament"}
{"id": 4101 ,"Comment": "check null validity"}
{"id": 4102 ,"Comment": "implementing the entire tournament"}
{"id": 4103 ,"Comment": "create a player"}
{"id": 4104 ,"Comment": "calculate defensive score for team"}
{"id": 4105 ,"Comment": "game function"}
{"id": 4106 ,"Comment": "perform union"}
{"id": 4107 ,"Comment": "find is there is any cycle or not"}
{"id": 4108 ,"Comment": "check if team is power of two"}
{"id": 4109 ,"Comment": "calculate offensive score for team"}
{"id": 4110 ,"Comment": "free up memory"}
{"id": 4111 ,"Comment": "find union"}
{"id": 4112 ,"Comment": "insert vector"}
{"id": 4113 ,"Comment": "create graph"}
{"id": 4114 ,"Comment": "make new vector"}
{"id": 4115 ,"Comment": "remove vector"}
{"id": 4116 ,"Comment": "read vector"}
{"id": 4117 ,"Comment": "delete vector"}
{"id": 4118 ,"Comment": "update a element of list according to index"}
{"id": 4119 ,"Comment": "find vowels"}
{"id": 4120 ,"Comment": "print xml"}
{"id": 4121 ,"Comment": "get direct child by name"}
{"id": 4122 ,"Comment": "get element by path in tree"}
{"id": 4123 ,"Comment": "make xml free"}
{"id": 4124 ,"Comment": "get element attribute by name and return value"}
{"id": 4125 ,"Comment": "get child by name and attribute value"}
{"id": 4126 ,"Comment": "handle nonnegative number"}
{"id": 4127 ,"Comment": "use randomize operator"}
{"id": 4128 ,"Comment": "perform calculation"}
{"id": 4129 ,"Comment": "validate an answer"}
{"id": 4130 ,"Comment": "calculate real answer"}
{"id": 4131 ,"Comment": "get number of questions"}
{"id": 4132 ,"Comment": "create doubly linked list"}
{"id": 4133 ,"Comment": "add nth node in doubly linked list"}
{"id": 4134 ,"Comment": "get size of doubly linked list"}
{"id": 4135 ,"Comment": "remove nth node doubly linked list"}
{"id": 4136 ,"Comment": "get nth node for doubly linked list"}
{"id": 4137 ,"Comment": "free doubly linked list"}
{"id": 4138 ,"Comment": "servers for hash function"}
{"id": 4139 ,"Comment": "redistribute server before addding objects"}
{"id": 4140 ,"Comment": "balancing the objects before removing a server"}
{"id": 4141 ,"Comment": "position_in_hash_ring"}
{"id": 4142 ,"Comment": "liner searching in hash ring to get the position where new server will be stocked"}
{"id": 4143 ,"Comment": "compare strings"}
{"id": 4144 ,"Comment": "hash function to find key"}
{"id": 4145 ,"Comment": "linear searching in the doubly linked list for the hash position"}
{"id": 4146 ,"Comment": "print result"}
{"id": 4147 ,"Comment": "print all results by name"}
{"id": 4148 ,"Comment": "generate correct answer response"}
{"id": 4149 ,"Comment": "print top result"}
{"id": 4150 ,"Comment": "generate incorrect answer response"}
{"id": 4151 ,"Comment": "print top five results"}
{"id": 4152 ,"Comment": "generate question feedback"}
{"id": 4153 ,"Comment": "print all results"}
{"id": 4154 ,"Comment": "get count"}
{"id": 4155 ,"Comment": "display score for guessing game"}
{"id": 4156 ,"Comment": "set instone"}
{"id": 4157 ,"Comment": "search in guessing game"}
{"id": 4158 ,"Comment": "show main menu"}
{"id": 4159 ,"Comment": "option for help in guessing game"}
{"id": 4160 ,"Comment": "produce score as two"}
{"id": 4161 ,"Comment": "option for help in guessing game"}
{"id": 4162 ,"Comment": "write score"}
{"id": 4163 ,"Comment": "search login id"}
{"id": 4164 ,"Comment": "create signup"}
{"id": 4165 ,"Comment": "create login"}
{"id": 4166 ,"Comment": "create home"}
{"id": 4167 ,"Comment": "display the guessing game"}
{"id": 4168 ,"Comment": "create new nodes"}
{"id": 4169 ,"Comment": "create minimum heap"}
{"id": 4170 ,"Comment": "swap minimum heap node"}
{"id": 4171 ,"Comment": "apply minimum heapify"}
{"id": 4172 ,"Comment": "check if size if 1"}
{"id": 4173 ,"Comment": "find there is leaf or not"}
{"id": 4174 ,"Comment": "insert minimum heap"}
{"id": 4175 ,"Comment": "extract minimu"}
{"id": 4176 ,"Comment": "display array"}
{"id": 4177 ,"Comment": "build minimum heap"}
{"id": 4178 ,"Comment": "string sort"}
{"id": 4179 ,"Comment": "create and build minimum heap"}
{"id": 4180 ,"Comment": "build huffman tree"}
{"id": 4181 ,"Comment": "frequency of strings"}
{"id": 4182 ,"Comment": "print heap"}
{"id": 4183 ,"Comment": "huffman encode"}
{"id": 4184 ,"Comment": "find is nullable"}
{"id": 4185 ,"Comment": "compute trailing"}
{"id": 4186 ,"Comment": "compute leading"}
{"id": 4187 ,"Comment": "display leading and trailing"}
{"id": 4188 ,"Comment": "get input"}
{"id": 4189 ,"Comment": "expand leading and trailing"}
{"id": 4190 ,"Comment": "free linked list"}
{"id": 4191 ,"Comment": "add nth node in linked list"}
{"id": 4192 ,"Comment": "remove nth node from linked list"}
{"id": 4193 ,"Comment": "create linked list"}
{"id": 4194 ,"Comment": "get size of linked list"}
{"id": 4195 ,"Comment": "adding a new server in the system"}
{"id": 4196 ,"Comment": "searching in the hash ring the server which contain the desired key"}
{"id": 4197 ,"Comment": "searching the server to add a new entry"}
{"id": 4198 ,"Comment": "memory release for the load balancer"}
{"id": 4199 ,"Comment": "removing a server and his duplicates from the system"}
{"id": 4200 ,"Comment": "initialize load balance"}
{"id": 4201 ,"Comment": "get key value"}
{"id": 4202 ,"Comment": "get name"}
{"id": 4203 ,"Comment": "display main menu"}
{"id": 4204 ,"Comment": "get key"}
{"id": 4205 ,"Comment": "apply requests"}
{"id": 4206 ,"Comment": "calculate menu"}
{"id": 4207 ,"Comment": "read from file"}
{"id": 4208 ,"Comment": "show all video games"}
{"id": 4209 ,"Comment": "find time stamp"}
{"id": 4210 ,"Comment": "get video game"}
{"id": 4211 ,"Comment": "show main menu from video game"}
{"id": 4212 ,"Comment": "write to file"}
{"id": 4213 ,"Comment": "show video game"}
{"id": 4214 ,"Comment": "save shopping list"}
{"id": 4215 ,"Comment": "add item in the shopping list"}
{"id": 4216 ,"Comment": "load item from the shopping list"}
{"id": 4217 ,"Comment": "remove item from the shopping list"}
{"id": 4218 ,"Comment": "print shopping list"}
{"id": 4219 ,"Comment": "edit item from the shopping list"}
{"id": 4220 ,"Comment": "checking if a key is already in the hash table server"}
{"id": 4221 ,"Comment": "free list inside the data"}
{"id": 4222 ,"Comment": "hashtable initialization"}
{"id": 4223 ,"Comment": "adding a new entry in the hashtable"}
{"id": 4224 ,"Comment": "getting the value from ht_server, associated with key"}
{"id": 4225 ,"Comment": "release the memory for the hashtable"}
{"id": 4226 ,"Comment": "removing a entry from the hashtable"}
{"id": 4227 ,"Comment": "initialize matrix"}
{"id": 4228 ,"Comment": "perform subtraction in matrix"}
{"id": 4229 ,"Comment": "perform addition in matrix"}
{"id": 4230 ,"Comment": "perform addition in matrix"}
{"id": 4231 ,"Comment": "perform addition in matrix"}
{"id": 4232 ,"Comment": "eliminate matrix"}
{"id": 4233 ,"Comment": "perform subtraction in matrix"}
{"id": 4234 ,"Comment": "find determinant in matrix"}
{"id": 4235 ,"Comment": "perform subtraction in matrix"}
{"id": 4236 ,"Comment": "inverse the matrix"}
{"id": 4237 ,"Comment": "allocate matrix"}
{"id": 4238 ,"Comment": "transpose matrix"}
{"id": 4239 ,"Comment": "copy matrix"}
{"id": 4240 ,"Comment": "get random matrix"}
{"id": 4241 ,"Comment": "get random normalization for matrix"}
{"id": 4242 ,"Comment": "get zeros from matrix"}
{"id": 4243 ,"Comment": "get ones from matrix"}
{"id": 4244 ,"Comment": "release matrix"}
{"id": 4245 ,"Comment": "find identity matrix"}
{"id": 4246 ,"Comment": "print matrix"}
{"id": 4247 ,"Comment": "perform multiplication in matrix"}
{"id": 4248 ,"Comment": "transpose matrix"}
{"id": 4249 ,"Comment": "perform multiplication in matrix"}
{"id": 4250 ,"Comment": "perform multiplication in matrix"}
{"id": 4251 ,"Comment": "map current user to test result"}
{"id": 4252 ,"Comment": "get all results"}
{"id": 4253 ,"Comment": "add test result"}
{"id": 4254 ,"Comment": "sort results"}
{"id": 4255 ,"Comment": "get number of test results"}
{"id": 4256 ,"Comment": "add nth node in linked list"}
{"id": 4257 ,"Comment": "delete from rope tree"}
{"id": 4258 ,"Comment": "get size of stack"}
{"id": 4259 ,"Comment": "clear stack"}
{"id": 4260 ,"Comment": "peek from stack"}
{"id": 4261 ,"Comment": "push from stack"}
{"id": 4262 ,"Comment": "create the stack"}
{"id": 4263 ,"Comment": "free the stack"}
{"id": 4264 ,"Comment": "create linked list"}
{"id": 4265 ,"Comment": "pop from stack"}
{"id": 4266 ,"Comment": "concatenate rope tree"}
{"id": 4267 ,"Comment": "make rope node"}
{"id": 4268 ,"Comment": "print rope node"}
{"id": 4269 ,"Comment": "get total weight from rope node"}
{"id": 4270 ,"Comment": "make rope tree"}
{"id": 4271 ,"Comment": "remove nth node from linked list"}
{"id": 4272 ,"Comment": "make a empty creator"}
{"id": 4273 ,"Comment": "debug rope node"}
{"id": 4274 ,"Comment": "print rope tree"}
{"id": 4275 ,"Comment": "copy string"}
{"id": 4276 ,"Comment": "find index rope"}
{"id": 4277 ,"Comment": "insert into the rope tree"}
{"id": 4278 ,"Comment": "search from the rope tree"}
{"id": 4279 ,"Comment": "concatenate nodes from rope node"}
{"id": 4280 ,"Comment": "split rope using rope node"}
{"id": 4281 ,"Comment": "find index of rope from rope tree"}
{"id": 4282 ,"Comment": "split the rope tree"}
{"id": 4283 ,"Comment": "save question"}
{"id": 4284 ,"Comment": "perform execution"}
{"id": 4285 ,"Comment": "find on segment fault"}
{"id": 4286 ,"Comment": "print test time"}
{"id": 4287 ,"Comment": "register the result"}
{"id": 4288 ,"Comment": "assert less equal precision"}
{"id": 4289 ,"Comment": "perform ez test run"}
{"id": 4290 ,"Comment": "test discovery"}
{"id": 4291 ,"Comment": "find should skip or not"}
{"id": 4292 ,"Comment": "get test result in percent"}
{"id": 4293 ,"Comment": "assert are not same"}
{"id": 4294 ,"Comment": "print program usage"}
{"id": 4295 ,"Comment": "parse application options"}
{"id": 4296 ,"Comment": "assert is null"}
{"id": 4297 ,"Comment": "assert is not null"}
{"id": 4298 ,"Comment": "assert are same"}
{"id": 4299 ,"Comment": "assert is true"}
{"id": 4300 ,"Comment": "assert is false"}
{"id": 4301 ,"Comment": "processes application options by parsing given options and setting the appropriate options"}
{"id": 4302 ,"Comment": "assert are not equal and compare"}
{"id": 4303 ,"Comment": "handle memory test failed"}
{"id": 4304 ,"Comment": "assert equal memory"}
{"id": 4305 ,"Comment": "assert is nan"}
{"id": 4306 ,"Comment": "assert greater memory"}
{"id": 4307 ,"Comment": "assert are equal and compare"}
{"id": 4308 ,"Comment": "assert greater and equal memory"}
{"id": 4309 ,"Comment": "assert not equal memory"}
{"id": 4310 ,"Comment": "assert less memory"}
{"id": 4311 ,"Comment": "assert less and equal memory"}
{"id": 4312 ,"Comment": "assert are equal"}
{"id": 4313 ,"Comment": "assert greater and equal and compare"}
{"id": 4314 ,"Comment": "assert are not equal sch"}
{"id": 4315 ,"Comment": "assert are not equal character"}
{"id": 4316 ,"Comment": "assert are equal character"}
{"id": 4317 ,"Comment": "assert less equal and compare"}
{"id": 4318 ,"Comment": "assert are equal sch"}
{"id": 4319 ,"Comment": "assert less and compare"}
{"id": 4320 ,"Comment": "assert are equal integer"}
{"id": 4321 ,"Comment": "assert are equal unipotent character"}
{"id": 4322 ,"Comment": "assert are equal string"}
{"id": 4323 ,"Comment": "assert are equal uinteger"}
{"id": 4324 ,"Comment": "assert are equal wstring"}
{"id": 4325 ,"Comment": "assert are equal double"}
{"id": 4326 ,"Comment": "assert are equal precision"}
{"id": 4327 ,"Comment": "assert are not equal uinteger"}
{"id": 4328 ,"Comment": "assert are not equal string"}
{"id": 4329 ,"Comment": "assert are not equal double"}
{"id": 4330 ,"Comment": "assert are not equal"}
{"id": 4331 ,"Comment": "assert are not equal wstring"}
{"id": 4332 ,"Comment": "assert are not equal integer"}
{"id": 4333 ,"Comment": "assert greater equal integer"}
{"id": 4334 ,"Comment": "assert are not equal precision"}
{"id": 4335 ,"Comment": "assert greater character"}
{"id": 4336 ,"Comment": "assert greater ucharacter"}
{"id": 4337 ,"Comment": "assert greater equal character"}
{"id": 4338 ,"Comment": "assert greater uinteger"}
{"id": 4339 ,"Comment": "assert greater wstring"}
{"id": 4340 ,"Comment": "assert greater sch"}
{"id": 4341 ,"Comment": "assert greater string"}
{"id": 4342 ,"Comment": "assert greater double"}
{"id": 4343 ,"Comment": "assert greater equal sch"}
{"id": 4344 ,"Comment": "assert greater"}
{"id": 4345 ,"Comment": "assert greater precision"}
{"id": 4346 ,"Comment": "assert greater integer"}
{"id": 4347 ,"Comment": "assert greater equal ucharacter"}
{"id": 4348 ,"Comment": "assert less integer"}
{"id": 4349 ,"Comment": "assert greater equal"}
{"id": 4350 ,"Comment": "assert greater equal uinteger"}
{"id": 4351 ,"Comment": "assert greater equal double"}
{"id": 4352 ,"Comment": "assert greater equal wstring"}
{"id": 4353 ,"Comment": "assert greater equal string"}
{"id": 4354 ,"Comment": "assert less sch"}
{"id": 4355 ,"Comment": "assert less character"}
{"id": 4356 ,"Comment": "assert greater equal precision"}
{"id": 4357 ,"Comment": "assert less ucharacter"}
{"id": 4358 ,"Comment": "assert less equal integer"}
{"id": 4359 ,"Comment": "assert less double"}
{"id": 4360 ,"Comment": "assert less wstring"}
{"id": 4361 ,"Comment": "assert less string"}
{"id": 4362 ,"Comment": "assert less uinteger"}
{"id": 4363 ,"Comment": "assert less equal character"}
{"id": 4364 ,"Comment": "assert less equal ucharacter"}
{"id": 4365 ,"Comment": "assert less"}
{"id": 4366 ,"Comment": "assert less precision"}
{"id": 4367 ,"Comment": "assert less equal string"}
{"id": 4368 ,"Comment": "assert less equal wstring"}
{"id": 4369 ,"Comment": "assert less equal double"}
{"id": 4370 ,"Comment": "assert less equal uinteger"}
{"id": 4371 ,"Comment": "assert less equal"}
